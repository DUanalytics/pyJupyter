2022-12-03 13:10:13,971:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 13:10:13,972:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 13:10:13,972:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 13:10:13,972:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 13:10:17,515:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 13:10:24,048:INFO:PyCaret ClassificationExperiment
2022-12-03 13:10:24,048:INFO:Logging name: clf-default-name
2022-12-03 13:10:24,048:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2022-12-03 13:10:24,048:INFO:version 3.0.0.rc4
2022-12-03 13:10:24,048:INFO:Initializing setup()
2022-12-03 13:10:24,048:INFO:self.USI: 3cc3
2022-12-03 13:10:24,048:INFO:self.variable_keys: {'exp_id', 'target_param', 'fold_groups_param', 'logging_param', '_all_metrics', 'log_plots_param', 'seed', 'n_jobs_param', 'fix_imbalance', 'y_train', 'html_param', '_gpu_n_jobs_param', 'master_model_container', 'idx', 'fold_generator', 'memory', '_all_models_internal', 'exp_name_log', 'X_test', 'USI', 'pipeline', 'y_test', '_is_multiclass', 'data', 'display_container', 'gpu_param', 'X_train', 'variable_keys', '_available_plots', 'X', '_ml_usecase', '_all_models', 'y', 'fold_shuffle_param'}
2022-12-03 13:10:24,048:INFO:Checking environment
2022-12-03 13:10:24,048:INFO:python_version: 3.9.13
2022-12-03 13:10:24,048:INFO:python_build: ('main', 'Aug 25 2022 23:51:50')
2022-12-03 13:10:24,048:INFO:machine: AMD64
2022-12-03 13:10:24,048:INFO:platform: Windows-10-10.0.19044-SP0
2022-12-03 13:10:24,048:INFO:Memory: svmem(total=17043402752, available=8555466752, percent=49.8, used=8487936000, free=8555466752)
2022-12-03 13:10:24,048:INFO:Physical Core: 2
2022-12-03 13:10:24,048:INFO:Logical Core: 4
2022-12-03 13:10:24,048:INFO:Checking libraries
2022-12-03 13:10:24,048:INFO:System:
2022-12-03 13:10:24,048:INFO:    python: 3.9.13 (main, Aug 25 2022, 23:51:50) [MSC v.1916 64 bit (AMD64)]
2022-12-03 13:10:24,048:INFO:executable: C:\ProgramData\Anaconda3\python.exe
2022-12-03 13:10:24,048:INFO:   machine: Windows-10-10.0.19044-SP0
2022-12-03 13:10:24,048:INFO:PyCaret required dependencies:
2022-12-03 13:10:24,048:INFO:                 pip: 22.2.2
2022-12-03 13:10:24,048:INFO:          setuptools: 63.4.1
2022-12-03 13:10:24,048:INFO:             pycaret: 3.0.0rc4
2022-12-03 13:10:24,048:INFO:             IPython: 7.31.1
2022-12-03 13:10:24,048:INFO:          ipywidgets: 7.6.5
2022-12-03 13:10:24,048:INFO:                tqdm: 4.64.1
2022-12-03 13:10:24,048:INFO:               numpy: 1.21.5
2022-12-03 13:10:24,048:INFO:              pandas: 1.4.4
2022-12-03 13:10:24,048:INFO:              jinja2: 2.11.3
2022-12-03 13:10:24,048:INFO:               scipy: 1.9.1
2022-12-03 13:10:24,048:INFO:              joblib: 1.2.0
2022-12-03 13:10:24,048:INFO:             sklearn: 1.1.3
2022-12-03 13:10:24,048:INFO:                pyod: 1.0.6
2022-12-03 13:10:24,048:INFO:            imblearn: 0.9.1
2022-12-03 13:10:24,048:INFO:   category_encoders: 2.5.1.post0
2022-12-03 13:10:24,048:INFO:            lightgbm: 3.3.3
2022-12-03 13:10:24,048:INFO:               numba: 0.55.1
2022-12-03 13:10:24,048:INFO:            requests: 2.28.1
2022-12-03 13:10:24,048:INFO:          matplotlib: 3.5.2
2022-12-03 13:10:24,048:INFO:          scikitplot: 0.3.7
2022-12-03 13:10:24,048:INFO:         yellowbrick: 1.5
2022-12-03 13:10:24,048:INFO:              plotly: 5.9.0
2022-12-03 13:10:24,048:INFO:             kaleido: 0.2.1
2022-12-03 13:10:24,048:INFO:         statsmodels: 0.13.2
2022-12-03 13:10:24,048:INFO:              sktime: 0.14.1
2022-12-03 13:10:24,048:INFO:               tbats: 1.1.1
2022-12-03 13:10:24,048:INFO:            pmdarima: 1.8.4
2022-12-03 13:10:24,048:INFO:              psutil: 5.9.0
2022-12-03 13:10:24,048:INFO:PyCaret optional dependencies:
2022-12-03 13:10:24,110:INFO:                shap: Not installed
2022-12-03 13:10:24,110:INFO:           interpret: Not installed
2022-12-03 13:10:24,110:INFO:                umap: Not installed
2022-12-03 13:10:24,110:INFO:    pandas_profiling: Not installed
2022-12-03 13:10:24,110:INFO:  explainerdashboard: Not installed
2022-12-03 13:10:24,110:INFO:             autoviz: Not installed
2022-12-03 13:10:24,110:INFO:           fairlearn: Not installed
2022-12-03 13:10:24,110:INFO:             xgboost: Not installed
2022-12-03 13:10:24,110:INFO:            catboost: Not installed
2022-12-03 13:10:24,110:INFO:              kmodes: Not installed
2022-12-03 13:10:24,110:INFO:             mlxtend: 0.21.0
2022-12-03 13:10:24,110:INFO:       statsforecast: Not installed
2022-12-03 13:10:24,110:INFO:        tune_sklearn: Not installed
2022-12-03 13:10:24,110:INFO:                 ray: Not installed
2022-12-03 13:10:24,110:INFO:            hyperopt: Not installed
2022-12-03 13:10:24,110:INFO:              optuna: Not installed
2022-12-03 13:10:24,110:INFO:               skopt: Not installed
2022-12-03 13:10:24,110:INFO:              mlflow: Not installed
2022-12-03 13:10:24,110:INFO:              gradio: Not installed
2022-12-03 13:10:24,110:INFO:             fastapi: Not installed
2022-12-03 13:10:24,110:INFO:             uvicorn: Not installed
2022-12-03 13:10:24,110:INFO:              m2cgen: Not installed
2022-12-03 13:10:24,110:INFO:           evidently: Not installed
2022-12-03 13:10:24,110:INFO:                nltk: 3.7
2022-12-03 13:10:24,110:INFO:            pyLDAvis: Not installed
2022-12-03 13:10:24,110:INFO:              gensim: 4.1.2
2022-12-03 13:10:24,110:INFO:               spacy: Not installed
2022-12-03 13:10:24,110:INFO:           wordcloud: 1.8.2.2
2022-12-03 13:10:24,110:INFO:            textblob: Not installed
2022-12-03 13:10:24,110:INFO:               fugue: Not installed
2022-12-03 13:10:24,110:INFO:           streamlit: Not installed
2022-12-03 13:10:24,110:INFO:             prophet: Not installed
2022-12-03 13:10:24,110:INFO:None
2022-12-03 13:10:24,110:INFO:Set up data.
2022-12-03 13:10:24,157:INFO:Set up train/test split.
2022-12-03 13:10:24,220:INFO:Set up index.
2022-12-03 13:10:24,220:INFO:Set up folding strategy.
2022-12-03 13:10:24,220:INFO:Assigning column types.
2022-12-03 13:10:24,220:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2022-12-03 13:10:24,360:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-03 13:10:24,376:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2022-12-03 13:10:24,501:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:10:26,593:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:10:26,750:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-03 13:10:26,750:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2022-12-03 13:10:26,843:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:10:26,843:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:10:26,843:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2022-12-03 13:10:26,984:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2022-12-03 13:10:27,112:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:10:27,112:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:10:27,286:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2022-12-03 13:10:27,375:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:10:27,376:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:10:27,376:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2022-12-03 13:10:27,617:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:10:27,617:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:10:27,894:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:10:27,895:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:10:27,899:INFO:Preparing preprocessing pipeline...
2022-12-03 13:10:27,916:INFO:Set up simple imputation.
2022-12-03 13:10:28,000:INFO:Finished creating preprocessing pipeline.
2022-12-03 13:10:28,010:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\du\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Number of times pregnant',
                                             'Plasma glucose concentration a 2 '
                                             'hours in an oral glucose '
                                             'tolerance test',
                                             'Diastolic blood pressure (mm Hg)',
                                             'Triceps skin fold thickness (mm)',
                                             '2-Hour serum insulin (mu U/ml)',
                                             'Body mass index (weight in '
                                             'kg...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated')))],
         verbose=False)
2022-12-03 13:10:28,010:INFO:Creating final display dataframe.
2022-12-03 13:10:28,394:INFO:Setup display_container:                     Description             Value
0                    Session id              8116
1                        Target    Class variable
2                   Target type            Binary
3           Original data shape          (768, 9)
4        Transformed data shape          (768, 9)
5   Transformed train set shape          (537, 9)
6    Transformed test set shape          (231, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   StratifiedKFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  clf-default-name
18                          USI              3cc3
2022-12-03 13:10:28,681:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:10:28,682:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:10:28,959:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:10:28,959:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:10:28,974:INFO:setup() successfully completed in 4.94s...............
2022-12-03 13:11:13,068:INFO:Initializing compare_models()
2022-12-03 13:11:13,069:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2022-12-03 13:11:13,069:INFO:Checking exceptions
2022-12-03 13:11:13,075:INFO:Preparing display monitor
2022-12-03 13:11:13,237:INFO:Initializing Logistic Regression
2022-12-03 13:11:13,237:INFO:Total runtime is 0.0 minutes
2022-12-03 13:11:13,245:INFO:SubProcess create_model() called ==================================
2022-12-03 13:11:13,245:INFO:Initializing create_model()
2022-12-03 13:11:13,246:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB2B032FA0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:11:13,246:INFO:Checking exceptions
2022-12-03 13:11:13,246:INFO:Importing libraries
2022-12-03 13:11:13,246:INFO:Copying training dataset
2022-12-03 13:11:13,252:INFO:Defining folds
2022-12-03 13:11:13,252:INFO:Declaring metric variables
2022-12-03 13:11:13,269:INFO:Importing untrained model
2022-12-03 13:11:13,277:INFO:Logistic Regression Imported successfully
2022-12-03 13:11:13,293:INFO:Starting cross validation
2022-12-03 13:11:13,294:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:11:29,889:INFO:Calculating mean and std
2022-12-03 13:11:29,889:INFO:Creating metrics dataframe
2022-12-03 13:11:29,912:INFO:Uploading results into container
2022-12-03 13:11:29,913:INFO:Uploading model into container now
2022-12-03 13:11:29,914:INFO:master_model_container: 1
2022-12-03 13:11:29,914:INFO:display_container: 2
2022-12-03 13:11:29,915:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8116, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2022-12-03 13:11:29,916:INFO:create_model() successfully completed......................................
2022-12-03 13:11:30,031:INFO:SubProcess create_model() end ==================================
2022-12-03 13:11:30,031:INFO:Creating metrics dataframe
2022-12-03 13:11:30,046:INFO:Initializing K Neighbors Classifier
2022-12-03 13:11:30,046:INFO:Total runtime is 0.2801569581031799 minutes
2022-12-03 13:11:30,065:INFO:SubProcess create_model() called ==================================
2022-12-03 13:11:30,065:INFO:Initializing create_model()
2022-12-03 13:11:30,066:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB2B032FA0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:11:30,066:INFO:Checking exceptions
2022-12-03 13:11:30,066:INFO:Importing libraries
2022-12-03 13:11:30,066:INFO:Copying training dataset
2022-12-03 13:11:30,080:INFO:Defining folds
2022-12-03 13:11:30,080:INFO:Declaring metric variables
2022-12-03 13:11:30,092:INFO:Importing untrained model
2022-12-03 13:11:30,100:INFO:K Neighbors Classifier Imported successfully
2022-12-03 13:11:30,115:INFO:Starting cross validation
2022-12-03 13:11:30,117:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:11:30,668:INFO:Calculating mean and std
2022-12-03 13:11:30,672:INFO:Creating metrics dataframe
2022-12-03 13:11:30,679:INFO:Uploading results into container
2022-12-03 13:11:30,680:INFO:Uploading model into container now
2022-12-03 13:11:30,681:INFO:master_model_container: 2
2022-12-03 13:11:30,681:INFO:display_container: 2
2022-12-03 13:11:30,682:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2022-12-03 13:11:30,682:INFO:create_model() successfully completed......................................
2022-12-03 13:11:30,799:INFO:SubProcess create_model() end ==================================
2022-12-03 13:11:30,799:INFO:Creating metrics dataframe
2022-12-03 13:11:30,814:INFO:Initializing Naive Bayes
2022-12-03 13:11:30,814:INFO:Total runtime is 0.29295620918273924 minutes
2022-12-03 13:11:30,830:INFO:SubProcess create_model() called ==================================
2022-12-03 13:11:30,830:INFO:Initializing create_model()
2022-12-03 13:11:30,830:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB2B032FA0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:11:30,830:INFO:Checking exceptions
2022-12-03 13:11:30,830:INFO:Importing libraries
2022-12-03 13:11:30,830:INFO:Copying training dataset
2022-12-03 13:11:30,830:INFO:Defining folds
2022-12-03 13:11:30,830:INFO:Declaring metric variables
2022-12-03 13:11:30,845:INFO:Importing untrained model
2022-12-03 13:11:30,845:INFO:Naive Bayes Imported successfully
2022-12-03 13:11:30,874:INFO:Starting cross validation
2022-12-03 13:11:30,876:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:11:31,138:INFO:Calculating mean and std
2022-12-03 13:11:31,154:INFO:Creating metrics dataframe
2022-12-03 13:11:31,154:INFO:Uploading results into container
2022-12-03 13:11:31,154:INFO:Uploading model into container now
2022-12-03 13:11:31,154:INFO:master_model_container: 3
2022-12-03 13:11:31,154:INFO:display_container: 2
2022-12-03 13:11:31,154:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2022-12-03 13:11:31,154:INFO:create_model() successfully completed......................................
2022-12-03 13:11:31,282:INFO:SubProcess create_model() end ==================================
2022-12-03 13:11:31,282:INFO:Creating metrics dataframe
2022-12-03 13:11:31,298:INFO:Initializing Decision Tree Classifier
2022-12-03 13:11:31,298:INFO:Total runtime is 0.30101390679677326 minutes
2022-12-03 13:11:31,323:INFO:SubProcess create_model() called ==================================
2022-12-03 13:11:31,324:INFO:Initializing create_model()
2022-12-03 13:11:31,324:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB2B032FA0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:11:31,324:INFO:Checking exceptions
2022-12-03 13:11:31,324:INFO:Importing libraries
2022-12-03 13:11:31,324:INFO:Copying training dataset
2022-12-03 13:11:31,336:INFO:Defining folds
2022-12-03 13:11:31,336:INFO:Declaring metric variables
2022-12-03 13:11:31,343:INFO:Importing untrained model
2022-12-03 13:11:31,350:INFO:Decision Tree Classifier Imported successfully
2022-12-03 13:11:31,366:INFO:Starting cross validation
2022-12-03 13:11:31,368:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:11:31,653:INFO:Calculating mean and std
2022-12-03 13:11:31,653:INFO:Creating metrics dataframe
2022-12-03 13:11:31,665:INFO:Uploading results into container
2022-12-03 13:11:31,666:INFO:Uploading model into container now
2022-12-03 13:11:31,667:INFO:master_model_container: 4
2022-12-03 13:11:31,668:INFO:display_container: 2
2022-12-03 13:11:31,668:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=8116, splitter='best')
2022-12-03 13:11:31,669:INFO:create_model() successfully completed......................................
2022-12-03 13:11:31,782:INFO:SubProcess create_model() end ==================================
2022-12-03 13:11:31,782:INFO:Creating metrics dataframe
2022-12-03 13:11:31,814:INFO:Initializing SVM - Linear Kernel
2022-12-03 13:11:31,814:INFO:Total runtime is 0.30961327950159706 minutes
2022-12-03 13:11:31,829:INFO:SubProcess create_model() called ==================================
2022-12-03 13:11:31,829:INFO:Initializing create_model()
2022-12-03 13:11:31,829:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB2B032FA0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:11:31,829:INFO:Checking exceptions
2022-12-03 13:11:31,829:INFO:Importing libraries
2022-12-03 13:11:31,829:INFO:Copying training dataset
2022-12-03 13:11:31,829:INFO:Defining folds
2022-12-03 13:11:31,829:INFO:Declaring metric variables
2022-12-03 13:11:31,845:INFO:Importing untrained model
2022-12-03 13:11:31,859:INFO:SVM - Linear Kernel Imported successfully
2022-12-03 13:11:31,875:INFO:Starting cross validation
2022-12-03 13:11:31,876:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:11:32,013:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1334: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2022-12-03 13:11:32,091:INFO:Calculating mean and std
2022-12-03 13:11:32,091:INFO:Creating metrics dataframe
2022-12-03 13:11:32,103:INFO:Uploading results into container
2022-12-03 13:11:32,104:INFO:Uploading model into container now
2022-12-03 13:11:32,104:INFO:master_model_container: 5
2022-12-03 13:11:32,105:INFO:display_container: 2
2022-12-03 13:11:32,106:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=8116, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2022-12-03 13:11:32,106:INFO:create_model() successfully completed......................................
2022-12-03 13:11:32,218:INFO:SubProcess create_model() end ==================================
2022-12-03 13:11:32,218:INFO:Creating metrics dataframe
2022-12-03 13:11:32,234:INFO:Initializing Ridge Classifier
2022-12-03 13:11:32,234:INFO:Total runtime is 0.31661616166432693 minutes
2022-12-03 13:11:32,256:INFO:SubProcess create_model() called ==================================
2022-12-03 13:11:32,257:INFO:Initializing create_model()
2022-12-03 13:11:32,257:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB2B032FA0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:11:32,257:INFO:Checking exceptions
2022-12-03 13:11:32,257:INFO:Importing libraries
2022-12-03 13:11:32,257:INFO:Copying training dataset
2022-12-03 13:11:32,265:INFO:Defining folds
2022-12-03 13:11:32,265:INFO:Declaring metric variables
2022-12-03 13:11:32,288:INFO:Importing untrained model
2022-12-03 13:11:32,296:INFO:Ridge Classifier Imported successfully
2022-12-03 13:11:32,309:INFO:Starting cross validation
2022-12-03 13:11:32,311:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:11:33,697:INFO:Calculating mean and std
2022-12-03 13:11:33,701:INFO:Creating metrics dataframe
2022-12-03 13:11:33,709:INFO:Uploading results into container
2022-12-03 13:11:33,710:INFO:Uploading model into container now
2022-12-03 13:11:33,711:INFO:master_model_container: 6
2022-12-03 13:11:33,711:INFO:display_container: 2
2022-12-03 13:11:33,712:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, normalize='deprecated', positive=False,
                random_state=8116, solver='auto', tol=0.001)
2022-12-03 13:11:33,712:INFO:create_model() successfully completed......................................
2022-12-03 13:11:33,844:INFO:SubProcess create_model() end ==================================
2022-12-03 13:11:33,844:INFO:Creating metrics dataframe
2022-12-03 13:11:33,876:INFO:Initializing Random Forest Classifier
2022-12-03 13:11:33,876:INFO:Total runtime is 0.3439874132474263 minutes
2022-12-03 13:11:33,894:INFO:SubProcess create_model() called ==================================
2022-12-03 13:11:33,894:INFO:Initializing create_model()
2022-12-03 13:11:33,894:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB2B032FA0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:11:33,895:INFO:Checking exceptions
2022-12-03 13:11:33,895:INFO:Importing libraries
2022-12-03 13:11:33,895:INFO:Copying training dataset
2022-12-03 13:11:33,904:INFO:Defining folds
2022-12-03 13:11:33,905:INFO:Declaring metric variables
2022-12-03 13:11:33,913:INFO:Importing untrained model
2022-12-03 13:11:33,921:INFO:Random Forest Classifier Imported successfully
2022-12-03 13:11:33,956:INFO:Starting cross validation
2022-12-03 13:11:33,957:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:11:36,315:INFO:Calculating mean and std
2022-12-03 13:11:36,315:INFO:Creating metrics dataframe
2022-12-03 13:11:36,332:INFO:Uploading results into container
2022-12-03 13:11:36,333:INFO:Uploading model into container now
2022-12-03 13:11:36,334:INFO:master_model_container: 7
2022-12-03 13:11:36,334:INFO:display_container: 2
2022-12-03 13:11:36,335:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=8116, verbose=0, warm_start=False)
2022-12-03 13:11:36,336:INFO:create_model() successfully completed......................................
2022-12-03 13:11:36,493:INFO:SubProcess create_model() end ==================================
2022-12-03 13:11:36,493:INFO:Creating metrics dataframe
2022-12-03 13:11:36,521:INFO:Initializing Quadratic Discriminant Analysis
2022-12-03 13:11:36,522:INFO:Total runtime is 0.3880932172139485 minutes
2022-12-03 13:11:36,548:INFO:SubProcess create_model() called ==================================
2022-12-03 13:11:36,549:INFO:Initializing create_model()
2022-12-03 13:11:36,549:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB2B032FA0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:11:36,550:INFO:Checking exceptions
2022-12-03 13:11:36,550:INFO:Importing libraries
2022-12-03 13:11:36,550:INFO:Copying training dataset
2022-12-03 13:11:36,558:INFO:Defining folds
2022-12-03 13:11:36,559:INFO:Declaring metric variables
2022-12-03 13:11:36,566:INFO:Importing untrained model
2022-12-03 13:11:36,574:INFO:Quadratic Discriminant Analysis Imported successfully
2022-12-03 13:11:36,621:INFO:Starting cross validation
2022-12-03 13:11:36,623:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:11:37,267:INFO:Calculating mean and std
2022-12-03 13:11:37,271:INFO:Creating metrics dataframe
2022-12-03 13:11:37,279:INFO:Uploading results into container
2022-12-03 13:11:37,280:INFO:Uploading model into container now
2022-12-03 13:11:37,281:INFO:master_model_container: 8
2022-12-03 13:11:37,281:INFO:display_container: 2
2022-12-03 13:11:37,282:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2022-12-03 13:11:37,282:INFO:create_model() successfully completed......................................
2022-12-03 13:11:37,430:INFO:SubProcess create_model() end ==================================
2022-12-03 13:11:37,430:INFO:Creating metrics dataframe
2022-12-03 13:11:37,508:INFO:Initializing Ada Boost Classifier
2022-12-03 13:11:37,508:INFO:Total runtime is 0.4045116742451985 minutes
2022-12-03 13:11:37,515:INFO:SubProcess create_model() called ==================================
2022-12-03 13:11:37,516:INFO:Initializing create_model()
2022-12-03 13:11:37,516:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB2B032FA0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:11:37,517:INFO:Checking exceptions
2022-12-03 13:11:37,517:INFO:Importing libraries
2022-12-03 13:11:37,519:INFO:Copying training dataset
2022-12-03 13:11:37,525:INFO:Defining folds
2022-12-03 13:11:37,525:INFO:Declaring metric variables
2022-12-03 13:11:37,538:INFO:Importing untrained model
2022-12-03 13:11:37,545:INFO:Ada Boost Classifier Imported successfully
2022-12-03 13:11:37,580:INFO:Starting cross validation
2022-12-03 13:11:37,582:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:11:38,717:INFO:Calculating mean and std
2022-12-03 13:11:38,717:INFO:Creating metrics dataframe
2022-12-03 13:11:38,732:INFO:Uploading results into container
2022-12-03 13:11:38,733:INFO:Uploading model into container now
2022-12-03 13:11:38,734:INFO:master_model_container: 9
2022-12-03 13:11:38,735:INFO:display_container: 2
2022-12-03 13:11:38,735:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=8116)
2022-12-03 13:11:38,735:INFO:create_model() successfully completed......................................
2022-12-03 13:11:38,848:INFO:SubProcess create_model() end ==================================
2022-12-03 13:11:38,848:INFO:Creating metrics dataframe
2022-12-03 13:11:38,893:INFO:Initializing Gradient Boosting Classifier
2022-12-03 13:11:38,893:INFO:Total runtime is 0.42760485013326005 minutes
2022-12-03 13:11:38,901:INFO:SubProcess create_model() called ==================================
2022-12-03 13:11:38,904:INFO:Initializing create_model()
2022-12-03 13:11:38,904:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB2B032FA0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:11:38,905:INFO:Checking exceptions
2022-12-03 13:11:38,905:INFO:Importing libraries
2022-12-03 13:11:38,905:INFO:Copying training dataset
2022-12-03 13:11:38,929:INFO:Defining folds
2022-12-03 13:11:38,929:INFO:Declaring metric variables
2022-12-03 13:11:38,937:INFO:Importing untrained model
2022-12-03 13:11:38,945:INFO:Gradient Boosting Classifier Imported successfully
2022-12-03 13:11:38,960:INFO:Starting cross validation
2022-12-03 13:11:38,961:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:11:40,265:INFO:Calculating mean and std
2022-12-03 13:11:40,268:INFO:Creating metrics dataframe
2022-12-03 13:11:40,276:INFO:Uploading results into container
2022-12-03 13:11:40,277:INFO:Uploading model into container now
2022-12-03 13:11:40,278:INFO:master_model_container: 10
2022-12-03 13:11:40,279:INFO:display_container: 2
2022-12-03 13:11:40,280:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=8116, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2022-12-03 13:11:40,280:INFO:create_model() successfully completed......................................
2022-12-03 13:11:40,421:INFO:SubProcess create_model() end ==================================
2022-12-03 13:11:40,422:INFO:Creating metrics dataframe
2022-12-03 13:11:40,482:INFO:Initializing Linear Discriminant Analysis
2022-12-03 13:11:40,482:INFO:Total runtime is 0.4540847778320312 minutes
2022-12-03 13:11:40,490:INFO:SubProcess create_model() called ==================================
2022-12-03 13:11:40,491:INFO:Initializing create_model()
2022-12-03 13:11:40,497:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB2B032FA0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:11:40,497:INFO:Checking exceptions
2022-12-03 13:11:40,497:INFO:Importing libraries
2022-12-03 13:11:40,497:INFO:Copying training dataset
2022-12-03 13:11:40,512:INFO:Defining folds
2022-12-03 13:11:40,513:INFO:Declaring metric variables
2022-12-03 13:11:40,521:INFO:Importing untrained model
2022-12-03 13:11:40,528:INFO:Linear Discriminant Analysis Imported successfully
2022-12-03 13:11:40,548:INFO:Starting cross validation
2022-12-03 13:11:40,549:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:11:41,030:INFO:Calculating mean and std
2022-12-03 13:11:41,033:INFO:Creating metrics dataframe
2022-12-03 13:11:41,041:INFO:Uploading results into container
2022-12-03 13:11:41,042:INFO:Uploading model into container now
2022-12-03 13:11:41,043:INFO:master_model_container: 11
2022-12-03 13:11:41,044:INFO:display_container: 2
2022-12-03 13:11:41,044:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2022-12-03 13:11:41,044:INFO:create_model() successfully completed......................................
2022-12-03 13:11:41,173:INFO:SubProcess create_model() end ==================================
2022-12-03 13:11:41,173:INFO:Creating metrics dataframe
2022-12-03 13:11:41,205:INFO:Initializing Extra Trees Classifier
2022-12-03 13:11:41,205:INFO:Total runtime is 0.46614077488581335 minutes
2022-12-03 13:11:41,216:INFO:SubProcess create_model() called ==================================
2022-12-03 13:11:41,216:INFO:Initializing create_model()
2022-12-03 13:11:41,217:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB2B032FA0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:11:41,217:INFO:Checking exceptions
2022-12-03 13:11:41,217:INFO:Importing libraries
2022-12-03 13:11:41,217:INFO:Copying training dataset
2022-12-03 13:11:41,225:INFO:Defining folds
2022-12-03 13:11:41,226:INFO:Declaring metric variables
2022-12-03 13:11:41,235:INFO:Importing untrained model
2022-12-03 13:11:41,243:INFO:Extra Trees Classifier Imported successfully
2022-12-03 13:11:41,269:INFO:Starting cross validation
2022-12-03 13:11:41,271:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:11:43,826:INFO:Calculating mean and std
2022-12-03 13:11:43,826:INFO:Creating metrics dataframe
2022-12-03 13:11:43,839:INFO:Uploading results into container
2022-12-03 13:11:43,841:INFO:Uploading model into container now
2022-12-03 13:11:43,841:INFO:master_model_container: 12
2022-12-03 13:11:43,842:INFO:display_container: 2
2022-12-03 13:11:43,843:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=8116, verbose=0, warm_start=False)
2022-12-03 13:11:43,843:INFO:create_model() successfully completed......................................
2022-12-03 13:11:44,001:INFO:SubProcess create_model() end ==================================
2022-12-03 13:11:44,001:INFO:Creating metrics dataframe
2022-12-03 13:11:44,048:INFO:Initializing Light Gradient Boosting Machine
2022-12-03 13:11:44,048:INFO:Total runtime is 0.5135186433792114 minutes
2022-12-03 13:11:44,063:INFO:SubProcess create_model() called ==================================
2022-12-03 13:11:44,064:INFO:Initializing create_model()
2022-12-03 13:11:44,064:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB2B032FA0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:11:44,064:INFO:Checking exceptions
2022-12-03 13:11:44,065:INFO:Importing libraries
2022-12-03 13:11:44,065:INFO:Copying training dataset
2022-12-03 13:11:44,073:INFO:Defining folds
2022-12-03 13:11:44,073:INFO:Declaring metric variables
2022-12-03 13:11:44,082:INFO:Importing untrained model
2022-12-03 13:11:44,089:INFO:Light Gradient Boosting Machine Imported successfully
2022-12-03 13:11:44,109:INFO:Starting cross validation
2022-12-03 13:11:44,111:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:11:47,732:INFO:Calculating mean and std
2022-12-03 13:11:47,748:INFO:Creating metrics dataframe
2022-12-03 13:11:47,748:INFO:Uploading results into container
2022-12-03 13:11:47,748:INFO:Uploading model into container now
2022-12-03 13:11:47,748:INFO:master_model_container: 13
2022-12-03 13:11:47,748:INFO:display_container: 2
2022-12-03 13:11:47,748:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=8116, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2022-12-03 13:11:47,748:INFO:create_model() successfully completed......................................
2022-12-03 13:11:47,883:INFO:SubProcess create_model() end ==================================
2022-12-03 13:11:47,883:INFO:Creating metrics dataframe
2022-12-03 13:11:47,914:INFO:Initializing Dummy Classifier
2022-12-03 13:11:47,914:INFO:Total runtime is 0.5779564102490743 minutes
2022-12-03 13:11:47,928:INFO:SubProcess create_model() called ==================================
2022-12-03 13:11:47,929:INFO:Initializing create_model()
2022-12-03 13:11:47,929:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB2B032FA0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:11:47,929:INFO:Checking exceptions
2022-12-03 13:11:47,930:INFO:Importing libraries
2022-12-03 13:11:47,930:INFO:Copying training dataset
2022-12-03 13:11:47,937:INFO:Defining folds
2022-12-03 13:11:47,938:INFO:Declaring metric variables
2022-12-03 13:11:47,946:INFO:Importing untrained model
2022-12-03 13:11:47,963:INFO:Dummy Classifier Imported successfully
2022-12-03 13:11:47,978:INFO:Starting cross validation
2022-12-03 13:11:47,979:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:11:48,049:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1334: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2022-12-03 13:11:48,099:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1334: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2022-12-03 13:11:48,101:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1334: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2022-12-03 13:11:48,104:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1334: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2022-12-03 13:11:48,112:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1334: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2022-12-03 13:11:48,165:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1334: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2022-12-03 13:11:48,180:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1334: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2022-12-03 13:11:48,180:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1334: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2022-12-03 13:11:48,236:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1334: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2022-12-03 13:11:48,267:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1334: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2022-12-03 13:11:48,267:INFO:Calculating mean and std
2022-12-03 13:11:48,283:INFO:Creating metrics dataframe
2022-12-03 13:11:48,292:INFO:Uploading results into container
2022-12-03 13:11:48,293:INFO:Uploading model into container now
2022-12-03 13:11:48,293:INFO:master_model_container: 14
2022-12-03 13:11:48,294:INFO:display_container: 2
2022-12-03 13:11:48,294:INFO:DummyClassifier(constant=None, random_state=8116, strategy='prior')
2022-12-03 13:11:48,294:INFO:create_model() successfully completed......................................
2022-12-03 13:11:48,398:INFO:SubProcess create_model() end ==================================
2022-12-03 13:11:48,398:INFO:Creating metrics dataframe
2022-12-03 13:11:48,460:INFO:Initializing create_model()
2022-12-03 13:11:48,460:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8116, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:11:48,461:INFO:Checking exceptions
2022-12-03 13:11:48,489:INFO:Importing libraries
2022-12-03 13:11:48,490:INFO:Copying training dataset
2022-12-03 13:11:48,495:INFO:Defining folds
2022-12-03 13:11:48,495:INFO:Declaring metric variables
2022-12-03 13:11:48,496:INFO:Importing untrained model
2022-12-03 13:11:48,496:INFO:Declaring custom model
2022-12-03 13:11:48,497:INFO:Logistic Regression Imported successfully
2022-12-03 13:11:48,499:INFO:Cross validation set to False
2022-12-03 13:11:48,499:INFO:Fitting Model
2022-12-03 13:11:48,681:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8116, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2022-12-03 13:11:48,681:INFO:create_model() successfully completed......................................
2022-12-03 13:11:48,963:INFO:master_model_container: 14
2022-12-03 13:11:48,964:INFO:display_container: 2
2022-12-03 13:11:48,965:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8116, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2022-12-03 13:11:48,965:INFO:compare_models() successfully completed......................................
2022-12-03 13:11:58,530:INFO:Initializing evaluate_model()
2022-12-03 13:11:58,531:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8116, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None, use_train_data=False)
2022-12-03 13:11:58,746:INFO:Initializing plot_model()
2022-12-03 13:11:58,747:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8116, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, system=True)
2022-12-03 13:11:58,747:INFO:Checking exceptions
2022-12-03 13:11:58,755:INFO:Preloading libraries
2022-12-03 13:11:58,756:INFO:Copying training dataset
2022-12-03 13:11:58,756:INFO:Plot type: pipeline
2022-12-03 13:11:59,464:INFO:Visual Rendered Successfully
2022-12-03 13:11:59,573:INFO:plot_model() successfully completed......................................
2022-12-03 13:12:23,831:INFO:Initializing plot_model()
2022-12-03 13:12:23,832:INFO:plot_model(plot=auc, fold=None, use_train_data=False, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8116, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, system=True)
2022-12-03 13:12:23,832:INFO:Checking exceptions
2022-12-03 13:12:23,841:INFO:Preloading libraries
2022-12-03 13:12:23,842:INFO:Copying training dataset
2022-12-03 13:12:23,842:INFO:Plot type: auc
2022-12-03 13:12:23,918:INFO:Fitting Model
2022-12-03 13:12:23,919:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\base.py:450: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2022-12-03 13:12:23,920:INFO:Scoring test/hold-out set
2022-12-03 13:12:24,394:INFO:Visual Rendered Successfully
2022-12-03 13:12:24,530:INFO:plot_model() successfully completed......................................
2022-12-03 13:12:41,170:INFO:Initializing plot_model()
2022-12-03 13:12:41,170:INFO:plot_model(plot=confusion_matrix, fold=None, use_train_data=False, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8116, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, system=True)
2022-12-03 13:12:41,170:INFO:Checking exceptions
2022-12-03 13:12:41,180:INFO:Preloading libraries
2022-12-03 13:12:41,180:INFO:Copying training dataset
2022-12-03 13:12:41,180:INFO:Plot type: confusion_matrix
2022-12-03 13:12:41,290:INFO:Fitting Model
2022-12-03 13:12:41,291:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\base.py:450: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names
  warnings.warn(

2022-12-03 13:12:41,291:INFO:Scoring test/hold-out set
2022-12-03 13:12:41,550:INFO:Visual Rendered Successfully
2022-12-03 13:12:41,664:INFO:plot_model() successfully completed......................................
2022-12-03 13:12:47,263:INFO:Initializing predict_model()
2022-12-03 13:12:47,263:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8116, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, drift_report=False, round=4, verbose=True, ml_usecase=None, preprocess=True, replace_labels_in_column=<function _SupervisedExperiment.predict_model.<locals>.replace_labels_in_column at 0x000001FB2D4DBEE0>)
2022-12-03 13:12:47,263:INFO:Checking exceptions
2022-12-03 13:12:47,263:INFO:Preloading libraries
2022-12-03 13:13:14,130:INFO:Initializing predict_model()
2022-12-03 13:13:14,130:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FB2AFE0E20>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8116, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, drift_report=False, round=4, verbose=True, ml_usecase=None, preprocess=True, replace_labels_in_column=<function _SupervisedExperiment.predict_model.<locals>.replace_labels_in_column at 0x000001FB2D4E60D0>)
2022-12-03 13:13:14,130:INFO:Checking exceptions
2022-12-03 13:13:14,130:INFO:Preloading libraries
2022-12-03 13:13:14,134:INFO:Set up data.
2022-12-03 13:13:14,142:INFO:Set up index.
2022-12-03 13:13:27,793:INFO:Initializing save_model()
2022-12-03 13:13:27,794:INFO:save_model(model=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8116, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), model_name=my_best_pipeline, prep_pipe_=Pipeline(memory=Memory(location=C:\Users\du\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Number of times pregnant',
                                             'Plasma glucose concentration a 2 '
                                             'hours in an oral glucose '
                                             'tolerance test',
                                             'Diastolic blood pressure (mm Hg)',
                                             'Triceps skin fold thickness (mm)',
                                             '2-Hour serum insulin (mu U/ml)',
                                             'Body mass index (weight in '
                                             'kg...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2022-12-03 13:13:27,794:INFO:Adding model into prep_pipe
2022-12-03 13:13:27,844:INFO:my_best_pipeline.pkl saved in current working directory
2022-12-03 13:13:27,854:INFO:Pipeline(memory=Memory(location=C:\Users\du\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Number of times pregnant',
                                             'Plasma glucose concentration a 2 '
                                             'hours in an oral glucose '
                                             'tolerance test',
                                             'Diastolic blood pressure (mm Hg)',
                                             'Triceps skin fold thickness (mm)',
                                             '2-Hour serum insulin (mu U/ml)',
                                             'Body mass index (weight in '
                                             'kg...
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('trained_model',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=8116,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2022-12-03 13:13:27,855:INFO:save_model() successfully completed......................................
2022-12-03 13:14:07,753:INFO:Initializing load_model()
2022-12-03 13:14:07,754:INFO:load_model(model_name=my_best_pipeline, platform=None, authentication=None, verbose=True)
2022-12-03 13:16:25,107:INFO:PyCaret RegressionExperiment
2022-12-03 13:16:25,107:INFO:Logging name: reg-default-name
2022-12-03 13:16:25,108:INFO:ML Usecase: MLUsecase.REGRESSION
2022-12-03 13:16:25,108:INFO:version 3.0.0.rc4
2022-12-03 13:16:25,108:INFO:Initializing setup()
2022-12-03 13:16:25,108:INFO:self.USI: a75f
2022-12-03 13:16:25,108:INFO:self.variable_keys: {'exp_id', 'target_param', 'fold_groups_param', 'logging_param', 'transform_target_param', '_all_metrics', 'log_plots_param', 'seed', 'transform_target_method_param', 'n_jobs_param', 'y_train', 'html_param', '_gpu_n_jobs_param', 'master_model_container', 'idx', 'fold_generator', 'memory', '_all_models_internal', 'exp_name_log', 'X_test', 'USI', 'pipeline', 'y_test', 'data', 'display_container', 'gpu_param', 'X_train', 'variable_keys', '_available_plots', 'X', '_ml_usecase', '_all_models', 'y', 'fold_shuffle_param'}
2022-12-03 13:16:25,108:INFO:Checking environment
2022-12-03 13:16:25,108:INFO:python_version: 3.9.13
2022-12-03 13:16:25,108:INFO:python_build: ('main', 'Aug 25 2022 23:51:50')
2022-12-03 13:16:25,109:INFO:machine: AMD64
2022-12-03 13:16:25,109:INFO:platform: Windows-10-10.0.19044-SP0
2022-12-03 13:16:25,109:INFO:Memory: svmem(total=17043402752, available=8135503872, percent=52.3, used=8907898880, free=8135503872)
2022-12-03 13:16:25,109:INFO:Physical Core: 2
2022-12-03 13:16:25,109:INFO:Logical Core: 4
2022-12-03 13:16:25,109:INFO:Checking libraries
2022-12-03 13:16:25,109:INFO:System:
2022-12-03 13:16:25,109:INFO:    python: 3.9.13 (main, Aug 25 2022, 23:51:50) [MSC v.1916 64 bit (AMD64)]
2022-12-03 13:16:25,110:INFO:executable: C:\ProgramData\Anaconda3\python.exe
2022-12-03 13:16:25,110:INFO:   machine: Windows-10-10.0.19044-SP0
2022-12-03 13:16:25,110:INFO:PyCaret required dependencies:
2022-12-03 13:16:25,110:INFO:                 pip: 22.2.2
2022-12-03 13:16:25,110:INFO:          setuptools: 63.4.1
2022-12-03 13:16:25,110:INFO:             pycaret: 3.0.0rc4
2022-12-03 13:16:25,110:INFO:             IPython: 7.31.1
2022-12-03 13:16:25,111:INFO:          ipywidgets: 7.6.5
2022-12-03 13:16:25,111:INFO:                tqdm: 4.64.1
2022-12-03 13:16:25,111:INFO:               numpy: 1.21.5
2022-12-03 13:16:25,111:INFO:              pandas: 1.4.4
2022-12-03 13:16:25,111:INFO:              jinja2: 2.11.3
2022-12-03 13:16:25,111:INFO:               scipy: 1.9.1
2022-12-03 13:16:25,111:INFO:              joblib: 1.2.0
2022-12-03 13:16:25,111:INFO:             sklearn: 1.1.3
2022-12-03 13:16:25,111:INFO:                pyod: 1.0.6
2022-12-03 13:16:25,111:INFO:            imblearn: 0.9.1
2022-12-03 13:16:25,112:INFO:   category_encoders: 2.5.1.post0
2022-12-03 13:16:25,112:INFO:            lightgbm: 3.3.3
2022-12-03 13:16:25,112:INFO:               numba: 0.55.1
2022-12-03 13:16:25,112:INFO:            requests: 2.28.1
2022-12-03 13:16:25,112:INFO:          matplotlib: 3.5.2
2022-12-03 13:16:25,112:INFO:          scikitplot: 0.3.7
2022-12-03 13:16:25,112:INFO:         yellowbrick: 1.5
2022-12-03 13:16:25,112:INFO:              plotly: 5.9.0
2022-12-03 13:16:25,112:INFO:             kaleido: 0.2.1
2022-12-03 13:16:25,112:INFO:         statsmodels: 0.13.2
2022-12-03 13:16:25,113:INFO:              sktime: 0.14.1
2022-12-03 13:16:25,113:INFO:               tbats: 1.1.1
2022-12-03 13:16:25,113:INFO:            pmdarima: 1.8.4
2022-12-03 13:16:25,113:INFO:              psutil: 5.9.0
2022-12-03 13:16:25,113:INFO:PyCaret optional dependencies:
2022-12-03 13:16:25,113:INFO:                shap: Not installed
2022-12-03 13:16:25,113:INFO:           interpret: Not installed
2022-12-03 13:16:25,114:INFO:                umap: Not installed
2022-12-03 13:16:25,114:INFO:    pandas_profiling: Not installed
2022-12-03 13:16:25,114:INFO:  explainerdashboard: Not installed
2022-12-03 13:16:25,114:INFO:             autoviz: Not installed
2022-12-03 13:16:25,114:INFO:           fairlearn: Not installed
2022-12-03 13:16:25,114:INFO:             xgboost: Not installed
2022-12-03 13:16:25,114:INFO:            catboost: Not installed
2022-12-03 13:16:25,114:INFO:              kmodes: Not installed
2022-12-03 13:16:25,114:INFO:             mlxtend: 0.21.0
2022-12-03 13:16:25,114:INFO:       statsforecast: Not installed
2022-12-03 13:16:25,115:INFO:        tune_sklearn: Not installed
2022-12-03 13:16:25,115:INFO:                 ray: Not installed
2022-12-03 13:16:25,115:INFO:            hyperopt: Not installed
2022-12-03 13:16:25,115:INFO:              optuna: Not installed
2022-12-03 13:16:25,115:INFO:               skopt: Not installed
2022-12-03 13:16:25,115:INFO:              mlflow: Not installed
2022-12-03 13:16:25,115:INFO:              gradio: Not installed
2022-12-03 13:16:25,115:INFO:             fastapi: Not installed
2022-12-03 13:16:25,115:INFO:             uvicorn: Not installed
2022-12-03 13:16:25,116:INFO:              m2cgen: Not installed
2022-12-03 13:16:25,116:INFO:           evidently: Not installed
2022-12-03 13:16:25,116:INFO:                nltk: 3.7
2022-12-03 13:16:25,116:INFO:            pyLDAvis: Not installed
2022-12-03 13:16:25,116:INFO:              gensim: 4.1.2
2022-12-03 13:16:25,116:INFO:               spacy: Not installed
2022-12-03 13:16:25,116:INFO:           wordcloud: 1.8.2.2
2022-12-03 13:16:25,116:INFO:            textblob: Not installed
2022-12-03 13:16:25,116:INFO:               fugue: Not installed
2022-12-03 13:16:25,116:INFO:           streamlit: Not installed
2022-12-03 13:16:25,117:INFO:             prophet: Not installed
2022-12-03 13:16:25,117:INFO:None
2022-12-03 13:16:25,117:INFO:Set up data.
2022-12-03 13:16:25,129:INFO:Set up train/test split.
2022-12-03 13:16:25,138:INFO:Set up index.
2022-12-03 13:16:25,139:INFO:Set up folding strategy.
2022-12-03 13:16:25,139:INFO:Assigning column types.
2022-12-03 13:16:25,146:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2022-12-03 13:16:25,147:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2022-12-03 13:16:25,175:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2022-12-03 13:16:25,189:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2022-12-03 13:16:25,394:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-03 13:16:25,556:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-03 13:16:25,559:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:25,560:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:25,561:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2022-12-03 13:16:25,563:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2022-12-03 13:16:25,578:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2022-12-03 13:16:25,760:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-03 13:16:25,916:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-03 13:16:25,916:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:25,916:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:25,916:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2022-12-03 13:16:25,932:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2022-12-03 13:16:25,947:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2022-12-03 13:16:26,130:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-03 13:16:26,279:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-03 13:16:26,294:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:26,294:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:26,310:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2022-12-03 13:16:26,310:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2022-12-03 13:16:26,498:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-03 13:16:26,654:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-03 13:16:26,654:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:26,654:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:26,654:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2022-12-03 13:16:26,685:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2022-12-03 13:16:26,915:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-03 13:16:27,079:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-03 13:16:27,081:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:27,081:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:27,111:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2022-12-03 13:16:27,330:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-03 13:16:27,499:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-03 13:16:27,501:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:27,502:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:27,502:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2022-12-03 13:16:27,731:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-03 13:16:27,862:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-03 13:16:27,862:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:27,862:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:28,080:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-03 13:16:28,221:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-03 13:16:28,221:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:28,221:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:28,221:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2022-12-03 13:16:28,456:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-03 13:16:28,597:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:28,597:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:28,800:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-03 13:16:28,975:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:28,975:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:28,975:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2022-12-03 13:16:29,325:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:29,325:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:29,694:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:29,694:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:29,694:INFO:Preparing preprocessing pipeline...
2022-12-03 13:16:29,694:INFO:Set up simple imputation.
2022-12-03 13:16:29,709:INFO:Set up encoding of ordinal features.
2022-12-03 13:16:29,709:INFO:Set up encoding of categorical features.
2022-12-03 13:16:30,040:INFO:Finished creating preprocessing pipeline.
2022-12-03 13:16:30,071:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\du\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None,...
                                                                         'mapping': {nan: -1,
                                                                                     'female': 0,
                                                                                     'male': 1}},
                                                                        {'col': 'smoker',
                                                                         'mapping': {nan: -1,
                                                                                     'no': 0,
                                                                                     'yes': 1}}],
                                                               return_df=True,
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2022-12-03 13:16:30,071:INFO:Creating final display dataframe.
2022-12-03 13:16:31,490:INFO:Setup display_container:                  Description             Value
0                 Session id              4385
1                     Target           charges
2                Target type        Regression
3                 Data shape        (1338, 10)
4           Train data shape         (936, 10)
5            Test data shape         (402, 10)
6           Ordinal features                 2
7           Numeric features                 3
8       Categorical features                 3
9                 Preprocess              True
10           Imputation type            simple
11        Numeric imputation              mean
12    Categorical imputation              mode
13  Maximum one-hot encoding                25
14           Encoding method              None
15            Fold Generator             KFold
16               Fold Number                10
17                  CPU Jobs                -1
18                   Use GPU             False
19            Log Experiment             False
20           Experiment Name  reg-default-name
21                       USI              a75f
2022-12-03 13:16:31,867:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:31,867:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:32,253:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:32,254:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:16:32,262:INFO:setup() successfully completed in 7.18s...............
2022-12-03 13:17:18,679:INFO:Initializing compare_models()
2022-12-03 13:17:18,679:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2022-12-03 13:17:18,679:INFO:Checking exceptions
2022-12-03 13:17:18,683:INFO:Preparing display monitor
2022-12-03 13:17:18,782:INFO:Initializing Linear Regression
2022-12-03 13:17:18,782:INFO:Total runtime is 0.0 minutes
2022-12-03 13:17:18,788:INFO:SubProcess create_model() called ==================================
2022-12-03 13:17:18,788:INFO:Initializing create_model()
2022-12-03 13:17:18,789:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB301BB4F0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:17:18,789:INFO:Checking exceptions
2022-12-03 13:17:18,789:INFO:Importing libraries
2022-12-03 13:17:18,789:INFO:Copying training dataset
2022-12-03 13:17:18,794:INFO:Defining folds
2022-12-03 13:17:18,794:INFO:Declaring metric variables
2022-12-03 13:17:18,800:INFO:Importing untrained model
2022-12-03 13:17:18,835:INFO:Linear Regression Imported successfully
2022-12-03 13:17:18,850:INFO:Starting cross validation
2022-12-03 13:17:18,858:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:17:38,710:INFO:Calculating mean and std
2022-12-03 13:17:38,714:INFO:Creating metrics dataframe
2022-12-03 13:17:38,722:INFO:Uploading results into container
2022-12-03 13:17:38,723:INFO:Uploading model into container now
2022-12-03 13:17:38,724:INFO:master_model_container: 1
2022-12-03 13:17:38,724:INFO:display_container: 2
2022-12-03 13:17:38,725:INFO:LinearRegression(copy_X=True, fit_intercept=True, n_jobs=-1,
                 normalize='deprecated', positive=False)
2022-12-03 13:17:38,725:INFO:create_model() successfully completed......................................
2022-12-03 13:17:38,861:INFO:SubProcess create_model() end ==================================
2022-12-03 13:17:38,861:INFO:Creating metrics dataframe
2022-12-03 13:17:38,883:INFO:Initializing Lasso Regression
2022-12-03 13:17:38,883:INFO:Total runtime is 0.3350199023882548 minutes
2022-12-03 13:17:38,895:INFO:SubProcess create_model() called ==================================
2022-12-03 13:17:38,896:INFO:Initializing create_model()
2022-12-03 13:17:38,896:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB301BB4F0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:17:38,896:INFO:Checking exceptions
2022-12-03 13:17:38,896:INFO:Importing libraries
2022-12-03 13:17:38,897:INFO:Copying training dataset
2022-12-03 13:17:38,904:INFO:Defining folds
2022-12-03 13:17:38,904:INFO:Declaring metric variables
2022-12-03 13:17:38,912:INFO:Importing untrained model
2022-12-03 13:17:38,919:INFO:Lasso Regression Imported successfully
2022-12-03 13:17:38,941:INFO:Starting cross validation
2022-12-03 13:17:38,944:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:17:40,568:INFO:Calculating mean and std
2022-12-03 13:17:40,572:INFO:Creating metrics dataframe
2022-12-03 13:17:40,579:INFO:Uploading results into container
2022-12-03 13:17:40,580:INFO:Uploading model into container now
2022-12-03 13:17:40,582:INFO:master_model_container: 2
2022-12-03 13:17:40,582:INFO:display_container: 2
2022-12-03 13:17:40,583:INFO:Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,
      normalize='deprecated', positive=False, precompute=False,
      random_state=4385, selection='cyclic', tol=0.0001, warm_start=False)
2022-12-03 13:17:40,583:INFO:create_model() successfully completed......................................
2022-12-03 13:17:40,713:INFO:SubProcess create_model() end ==================================
2022-12-03 13:17:40,713:INFO:Creating metrics dataframe
2022-12-03 13:17:40,741:INFO:Initializing Ridge Regression
2022-12-03 13:17:40,741:INFO:Total runtime is 0.36598960161209104 minutes
2022-12-03 13:17:40,749:INFO:SubProcess create_model() called ==================================
2022-12-03 13:17:40,750:INFO:Initializing create_model()
2022-12-03 13:17:40,750:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB301BB4F0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:17:40,750:INFO:Checking exceptions
2022-12-03 13:17:40,750:INFO:Importing libraries
2022-12-03 13:17:40,751:INFO:Copying training dataset
2022-12-03 13:17:40,785:INFO:Defining folds
2022-12-03 13:17:40,785:INFO:Declaring metric variables
2022-12-03 13:17:40,793:INFO:Importing untrained model
2022-12-03 13:17:40,801:INFO:Ridge Regression Imported successfully
2022-12-03 13:17:40,840:INFO:Starting cross validation
2022-12-03 13:17:40,843:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:17:41,452:INFO:Calculating mean and std
2022-12-03 13:17:41,455:INFO:Creating metrics dataframe
2022-12-03 13:17:41,462:INFO:Uploading results into container
2022-12-03 13:17:41,463:INFO:Uploading model into container now
2022-12-03 13:17:41,464:INFO:master_model_container: 3
2022-12-03 13:17:41,464:INFO:display_container: 2
2022-12-03 13:17:41,465:INFO:Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,
      normalize='deprecated', positive=False, random_state=4385, solver='auto',
      tol=0.001)
2022-12-03 13:17:41,465:INFO:create_model() successfully completed......................................
2022-12-03 13:17:41,611:INFO:SubProcess create_model() end ==================================
2022-12-03 13:17:41,611:INFO:Creating metrics dataframe
2022-12-03 13:17:41,633:INFO:Initializing Elastic Net
2022-12-03 13:17:41,633:INFO:Total runtime is 0.3808664600054423 minutes
2022-12-03 13:17:41,640:INFO:SubProcess create_model() called ==================================
2022-12-03 13:17:41,641:INFO:Initializing create_model()
2022-12-03 13:17:41,641:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB301BB4F0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:17:41,641:INFO:Checking exceptions
2022-12-03 13:17:41,641:INFO:Importing libraries
2022-12-03 13:17:41,641:INFO:Copying training dataset
2022-12-03 13:17:41,652:INFO:Defining folds
2022-12-03 13:17:41,652:INFO:Declaring metric variables
2022-12-03 13:17:41,661:INFO:Importing untrained model
2022-12-03 13:17:41,669:INFO:Elastic Net Imported successfully
2022-12-03 13:17:41,699:INFO:Starting cross validation
2022-12-03 13:17:41,702:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:17:42,454:INFO:Calculating mean and std
2022-12-03 13:17:42,454:INFO:Creating metrics dataframe
2022-12-03 13:17:42,470:INFO:Uploading results into container
2022-12-03 13:17:42,470:INFO:Uploading model into container now
2022-12-03 13:17:42,470:INFO:master_model_container: 4
2022-12-03 13:17:42,470:INFO:display_container: 2
2022-12-03 13:17:42,475:INFO:ElasticNet(alpha=1.0, copy_X=True, fit_intercept=True, l1_ratio=0.5,
           max_iter=1000, normalize='deprecated', positive=False,
           precompute=False, random_state=4385, selection='cyclic', tol=0.0001,
           warm_start=False)
2022-12-03 13:17:42,475:INFO:create_model() successfully completed......................................
2022-12-03 13:17:42,613:INFO:SubProcess create_model() end ==================================
2022-12-03 13:17:42,613:INFO:Creating metrics dataframe
2022-12-03 13:17:42,639:INFO:Initializing Least Angle Regression
2022-12-03 13:17:42,639:INFO:Total runtime is 0.39762326478958127 minutes
2022-12-03 13:17:42,646:INFO:SubProcess create_model() called ==================================
2022-12-03 13:17:42,647:INFO:Initializing create_model()
2022-12-03 13:17:42,647:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB301BB4F0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:17:42,647:INFO:Checking exceptions
2022-12-03 13:17:42,648:INFO:Importing libraries
2022-12-03 13:17:42,648:INFO:Copying training dataset
2022-12-03 13:17:42,670:INFO:Defining folds
2022-12-03 13:17:42,670:INFO:Declaring metric variables
2022-12-03 13:17:42,678:INFO:Importing untrained model
2022-12-03 13:17:42,684:INFO:Least Angle Regression Imported successfully
2022-12-03 13:17:42,699:INFO:Starting cross validation
2022-12-03 13:17:42,717:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:17:42,852:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:42,883:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:42,888:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:42,900:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:42,963:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 9 iterations, i.e. alpha=1.340e+00, with an active set of 8 regressors, and the smallest cholesky pivot element being 3.650e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2022-12-03 13:17:42,995:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 9 iterations, i.e. alpha=1.681e+00, with an active set of 8 regressors, and the smallest cholesky pivot element being 2.581e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2022-12-03 13:17:43,168:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:43,189:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:43,194:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 9 iterations, i.e. alpha=3.280e+00, with an active set of 8 regressors, and the smallest cholesky pivot element being 4.829e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2022-12-03 13:17:43,226:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:43,226:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:43,382:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:43,398:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:43,398:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_least_angle.py:649: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 9 iterations, i.e. alpha=7.587e-01, with an active set of 8 regressors, and the smallest cholesky pivot element being 5.373e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2022-12-03 13:17:43,444:INFO:Calculating mean and std
2022-12-03 13:17:43,444:INFO:Creating metrics dataframe
2022-12-03 13:17:43,460:INFO:Uploading results into container
2022-12-03 13:17:43,460:INFO:Uploading model into container now
2022-12-03 13:17:43,460:INFO:master_model_container: 5
2022-12-03 13:17:43,460:INFO:display_container: 2
2022-12-03 13:17:43,460:INFO:Lars(copy_X=True, eps=2.220446049250313e-16, fit_intercept=True, fit_path=True,
     jitter=None, n_nonzero_coefs=500, normalize='deprecated',
     precompute='auto', random_state=4385, verbose=False)
2022-12-03 13:17:43,460:INFO:create_model() successfully completed......................................
2022-12-03 13:17:43,591:INFO:SubProcess create_model() end ==================================
2022-12-03 13:17:43,591:INFO:Creating metrics dataframe
2022-12-03 13:17:43,619:INFO:Initializing Lasso Least Angle Regression
2022-12-03 13:17:43,619:INFO:Total runtime is 0.41395678122838336 minutes
2022-12-03 13:17:43,625:INFO:SubProcess create_model() called ==================================
2022-12-03 13:17:43,625:INFO:Initializing create_model()
2022-12-03 13:17:43,626:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB301BB4F0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:17:43,626:INFO:Checking exceptions
2022-12-03 13:17:43,626:INFO:Importing libraries
2022-12-03 13:17:43,627:INFO:Copying training dataset
2022-12-03 13:17:43,635:INFO:Defining folds
2022-12-03 13:17:43,635:INFO:Declaring metric variables
2022-12-03 13:17:43,642:INFO:Importing untrained model
2022-12-03 13:17:43,650:INFO:Lasso Least Angle Regression Imported successfully
2022-12-03 13:17:43,666:INFO:Starting cross validation
2022-12-03 13:17:43,668:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:17:43,777:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 13:17:43,777:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 13:17:43,808:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 13:17:43,855:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 13:17:43,958:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 13:17:44,051:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 13:17:44,076:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 13:17:44,088:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 13:17:44,234:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 13:17:44,287:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 13:17:44,361:INFO:Calculating mean and std
2022-12-03 13:17:44,364:INFO:Creating metrics dataframe
2022-12-03 13:17:44,372:INFO:Uploading results into container
2022-12-03 13:17:44,373:INFO:Uploading model into container now
2022-12-03 13:17:44,374:INFO:master_model_container: 6
2022-12-03 13:17:44,374:INFO:display_container: 2
2022-12-03 13:17:44,374:INFO:LassoLars(alpha=1.0, copy_X=True, eps=2.220446049250313e-16, fit_intercept=True,
          fit_path=True, jitter=None, max_iter=500, normalize='deprecated',
          positive=False, precompute='auto', random_state=4385, verbose=False)
2022-12-03 13:17:44,375:INFO:create_model() successfully completed......................................
2022-12-03 13:17:44,503:INFO:SubProcess create_model() end ==================================
2022-12-03 13:17:44,503:INFO:Creating metrics dataframe
2022-12-03 13:17:44,527:INFO:Initializing Orthogonal Matching Pursuit
2022-12-03 13:17:44,527:INFO:Total runtime is 0.42909048398335775 minutes
2022-12-03 13:17:44,534:INFO:SubProcess create_model() called ==================================
2022-12-03 13:17:44,535:INFO:Initializing create_model()
2022-12-03 13:17:44,535:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB301BB4F0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:17:44,535:INFO:Checking exceptions
2022-12-03 13:17:44,536:INFO:Importing libraries
2022-12-03 13:17:44,536:INFO:Copying training dataset
2022-12-03 13:17:44,565:INFO:Defining folds
2022-12-03 13:17:44,566:INFO:Declaring metric variables
2022-12-03 13:17:44,572:INFO:Importing untrained model
2022-12-03 13:17:44,580:INFO:Orthogonal Matching Pursuit Imported successfully
2022-12-03 13:17:44,608:INFO:Starting cross validation
2022-12-03 13:17:44,611:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:17:44,730:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:44,740:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:44,778:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:44,810:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:44,958:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:44,996:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:45,010:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:45,018:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:45,124:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:45,171:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 13:17:45,224:INFO:Calculating mean and std
2022-12-03 13:17:45,228:INFO:Creating metrics dataframe
2022-12-03 13:17:45,234:INFO:Uploading results into container
2022-12-03 13:17:45,235:INFO:Uploading model into container now
2022-12-03 13:17:45,236:INFO:master_model_container: 7
2022-12-03 13:17:45,236:INFO:display_container: 2
2022-12-03 13:17:45,237:INFO:OrthogonalMatchingPursuit(fit_intercept=True, n_nonzero_coefs=None,
                          normalize='deprecated', precompute='auto', tol=None)
2022-12-03 13:17:45,237:INFO:create_model() successfully completed......................................
2022-12-03 13:17:45,356:INFO:SubProcess create_model() end ==================================
2022-12-03 13:17:45,356:INFO:Creating metrics dataframe
2022-12-03 13:17:45,378:INFO:Initializing Bayesian Ridge
2022-12-03 13:17:45,378:INFO:Total runtime is 0.44326898256937664 minutes
2022-12-03 13:17:45,387:INFO:SubProcess create_model() called ==================================
2022-12-03 13:17:45,388:INFO:Initializing create_model()
2022-12-03 13:17:45,388:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB301BB4F0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:17:45,389:INFO:Checking exceptions
2022-12-03 13:17:45,389:INFO:Importing libraries
2022-12-03 13:17:45,389:INFO:Copying training dataset
2022-12-03 13:17:45,409:INFO:Defining folds
2022-12-03 13:17:45,409:INFO:Declaring metric variables
2022-12-03 13:17:45,417:INFO:Importing untrained model
2022-12-03 13:17:45,425:INFO:Bayesian Ridge Imported successfully
2022-12-03 13:17:45,495:INFO:Starting cross validation
2022-12-03 13:17:45,497:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:17:46,250:INFO:Calculating mean and std
2022-12-03 13:17:46,254:INFO:Creating metrics dataframe
2022-12-03 13:17:46,260:INFO:Uploading results into container
2022-12-03 13:17:46,262:INFO:Uploading model into container now
2022-12-03 13:17:46,263:INFO:master_model_container: 8
2022-12-03 13:17:46,263:INFO:display_container: 2
2022-12-03 13:17:46,264:INFO:BayesianRidge(alpha_1=1e-06, alpha_2=1e-06, alpha_init=None,
              compute_score=False, copy_X=True, fit_intercept=True,
              lambda_1=1e-06, lambda_2=1e-06, lambda_init=None, n_iter=300,
              normalize='deprecated', tol=0.001, verbose=False)
2022-12-03 13:17:46,264:INFO:create_model() successfully completed......................................
2022-12-03 13:17:46,390:INFO:SubProcess create_model() end ==================================
2022-12-03 13:17:46,390:INFO:Creating metrics dataframe
2022-12-03 13:17:46,418:INFO:Initializing Passive Aggressive Regressor
2022-12-03 13:17:46,419:INFO:Total runtime is 0.4606328765551249 minutes
2022-12-03 13:17:46,426:INFO:SubProcess create_model() called ==================================
2022-12-03 13:17:46,426:INFO:Initializing create_model()
2022-12-03 13:17:46,448:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB301BB4F0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:17:46,448:INFO:Checking exceptions
2022-12-03 13:17:46,449:INFO:Importing libraries
2022-12-03 13:17:46,449:INFO:Copying training dataset
2022-12-03 13:17:46,457:INFO:Defining folds
2022-12-03 13:17:46,458:INFO:Declaring metric variables
2022-12-03 13:17:46,464:INFO:Importing untrained model
2022-12-03 13:17:46,472:INFO:Passive Aggressive Regressor Imported successfully
2022-12-03 13:17:46,492:INFO:Starting cross validation
2022-12-03 13:17:46,496:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:17:47,225:INFO:Calculating mean and std
2022-12-03 13:17:47,225:INFO:Creating metrics dataframe
2022-12-03 13:17:47,241:INFO:Uploading results into container
2022-12-03 13:17:47,241:INFO:Uploading model into container now
2022-12-03 13:17:47,241:INFO:master_model_container: 9
2022-12-03 13:17:47,241:INFO:display_container: 2
2022-12-03 13:17:47,241:INFO:PassiveAggressiveRegressor(C=1.0, average=False, early_stopping=False,
                           epsilon=0.1, fit_intercept=True,
                           loss='epsilon_insensitive', max_iter=1000,
                           n_iter_no_change=5, random_state=4385, shuffle=True,
                           tol=0.001, validation_fraction=0.1, verbose=0,
                           warm_start=False)
2022-12-03 13:17:47,241:INFO:create_model() successfully completed......................................
2022-12-03 13:17:47,373:INFO:SubProcess create_model() end ==================================
2022-12-03 13:17:47,374:INFO:Creating metrics dataframe
2022-12-03 13:17:47,393:INFO:Initializing Huber Regressor
2022-12-03 13:17:47,393:INFO:Total runtime is 0.47686496178309123 minutes
2022-12-03 13:17:47,425:INFO:SubProcess create_model() called ==================================
2022-12-03 13:17:47,426:INFO:Initializing create_model()
2022-12-03 13:17:47,426:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB301BB4F0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:17:47,426:INFO:Checking exceptions
2022-12-03 13:17:47,426:INFO:Importing libraries
2022-12-03 13:17:47,426:INFO:Copying training dataset
2022-12-03 13:17:47,435:INFO:Defining folds
2022-12-03 13:17:47,435:INFO:Declaring metric variables
2022-12-03 13:17:47,442:INFO:Importing untrained model
2022-12-03 13:17:47,450:INFO:Huber Regressor Imported successfully
2022-12-03 13:17:47,485:INFO:Starting cross validation
2022-12-03 13:17:47,488:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:17:47,711:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-03 13:17:47,727:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-03 13:17:47,742:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-03 13:17:47,758:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-03 13:17:48,052:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-03 13:17:48,068:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-03 13:17:48,114:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-03 13:17:48,130:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-03 13:17:48,371:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-03 13:17:48,381:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-03 13:17:48,429:INFO:Calculating mean and std
2022-12-03 13:17:48,432:INFO:Creating metrics dataframe
2022-12-03 13:17:48,439:INFO:Uploading results into container
2022-12-03 13:17:48,440:INFO:Uploading model into container now
2022-12-03 13:17:48,441:INFO:master_model_container: 10
2022-12-03 13:17:48,442:INFO:display_container: 2
2022-12-03 13:17:48,442:INFO:HuberRegressor(alpha=0.0001, epsilon=1.35, fit_intercept=True, max_iter=100,
               tol=1e-05, warm_start=False)
2022-12-03 13:17:48,443:INFO:create_model() successfully completed......................................
2022-12-03 13:17:48,586:INFO:SubProcess create_model() end ==================================
2022-12-03 13:17:48,586:INFO:Creating metrics dataframe
2022-12-03 13:17:48,616:INFO:Initializing K Neighbors Regressor
2022-12-03 13:17:48,616:INFO:Total runtime is 0.49723549286524454 minutes
2022-12-03 13:17:48,644:INFO:SubProcess create_model() called ==================================
2022-12-03 13:17:48,645:INFO:Initializing create_model()
2022-12-03 13:17:48,645:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB301BB4F0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:17:48,645:INFO:Checking exceptions
2022-12-03 13:17:48,645:INFO:Importing libraries
2022-12-03 13:17:48,646:INFO:Copying training dataset
2022-12-03 13:17:48,656:INFO:Defining folds
2022-12-03 13:17:48,657:INFO:Declaring metric variables
2022-12-03 13:17:48,664:INFO:Importing untrained model
2022-12-03 13:17:48,671:INFO:K Neighbors Regressor Imported successfully
2022-12-03 13:17:48,699:INFO:Starting cross validation
2022-12-03 13:17:48,702:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:17:49,474:INFO:Calculating mean and std
2022-12-03 13:17:49,477:INFO:Creating metrics dataframe
2022-12-03 13:17:49,484:INFO:Uploading results into container
2022-12-03 13:17:49,485:INFO:Uploading model into container now
2022-12-03 13:17:49,486:INFO:master_model_container: 11
2022-12-03 13:17:49,486:INFO:display_container: 2
2022-12-03 13:17:49,487:INFO:KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',
                    metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                    weights='uniform')
2022-12-03 13:17:49,487:INFO:create_model() successfully completed......................................
2022-12-03 13:17:49,609:INFO:SubProcess create_model() end ==================================
2022-12-03 13:17:49,611:INFO:Creating metrics dataframe
2022-12-03 13:17:49,640:INFO:Initializing Decision Tree Regressor
2022-12-03 13:17:49,640:INFO:Total runtime is 0.5143078883488973 minutes
2022-12-03 13:17:49,672:INFO:SubProcess create_model() called ==================================
2022-12-03 13:17:49,673:INFO:Initializing create_model()
2022-12-03 13:17:49,673:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB301BB4F0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:17:49,673:INFO:Checking exceptions
2022-12-03 13:17:49,673:INFO:Importing libraries
2022-12-03 13:17:49,674:INFO:Copying training dataset
2022-12-03 13:17:49,682:INFO:Defining folds
2022-12-03 13:17:49,683:INFO:Declaring metric variables
2022-12-03 13:17:49,690:INFO:Importing untrained model
2022-12-03 13:17:49,698:INFO:Decision Tree Regressor Imported successfully
2022-12-03 13:17:49,723:INFO:Starting cross validation
2022-12-03 13:17:49,726:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:17:50,423:INFO:Calculating mean and std
2022-12-03 13:17:50,423:INFO:Creating metrics dataframe
2022-12-03 13:17:50,439:INFO:Uploading results into container
2022-12-03 13:17:50,439:INFO:Uploading model into container now
2022-12-03 13:17:50,439:INFO:master_model_container: 12
2022-12-03 13:17:50,439:INFO:display_container: 2
2022-12-03 13:17:50,439:INFO:DecisionTreeRegressor(ccp_alpha=0.0, criterion='squared_error', max_depth=None,
                      max_features=None, max_leaf_nodes=None,
                      min_impurity_decrease=0.0, min_samples_leaf=1,
                      min_samples_split=2, min_weight_fraction_leaf=0.0,
                      random_state=4385, splitter='best')
2022-12-03 13:17:50,439:INFO:create_model() successfully completed......................................
2022-12-03 13:17:50,576:INFO:SubProcess create_model() end ==================================
2022-12-03 13:17:50,576:INFO:Creating metrics dataframe
2022-12-03 13:17:50,607:INFO:Initializing Random Forest Regressor
2022-12-03 13:17:50,607:INFO:Total runtime is 0.5304299235343933 minutes
2022-12-03 13:17:50,619:INFO:SubProcess create_model() called ==================================
2022-12-03 13:17:50,620:INFO:Initializing create_model()
2022-12-03 13:17:50,620:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB301BB4F0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:17:50,620:INFO:Checking exceptions
2022-12-03 13:17:50,620:INFO:Importing libraries
2022-12-03 13:17:50,620:INFO:Copying training dataset
2022-12-03 13:17:50,630:INFO:Defining folds
2022-12-03 13:17:50,630:INFO:Declaring metric variables
2022-12-03 13:17:50,641:INFO:Importing untrained model
2022-12-03 13:17:50,649:INFO:Random Forest Regressor Imported successfully
2022-12-03 13:17:50,670:INFO:Starting cross validation
2022-12-03 13:17:50,673:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:17:53,574:INFO:Calculating mean and std
2022-12-03 13:17:53,574:INFO:Creating metrics dataframe
2022-12-03 13:17:53,589:INFO:Uploading results into container
2022-12-03 13:17:53,589:INFO:Uploading model into container now
2022-12-03 13:17:53,589:INFO:master_model_container: 13
2022-12-03 13:17:53,589:INFO:display_container: 2
2022-12-03 13:17:53,589:INFO:RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='squared_error',
                      max_depth=None, max_features=1.0, max_leaf_nodes=None,
                      max_samples=None, min_impurity_decrease=0.0,
                      min_samples_leaf=1, min_samples_split=2,
                      min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=-1,
                      oob_score=False, random_state=4385, verbose=0,
                      warm_start=False)
2022-12-03 13:17:53,589:INFO:create_model() successfully completed......................................
2022-12-03 13:17:53,716:INFO:SubProcess create_model() end ==================================
2022-12-03 13:17:53,716:INFO:Creating metrics dataframe
2022-12-03 13:17:53,743:INFO:Initializing Extra Trees Regressor
2022-12-03 13:17:53,743:INFO:Total runtime is 0.5826942006746928 minutes
2022-12-03 13:17:53,780:INFO:SubProcess create_model() called ==================================
2022-12-03 13:17:53,780:INFO:Initializing create_model()
2022-12-03 13:17:53,781:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB301BB4F0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:17:53,781:INFO:Checking exceptions
2022-12-03 13:17:53,781:INFO:Importing libraries
2022-12-03 13:17:53,781:INFO:Copying training dataset
2022-12-03 13:17:53,789:INFO:Defining folds
2022-12-03 13:17:53,790:INFO:Declaring metric variables
2022-12-03 13:17:53,798:INFO:Importing untrained model
2022-12-03 13:17:53,805:INFO:Extra Trees Regressor Imported successfully
2022-12-03 13:17:53,828:INFO:Starting cross validation
2022-12-03 13:17:53,832:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:17:56,367:INFO:Calculating mean and std
2022-12-03 13:17:56,370:INFO:Creating metrics dataframe
2022-12-03 13:17:56,377:INFO:Uploading results into container
2022-12-03 13:17:56,378:INFO:Uploading model into container now
2022-12-03 13:17:56,379:INFO:master_model_container: 14
2022-12-03 13:17:56,379:INFO:display_container: 2
2022-12-03 13:17:56,380:INFO:ExtraTreesRegressor(bootstrap=False, ccp_alpha=0.0, criterion='squared_error',
                    max_depth=None, max_features=1.0, max_leaf_nodes=None,
                    max_samples=None, min_impurity_decrease=0.0,
                    min_samples_leaf=1, min_samples_split=2,
                    min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=-1,
                    oob_score=False, random_state=4385, verbose=0,
                    warm_start=False)
2022-12-03 13:17:56,381:INFO:create_model() successfully completed......................................
2022-12-03 13:17:56,492:INFO:SubProcess create_model() end ==================================
2022-12-03 13:17:56,492:INFO:Creating metrics dataframe
2022-12-03 13:17:56,523:INFO:Initializing AdaBoost Regressor
2022-12-03 13:17:56,523:INFO:Total runtime is 0.6290219227472941 minutes
2022-12-03 13:17:56,523:INFO:SubProcess create_model() called ==================================
2022-12-03 13:17:56,523:INFO:Initializing create_model()
2022-12-03 13:17:56,523:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB301BB4F0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:17:56,523:INFO:Checking exceptions
2022-12-03 13:17:56,523:INFO:Importing libraries
2022-12-03 13:17:56,523:INFO:Copying training dataset
2022-12-03 13:17:56,538:INFO:Defining folds
2022-12-03 13:17:56,547:INFO:Declaring metric variables
2022-12-03 13:17:56,555:INFO:Importing untrained model
2022-12-03 13:17:56,568:INFO:AdaBoost Regressor Imported successfully
2022-12-03 13:17:56,582:INFO:Starting cross validation
2022-12-03 13:17:56,585:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:17:57,415:INFO:Calculating mean and std
2022-12-03 13:17:57,419:INFO:Creating metrics dataframe
2022-12-03 13:17:57,426:INFO:Uploading results into container
2022-12-03 13:17:57,427:INFO:Uploading model into container now
2022-12-03 13:17:57,428:INFO:master_model_container: 15
2022-12-03 13:17:57,428:INFO:display_container: 2
2022-12-03 13:17:57,429:INFO:AdaBoostRegressor(base_estimator=None, learning_rate=1.0, loss='linear',
                  n_estimators=50, random_state=4385)
2022-12-03 13:17:57,429:INFO:create_model() successfully completed......................................
2022-12-03 13:17:57,541:INFO:SubProcess create_model() end ==================================
2022-12-03 13:17:57,541:INFO:Creating metrics dataframe
2022-12-03 13:17:57,573:INFO:Initializing Gradient Boosting Regressor
2022-12-03 13:17:57,573:INFO:Total runtime is 0.6465174357096354 minutes
2022-12-03 13:17:57,582:INFO:SubProcess create_model() called ==================================
2022-12-03 13:17:57,583:INFO:Initializing create_model()
2022-12-03 13:17:57,583:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB301BB4F0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:17:57,583:INFO:Checking exceptions
2022-12-03 13:17:57,583:INFO:Importing libraries
2022-12-03 13:17:57,584:INFO:Copying training dataset
2022-12-03 13:17:57,591:INFO:Defining folds
2022-12-03 13:17:57,591:INFO:Declaring metric variables
2022-12-03 13:17:57,599:INFO:Importing untrained model
2022-12-03 13:17:57,608:INFO:Gradient Boosting Regressor Imported successfully
2022-12-03 13:17:57,628:INFO:Starting cross validation
2022-12-03 13:17:57,631:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:17:58,957:INFO:Calculating mean and std
2022-12-03 13:17:58,957:INFO:Creating metrics dataframe
2022-12-03 13:17:58,957:INFO:Uploading results into container
2022-12-03 13:17:58,957:INFO:Uploading model into container now
2022-12-03 13:17:58,957:INFO:master_model_container: 16
2022-12-03 13:17:58,957:INFO:display_container: 2
2022-12-03 13:17:58,957:INFO:GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',
                          init=None, learning_rate=0.1, loss='squared_error',
                          max_depth=3, max_features=None, max_leaf_nodes=None,
                          min_impurity_decrease=0.0, min_samples_leaf=1,
                          min_samples_split=2, min_weight_fraction_leaf=0.0,
                          n_estimators=100, n_iter_no_change=None,
                          random_state=4385, subsample=1.0, tol=0.0001,
                          validation_fraction=0.1, verbose=0, warm_start=False)
2022-12-03 13:17:58,957:INFO:create_model() successfully completed......................................
2022-12-03 13:17:59,091:INFO:SubProcess create_model() end ==================================
2022-12-03 13:17:59,091:INFO:Creating metrics dataframe
2022-12-03 13:17:59,122:INFO:Initializing Light Gradient Boosting Machine
2022-12-03 13:17:59,122:INFO:Total runtime is 0.6723373134930928 minutes
2022-12-03 13:17:59,122:INFO:SubProcess create_model() called ==================================
2022-12-03 13:17:59,122:INFO:Initializing create_model()
2022-12-03 13:17:59,122:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB301BB4F0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:17:59,122:INFO:Checking exceptions
2022-12-03 13:17:59,122:INFO:Importing libraries
2022-12-03 13:17:59,122:INFO:Copying training dataset
2022-12-03 13:17:59,137:INFO:Defining folds
2022-12-03 13:17:59,137:INFO:Declaring metric variables
2022-12-03 13:17:59,137:INFO:Importing untrained model
2022-12-03 13:17:59,153:INFO:Light Gradient Boosting Machine Imported successfully
2022-12-03 13:17:59,169:INFO:Starting cross validation
2022-12-03 13:17:59,169:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:18:02,854:INFO:Calculating mean and std
2022-12-03 13:18:02,858:INFO:Creating metrics dataframe
2022-12-03 13:18:02,865:INFO:Uploading results into container
2022-12-03 13:18:02,866:INFO:Uploading model into container now
2022-12-03 13:18:02,867:INFO:master_model_container: 17
2022-12-03 13:18:02,867:INFO:display_container: 2
2022-12-03 13:18:02,868:INFO:LGBMRegressor(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
              importance_type='split', learning_rate=0.1, max_depth=-1,
              min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
              n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
              random_state=4385, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
              subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2022-12-03 13:18:02,868:INFO:create_model() successfully completed......................................
2022-12-03 13:18:02,996:INFO:SubProcess create_model() end ==================================
2022-12-03 13:18:02,996:INFO:Creating metrics dataframe
2022-12-03 13:18:03,029:INFO:Initializing Dummy Regressor
2022-12-03 13:18:03,029:INFO:Total runtime is 0.7374582568804422 minutes
2022-12-03 13:18:03,035:INFO:SubProcess create_model() called ==================================
2022-12-03 13:18:03,036:INFO:Initializing create_model()
2022-12-03 13:18:03,036:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB301BB4F0>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:18:03,037:INFO:Checking exceptions
2022-12-03 13:18:03,037:INFO:Importing libraries
2022-12-03 13:18:03,037:INFO:Copying training dataset
2022-12-03 13:18:03,066:INFO:Defining folds
2022-12-03 13:18:03,067:INFO:Declaring metric variables
2022-12-03 13:18:03,074:INFO:Importing untrained model
2022-12-03 13:18:03,082:INFO:Dummy Regressor Imported successfully
2022-12-03 13:18:03,095:INFO:Starting cross validation
2022-12-03 13:18:03,097:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-03 13:18:03,689:INFO:Calculating mean and std
2022-12-03 13:18:03,689:INFO:Creating metrics dataframe
2022-12-03 13:18:03,703:INFO:Uploading results into container
2022-12-03 13:18:03,704:INFO:Uploading model into container now
2022-12-03 13:18:03,705:INFO:master_model_container: 18
2022-12-03 13:18:03,705:INFO:display_container: 2
2022-12-03 13:18:03,705:INFO:DummyRegressor(constant=None, quantile=None, strategy='mean')
2022-12-03 13:18:03,705:INFO:create_model() successfully completed......................................
2022-12-03 13:18:03,821:INFO:SubProcess create_model() end ==================================
2022-12-03 13:18:03,821:INFO:Creating metrics dataframe
2022-12-03 13:18:03,885:INFO:Initializing create_model()
2022-12-03 13:18:03,886:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',
                          init=None, learning_rate=0.1, loss='squared_error',
                          max_depth=3, max_features=None, max_leaf_nodes=None,
                          min_impurity_decrease=0.0, min_samples_leaf=1,
                          min_samples_split=2, min_weight_fraction_leaf=0.0,
                          n_estimators=100, n_iter_no_change=None,
                          random_state=4385, subsample=1.0, tol=0.0001,
                          validation_fraction=0.1, verbose=0, warm_start=False), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2022-12-03 13:18:03,886:INFO:Checking exceptions
2022-12-03 13:18:03,889:INFO:Importing libraries
2022-12-03 13:18:03,889:INFO:Copying training dataset
2022-12-03 13:18:03,894:INFO:Defining folds
2022-12-03 13:18:03,895:INFO:Declaring metric variables
2022-12-03 13:18:03,895:INFO:Importing untrained model
2022-12-03 13:18:03,895:INFO:Declaring custom model
2022-12-03 13:18:03,897:INFO:Gradient Boosting Regressor Imported successfully
2022-12-03 13:18:03,900:INFO:Cross validation set to False
2022-12-03 13:18:03,900:INFO:Fitting Model
2022-12-03 13:18:04,236:INFO:GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',
                          init=None, learning_rate=0.1, loss='squared_error',
                          max_depth=3, max_features=None, max_leaf_nodes=None,
                          min_impurity_decrease=0.0, min_samples_leaf=1,
                          min_samples_split=2, min_weight_fraction_leaf=0.0,
                          n_estimators=100, n_iter_no_change=None,
                          random_state=4385, subsample=1.0, tol=0.0001,
                          validation_fraction=0.1, verbose=0, warm_start=False)
2022-12-03 13:18:04,236:INFO:create_model() successfully completed......................................
2022-12-03 13:18:04,462:INFO:master_model_container: 18
2022-12-03 13:18:04,462:INFO:display_container: 2
2022-12-03 13:18:04,463:INFO:GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',
                          init=None, learning_rate=0.1, loss='squared_error',
                          max_depth=3, max_features=None, max_leaf_nodes=None,
                          min_impurity_decrease=0.0, min_samples_leaf=1,
                          min_samples_split=2, min_weight_fraction_leaf=0.0,
                          n_estimators=100, n_iter_no_change=None,
                          random_state=4385, subsample=1.0, tol=0.0001,
                          validation_fraction=0.1, verbose=0, warm_start=False)
2022-12-03 13:18:04,464:INFO:compare_models() successfully completed......................................
2022-12-03 13:18:54,677:INFO:Initializing evaluate_model()
2022-12-03 13:18:54,677:INFO:evaluate_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',
                          init=None, learning_rate=0.1, loss='squared_error',
                          max_depth=3, max_features=None, max_leaf_nodes=None,
                          min_impurity_decrease=0.0, min_samples_leaf=1,
                          min_samples_split=2, min_weight_fraction_leaf=0.0,
                          n_estimators=100, n_iter_no_change=None,
                          random_state=4385, subsample=1.0, tol=0.0001,
                          validation_fraction=0.1, verbose=0, warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None, use_train_data=False)
2022-12-03 13:18:54,724:INFO:Initializing plot_model()
2022-12-03 13:18:54,724:INFO:plot_model(plot=pipeline, fold=KFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',
                          init=None, learning_rate=0.1, loss='squared_error',
                          max_depth=3, max_features=None, max_leaf_nodes=None,
                          min_impurity_decrease=0.0, min_samples_leaf=1,
                          min_samples_split=2, min_weight_fraction_leaf=0.0,
                          n_estimators=100, n_iter_no_change=None,
                          random_state=4385, subsample=1.0, tol=0.0001,
                          validation_fraction=0.1, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, system=True)
2022-12-03 13:18:54,724:INFO:Checking exceptions
2022-12-03 13:18:54,729:INFO:Preloading libraries
2022-12-03 13:18:54,762:INFO:Copying training dataset
2022-12-03 13:18:54,763:INFO:Plot type: pipeline
2022-12-03 13:18:55,023:INFO:Visual Rendered Successfully
2022-12-03 13:18:55,170:INFO:plot_model() successfully completed......................................
2022-12-03 13:19:04,017:INFO:Initializing plot_model()
2022-12-03 13:19:04,017:INFO:plot_model(plot=error, fold=KFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',
                          init=None, learning_rate=0.1, loss='squared_error',
                          max_depth=3, max_features=None, max_leaf_nodes=None,
                          min_impurity_decrease=0.0, min_samples_leaf=1,
                          min_samples_split=2, min_weight_fraction_leaf=0.0,
                          n_estimators=100, n_iter_no_change=None,
                          random_state=4385, subsample=1.0, tol=0.0001,
                          validation_fraction=0.1, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, system=True)
2022-12-03 13:19:04,017:INFO:Checking exceptions
2022-12-03 13:19:04,023:INFO:Preloading libraries
2022-12-03 13:19:04,042:INFO:Copying training dataset
2022-12-03 13:19:04,043:INFO:Plot type: error
2022-12-03 13:19:04,608:INFO:Fitting Model
2022-12-03 13:19:04,624:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\base.py:450: UserWarning: X does not have valid feature names, but GradientBoostingRegressor was fitted with feature names
  warnings.warn(

2022-12-03 13:19:04,624:INFO:Scoring test/hold-out set
2022-12-03 13:19:06,380:INFO:Visual Rendered Successfully
2022-12-03 13:19:06,521:INFO:plot_model() successfully completed......................................
2022-12-03 13:19:06,580:INFO:Initializing plot_model()
2022-12-03 13:19:06,580:INFO:plot_model(plot=learning, fold=KFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',
                          init=None, learning_rate=0.1, loss='squared_error',
                          max_depth=3, max_features=None, max_leaf_nodes=None,
                          min_impurity_decrease=0.0, min_samples_leaf=1,
                          min_samples_split=2, min_weight_fraction_leaf=0.0,
                          n_estimators=100, n_iter_no_change=None,
                          random_state=4385, subsample=1.0, tol=0.0001,
                          validation_fraction=0.1, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, system=True)
2022-12-03 13:19:06,581:INFO:Checking exceptions
2022-12-03 13:19:06,588:INFO:Preloading libraries
2022-12-03 13:19:06,609:INFO:Copying training dataset
2022-12-03 13:19:06,609:INFO:Plot type: learning
2022-12-03 13:19:06,905:INFO:Fitting Model
2022-12-03 13:19:12,383:INFO:Visual Rendered Successfully
2022-12-03 13:19:12,514:INFO:plot_model() successfully completed......................................
2022-12-03 13:19:12,535:INFO:Initializing plot_model()
2022-12-03 13:19:12,535:INFO:plot_model(plot=parameter, fold=KFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',
                          init=None, learning_rate=0.1, loss='squared_error',
                          max_depth=3, max_features=None, max_leaf_nodes=None,
                          min_impurity_decrease=0.0, min_samples_leaf=1,
                          min_samples_split=2, min_weight_fraction_leaf=0.0,
                          n_estimators=100, n_iter_no_change=None,
                          random_state=4385, subsample=1.0, tol=0.0001,
                          validation_fraction=0.1, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, system=True)
2022-12-03 13:19:12,535:INFO:Checking exceptions
2022-12-03 13:19:12,540:INFO:Preloading libraries
2022-12-03 13:19:12,569:INFO:Copying training dataset
2022-12-03 13:19:12,570:INFO:Plot type: parameter
2022-12-03 13:19:12,587:INFO:Visual Rendered Successfully
2022-12-03 13:19:12,721:INFO:plot_model() successfully completed......................................
2022-12-03 13:19:19,401:INFO:Initializing plot_model()
2022-12-03 13:19:19,401:INFO:plot_model(plot=learning, fold=KFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',
                          init=None, learning_rate=0.1, loss='squared_error',
                          max_depth=3, max_features=None, max_leaf_nodes=None,
                          min_impurity_decrease=0.0, min_samples_leaf=1,
                          min_samples_split=2, min_weight_fraction_leaf=0.0,
                          n_estimators=100, n_iter_no_change=None,
                          random_state=4385, subsample=1.0, tol=0.0001,
                          validation_fraction=0.1, verbose=0, warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, system=True)
2022-12-03 13:19:19,401:INFO:Checking exceptions
2022-12-03 13:19:19,407:INFO:Preloading libraries
2022-12-03 13:19:19,426:INFO:Copying training dataset
2022-12-03 13:19:19,426:INFO:Plot type: learning
2022-12-03 13:19:19,748:INFO:Fitting Model
2022-12-03 13:19:25,041:INFO:Visual Rendered Successfully
2022-12-03 13:19:25,177:INFO:plot_model() successfully completed......................................
2022-12-03 13:20:03,210:INFO:Initializing plot_model()
2022-12-03 13:20:03,211:INFO:plot_model(plot=residuals, fold=None, use_train_data=False, verbose=True, display=None, display_format=None, estimator=GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',
                          init=None, learning_rate=0.1, loss='squared_error',
                          max_depth=3, max_features=None, max_leaf_nodes=None,
                          min_impurity_decrease=0.0, min_samples_leaf=1,
                          min_samples_split=2, min_weight_fraction_leaf=0.0,
                          n_estimators=100, n_iter_no_change=None,
                          random_state=4385, subsample=1.0, tol=0.0001,
                          validation_fraction=0.1, verbose=0, warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, system=True)
2022-12-03 13:20:03,211:INFO:Checking exceptions
2022-12-03 13:20:03,219:INFO:Preloading libraries
2022-12-03 13:20:03,242:INFO:Copying training dataset
2022-12-03 13:20:03,243:INFO:Plot type: residuals
2022-12-03 13:20:03,635:INFO:Fitting Model
2022-12-03 13:20:03,635:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\base.py:450: UserWarning: X does not have valid feature names, but GradientBoostingRegressor was fitted with feature names
  warnings.warn(

2022-12-03 13:20:03,722:INFO:Scoring test/hold-out set
2022-12-03 13:20:04,773:INFO:Visual Rendered Successfully
2022-12-03 13:20:04,943:INFO:plot_model() successfully completed......................................
2022-12-03 13:20:21,985:INFO:Initializing plot_model()
2022-12-03 13:20:21,985:INFO:plot_model(plot=feature, fold=None, use_train_data=False, verbose=True, display=None, display_format=None, estimator=GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',
                          init=None, learning_rate=0.1, loss='squared_error',
                          max_depth=3, max_features=None, max_leaf_nodes=None,
                          min_impurity_decrease=0.0, min_samples_leaf=1,
                          min_samples_split=2, min_weight_fraction_leaf=0.0,
                          n_estimators=100, n_iter_no_change=None,
                          random_state=4385, subsample=1.0, tol=0.0001,
                          validation_fraction=0.1, verbose=0, warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, system=True)
2022-12-03 13:20:21,985:INFO:Checking exceptions
2022-12-03 13:20:21,992:INFO:Preloading libraries
2022-12-03 13:20:22,014:INFO:Copying training dataset
2022-12-03 13:20:22,015:INFO:Plot type: feature
2022-12-03 13:20:22,016:WARNING:No coef_ found. Trying feature_importances_
2022-12-03 13:20:22,470:INFO:Visual Rendered Successfully
2022-12-03 13:20:22,595:INFO:plot_model() successfully completed......................................
2022-12-03 13:20:54,070:INFO:Initializing predict_model()
2022-12-03 13:20:54,070:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',
                          init=None, learning_rate=0.1, loss='squared_error',
                          max_depth=3, max_features=None, max_leaf_nodes=None,
                          min_impurity_decrease=0.0, min_samples_leaf=1,
                          min_samples_split=2, min_weight_fraction_leaf=0.0,
                          n_estimators=100, n_iter_no_change=None,
                          random_state=4385, subsample=1.0, tol=0.0001,
                          validation_fraction=0.1, verbose=0, warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, drift_report=False, round=4, verbose=True, ml_usecase=None, preprocess=True, replace_labels_in_column=<function _SupervisedExperiment.predict_model.<locals>.replace_labels_in_column at 0x000001FB3042FC10>)
2022-12-03 13:20:54,070:INFO:Checking exceptions
2022-12-03 13:20:54,070:INFO:Preloading libraries
2022-12-03 13:21:56,744:INFO:Initializing predict_model()
2022-12-03 13:21:56,745:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FB2F1A8D30>, estimator=GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',
                          init=None, learning_rate=0.1, loss='squared_error',
                          max_depth=3, max_features=None, max_leaf_nodes=None,
                          min_impurity_decrease=0.0, min_samples_leaf=1,
                          min_samples_split=2, min_weight_fraction_leaf=0.0,
                          n_estimators=100, n_iter_no_change=None,
                          random_state=4385, subsample=1.0, tol=0.0001,
                          validation_fraction=0.1, verbose=0, warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, drift_report=False, round=4, verbose=True, ml_usecase=None, preprocess=True, replace_labels_in_column=<function _SupervisedExperiment.predict_model.<locals>.replace_labels_in_column at 0x000001FB309611F0>)
2022-12-03 13:21:56,745:INFO:Checking exceptions
2022-12-03 13:21:56,745:INFO:Preloading libraries
2022-12-03 13:21:56,748:INFO:Set up data.
2022-12-03 13:21:56,758:INFO:Set up index.
2022-12-03 13:23:01,113:INFO:Initializing save_model()
2022-12-03 13:23:01,113:INFO:save_model(model=GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',
                          init=None, learning_rate=0.1, loss='squared_error',
                          max_depth=3, max_features=None, max_leaf_nodes=None,
                          min_impurity_decrease=0.0, min_samples_leaf=1,
                          min_samples_split=2, min_weight_fraction_leaf=0.0,
                          n_estimators=100, n_iter_no_change=None,
                          random_state=4385, subsample=1.0, tol=0.0001,
                          validation_fraction=0.1, verbose=0, warm_start=False), model_name=my_LR, prep_pipe_=Pipeline(memory=Memory(location=C:\Users\du\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None,...
                                                                         'mapping': {nan: -1,
                                                                                     'female': 0,
                                                                                     'male': 1}},
                                                                        {'col': 'smoker',
                                                                         'mapping': {nan: -1,
                                                                                     'no': 0,
                                                                                     'yes': 1}}],
                                                               return_df=True,
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.REGRESSION, kwargs={})
2022-12-03 13:23:01,113:INFO:Adding model into prep_pipe
2022-12-03 13:23:01,184:INFO:my_LR.pkl saved in current working directory
2022-12-03 13:23:01,236:INFO:Pipeline(memory=Memory(location=C:\Users\du\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None,...
                                           criterion='friedman_mse', init=None,
                                           learning_rate=0.1,
                                           loss='squared_error', max_depth=3,
                                           max_features=None,
                                           max_leaf_nodes=None,
                                           min_impurity_decrease=0.0,
                                           min_samples_leaf=1,
                                           min_samples_split=2,
                                           min_weight_fraction_leaf=0.0,
                                           n_estimators=100,
                                           n_iter_no_change=None,
                                           random_state=4385, subsample=1.0,
                                           tol=0.0001, validation_fraction=0.1,
                                           verbose=0, warm_start=False))],
         verbose=False)
2022-12-03 13:23:01,236:INFO:save_model() successfully completed......................................
2022-12-03 13:23:01,693:INFO:Initializing load_model()
2022-12-03 13:23:01,694:INFO:load_model(model_name=my_LR, platform=None, authentication=None, verbose=True)
2022-12-03 13:24:47,912:INFO:PyCaret ClusteringExperiment
2022-12-03 13:24:47,912:INFO:Logging name: cluster-default-name
2022-12-03 13:24:47,912:INFO:ML Usecase: MLUsecase.CLUSTERING
2022-12-03 13:24:47,913:INFO:version 3.0.0.rc4
2022-12-03 13:24:47,913:INFO:Initializing setup()
2022-12-03 13:24:47,913:INFO:self.USI: 8f3c
2022-12-03 13:24:47,913:INFO:self.variable_keys: {'data', 'exp_id', 'display_container', 'logging_param', 'gpu_param', '_all_metrics', 'log_plots_param', 'variable_keys', 'seed', '_available_plots', 'n_jobs_param', 'X', 'html_param', '_gpu_n_jobs_param', 'master_model_container', 'idx', '_ml_usecase', 'memory', '_all_models', '_all_models_internal', 'exp_name_log', 'USI', 'pipeline'}
2022-12-03 13:24:47,913:INFO:Checking environment
2022-12-03 13:24:47,913:INFO:python_version: 3.9.13
2022-12-03 13:24:47,913:INFO:python_build: ('main', 'Aug 25 2022 23:51:50')
2022-12-03 13:24:47,913:INFO:machine: AMD64
2022-12-03 13:24:47,913:INFO:platform: Windows-10-10.0.19044-SP0
2022-12-03 13:24:47,914:INFO:Memory: svmem(total=17043402752, available=8713584640, percent=48.9, used=8329818112, free=8713584640)
2022-12-03 13:24:47,914:INFO:Physical Core: 2
2022-12-03 13:24:47,914:INFO:Logical Core: 4
2022-12-03 13:24:47,914:INFO:Checking libraries
2022-12-03 13:24:47,914:INFO:System:
2022-12-03 13:24:47,914:INFO:    python: 3.9.13 (main, Aug 25 2022, 23:51:50) [MSC v.1916 64 bit (AMD64)]
2022-12-03 13:24:47,914:INFO:executable: C:\ProgramData\Anaconda3\python.exe
2022-12-03 13:24:47,914:INFO:   machine: Windows-10-10.0.19044-SP0
2022-12-03 13:24:47,914:INFO:PyCaret required dependencies:
2022-12-03 13:24:47,915:INFO:                 pip: 22.2.2
2022-12-03 13:24:47,915:INFO:          setuptools: 63.4.1
2022-12-03 13:24:47,915:INFO:             pycaret: 3.0.0rc4
2022-12-03 13:24:47,915:INFO:             IPython: 7.31.1
2022-12-03 13:24:47,915:INFO:          ipywidgets: 7.6.5
2022-12-03 13:24:47,915:INFO:                tqdm: 4.64.1
2022-12-03 13:24:47,915:INFO:               numpy: 1.21.5
2022-12-03 13:24:47,915:INFO:              pandas: 1.4.4
2022-12-03 13:24:47,915:INFO:              jinja2: 2.11.3
2022-12-03 13:24:47,916:INFO:               scipy: 1.9.1
2022-12-03 13:24:47,916:INFO:              joblib: 1.2.0
2022-12-03 13:24:47,916:INFO:             sklearn: 1.1.3
2022-12-03 13:24:47,916:INFO:                pyod: 1.0.6
2022-12-03 13:24:47,916:INFO:            imblearn: 0.9.1
2022-12-03 13:24:47,916:INFO:   category_encoders: 2.5.1.post0
2022-12-03 13:24:47,916:INFO:            lightgbm: 3.3.3
2022-12-03 13:24:47,916:INFO:               numba: 0.55.1
2022-12-03 13:24:47,916:INFO:            requests: 2.28.1
2022-12-03 13:24:47,916:INFO:          matplotlib: 3.5.2
2022-12-03 13:24:47,917:INFO:          scikitplot: 0.3.7
2022-12-03 13:24:47,917:INFO:         yellowbrick: 1.5
2022-12-03 13:24:47,917:INFO:              plotly: 5.9.0
2022-12-03 13:24:47,917:INFO:             kaleido: 0.2.1
2022-12-03 13:24:47,917:INFO:         statsmodels: 0.13.2
2022-12-03 13:24:47,917:INFO:              sktime: 0.14.1
2022-12-03 13:24:47,917:INFO:               tbats: 1.1.1
2022-12-03 13:24:47,917:INFO:            pmdarima: 1.8.4
2022-12-03 13:24:47,917:INFO:              psutil: 5.9.0
2022-12-03 13:24:47,918:INFO:PyCaret optional dependencies:
2022-12-03 13:24:47,918:INFO:                shap: Not installed
2022-12-03 13:24:47,918:INFO:           interpret: Not installed
2022-12-03 13:24:47,918:INFO:                umap: Not installed
2022-12-03 13:24:47,918:INFO:    pandas_profiling: Not installed
2022-12-03 13:24:47,918:INFO:  explainerdashboard: Not installed
2022-12-03 13:24:47,918:INFO:             autoviz: Not installed
2022-12-03 13:24:47,918:INFO:           fairlearn: Not installed
2022-12-03 13:24:47,919:INFO:             xgboost: Not installed
2022-12-03 13:24:47,919:INFO:            catboost: Not installed
2022-12-03 13:24:47,919:INFO:              kmodes: Not installed
2022-12-03 13:24:47,919:INFO:             mlxtend: 0.21.0
2022-12-03 13:24:47,919:INFO:       statsforecast: Not installed
2022-12-03 13:24:47,919:INFO:        tune_sklearn: Not installed
2022-12-03 13:24:47,919:INFO:                 ray: Not installed
2022-12-03 13:24:47,919:INFO:            hyperopt: Not installed
2022-12-03 13:24:47,919:INFO:              optuna: Not installed
2022-12-03 13:24:47,920:INFO:               skopt: Not installed
2022-12-03 13:24:47,920:INFO:              mlflow: Not installed
2022-12-03 13:24:47,920:INFO:              gradio: Not installed
2022-12-03 13:24:47,920:INFO:             fastapi: Not installed
2022-12-03 13:24:47,920:INFO:             uvicorn: Not installed
2022-12-03 13:24:47,920:INFO:              m2cgen: Not installed
2022-12-03 13:24:47,920:INFO:           evidently: Not installed
2022-12-03 13:24:47,920:INFO:                nltk: 3.7
2022-12-03 13:24:47,920:INFO:            pyLDAvis: Not installed
2022-12-03 13:24:47,920:INFO:              gensim: 4.1.2
2022-12-03 13:24:47,921:INFO:               spacy: Not installed
2022-12-03 13:24:47,921:INFO:           wordcloud: 1.8.2.2
2022-12-03 13:24:47,921:INFO:            textblob: Not installed
2022-12-03 13:24:47,921:INFO:               fugue: Not installed
2022-12-03 13:24:47,921:INFO:           streamlit: Not installed
2022-12-03 13:24:47,921:INFO:             prophet: Not installed
2022-12-03 13:24:47,921:INFO:None
2022-12-03 13:24:47,921:INFO:Set up data.
2022-12-03 13:24:47,926:INFO:Set up index.
2022-12-03 13:24:47,926:INFO:Assigning column types.
2022-12-03 13:24:47,931:INFO:Preparing preprocessing pipeline...
2022-12-03 13:24:47,931:INFO:Set up simple imputation.
2022-12-03 13:24:47,931:INFO:Set up feature normalization.
2022-12-03 13:24:48,168:INFO:Finished creating preprocessing pipeline.
2022-12-03 13:24:48,168:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\du\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Income', 'SpendingScore',
                                             'Savings'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2022-12-03 13:24:48,168:INFO:Creating final display dataframe.
2022-12-03 13:24:48,328:INFO:Setup display_container:                Description                 Value
0               Session id                   685
1      Original data shape              (505, 4)
2   Transformed data shape              (505, 4)
3         Numeric features                     4
4               Preprocess                  True
5          Imputation type                simple
6       Numeric imputation                  mean
7   Categorical imputation                  mode
8                Normalize                  True
9         Normalize method                zscore
10                CPU Jobs                    -1
11                 Use GPU                 False
12          Log Experiment                 False
13         Experiment Name  cluster-default-name
14                     USI                  8f3c
2022-12-03 13:24:48,341:WARNING:
'kmodes' is a soft dependency and not included in the pycaret installation. Please run: `pip install kmodes` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:24:48,341:WARNING:
'kmodes' is a soft dependency and not included in the pycaret installation. Please run: `pip install kmodes` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 13:24:48,343:INFO:setup() successfully completed in 0.44s...............
2022-12-03 13:25:42,314:INFO:Initializing create_model()
2022-12-03 13:25:42,314:INFO:create_model(self=<pycaret.clustering.oop.ClusteringExperiment object at 0x000001FB30723610>, estimator=kmeans, num_clusters=4, fraction=0.05, ground_truth=None, round=4, fit_kwargs=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, raise_num_clusters=False, display=None, kwargs={})
2022-12-03 13:25:42,314:INFO:Checking exceptions
2022-12-03 13:25:42,418:INFO:Importing untrained model
2022-12-03 13:25:42,425:INFO:K-Means Clustering Imported successfully
2022-12-03 13:25:42,454:INFO:Fitting Model
2022-12-03 13:25:42,666:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\cluster\_kmeans.py:1334: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=2.
  warnings.warn(

2022-12-03 13:25:43,222:INFO:KMeans(algorithm='lloyd', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=4, n_init=10, random_state=685, tol=0.0001, verbose=0)
2022-12-03 13:25:43,222:INFO:create_models() successfully completed......................................
2022-12-03 13:25:43,236:INFO:Uploading results into container
2022-12-03 13:25:43,240:INFO:Uploading model into container now
2022-12-03 13:25:43,252:INFO:master_model_container: 1
2022-12-03 13:25:43,253:INFO:display_container: 2
2022-12-03 13:25:43,254:INFO:KMeans(algorithm='lloyd', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=4, n_init=10, random_state=685, tol=0.0001, verbose=0)
2022-12-03 13:25:43,254:INFO:create_model() successfully completed......................................
2022-12-03 13:38:35,620:INFO:Initializing evaluate_model()
2022-12-03 13:38:35,620:INFO:evaluate_model(self=<pycaret.clustering.oop.ClusteringExperiment object at 0x000001FB30723610>, estimator=KMeans(algorithm='lloyd', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=4, n_init=10, random_state=685, tol=0.0001, verbose=0), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None, use_train_data=False)
2022-12-03 13:38:35,660:INFO:Initializing plot_model()
2022-12-03 13:38:35,660:INFO:plot_model(plot=pipeline, fold=None, use_train_data=False, verbose=False, display=None, display_format=None, estimator=KMeans(algorithm='lloyd', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=4, n_init=10, random_state=685, tol=0.0001, verbose=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.clustering.oop.ClusteringExperiment object at 0x000001FB30723610>, system=True)
2022-12-03 13:38:35,660:INFO:Checking exceptions
2022-12-03 13:38:35,662:INFO:Preloading libraries
2022-12-03 13:38:35,663:INFO:Copying training dataset
2022-12-03 13:38:35,663:INFO:Plot type: pipeline
2022-12-03 13:38:35,903:INFO:Visual Rendered Successfully
2022-12-03 13:38:36,052:INFO:plot_model() successfully completed......................................
2022-12-03 13:38:38,775:INFO:Initializing plot_model()
2022-12-03 13:38:38,775:INFO:plot_model(plot=elbow, fold=None, use_train_data=False, verbose=False, display=None, display_format=None, estimator=KMeans(algorithm='lloyd', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=4, n_init=10, random_state=685, tol=0.0001, verbose=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.clustering.oop.ClusteringExperiment object at 0x000001FB30723610>, system=True)
2022-12-03 13:38:38,775:INFO:Checking exceptions
2022-12-03 13:38:38,777:INFO:Preloading libraries
2022-12-03 13:38:38,778:INFO:Copying training dataset
2022-12-03 13:38:38,778:INFO:Plot type: elbow
2022-12-03 13:38:38,871:INFO:Fitting Model
2022-12-03 13:38:38,918:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\cluster\_kmeans.py:1334: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=2.
  warnings.warn(

2022-12-03 13:38:39,431:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\cluster\_kmeans.py:1334: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=2.
  warnings.warn(

2022-12-03 13:38:39,913:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\cluster\_kmeans.py:1334: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=2.
  warnings.warn(

2022-12-03 13:38:40,460:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\cluster\_kmeans.py:1334: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=2.
  warnings.warn(

2022-12-03 13:38:41,020:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\cluster\_kmeans.py:1334: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=2.
  warnings.warn(

2022-12-03 13:38:41,579:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\cluster\_kmeans.py:1334: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=2.
  warnings.warn(

2022-12-03 13:38:42,114:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\cluster\_kmeans.py:1334: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=2.
  warnings.warn(

2022-12-03 13:38:42,730:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\cluster\_kmeans.py:1334: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=2.
  warnings.warn(

2022-12-03 13:38:43,255:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\cluster\_kmeans.py:1334: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=2.
  warnings.warn(

2022-12-03 13:38:44,221:INFO:Visual Rendered Successfully
2022-12-03 13:38:44,350:INFO:plot_model() successfully completed......................................
2022-12-03 13:38:55,543:INFO:Initializing plot_model()
2022-12-03 13:38:55,543:INFO:plot_model(plot=tsne, fold=None, use_train_data=False, verbose=False, display=None, display_format=None, estimator=KMeans(algorithm='lloyd', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=4, n_init=10, random_state=685, tol=0.0001, verbose=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.clustering.oop.ClusteringExperiment object at 0x000001FB30723610>, system=True)
2022-12-03 13:38:55,543:INFO:Checking exceptions
2022-12-03 13:38:55,545:INFO:Preloading libraries
2022-12-03 13:38:55,546:INFO:Copying training dataset
2022-12-03 13:38:55,546:INFO:Plot type: tsne
2022-12-03 13:38:55,547:INFO:SubProcess assign_model() called ==================================
2022-12-03 13:38:55,547:INFO:Initializing assign_model()
2022-12-03 13:38:55,547:INFO:assign_model(self=<pycaret.clustering.oop.ClusteringExperiment object at 0x000001FB30723610>, model=KMeans(algorithm='lloyd', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=4, n_init=10, random_state=685, tol=0.0001, verbose=0), transformation=True, score=False, verbose=False)
2022-12-03 13:38:55,547:INFO:Checking exceptions
2022-12-03 13:38:55,548:INFO:Determining Trained Model
2022-12-03 13:38:55,548:INFO:Trained Model : K-Means Clustering
2022-12-03 13:38:55,548:INFO:Copying data
2022-12-03 13:38:55,566:INFO:Transformation parameter set to True. Assigned clusters are attached on transformed dataset.
2022-12-03 13:38:55,568:INFO:(505, 5)
2022-12-03 13:38:55,568:INFO:assign_model() successfully completed......................................
2022-12-03 13:38:55,568:INFO:SubProcess assign_model() end ==================================
2022-12-03 13:38:55,569:INFO:Fitting TSNE()
2022-12-03 13:38:55,570:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\manifold\_t_sne.py:800: FutureWarning: The default initialization in TSNE will change from 'random' to 'pca' in 1.2.
  warnings.warn(

2022-12-03 13:38:55,570:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\manifold\_t_sne.py:810: FutureWarning: The default learning rate in TSNE will change from 200.0 to 'auto' in 1.2.
  warnings.warn(

2022-12-03 13:39:21,679:INFO:Sorting dataframe
2022-12-03 13:39:21,681:INFO:Rendering Visual
2022-12-03 13:40:00,001:INFO:Visual Rendered Successfully
2022-12-03 13:40:00,190:INFO:plot_model() successfully completed......................................
2022-12-03 13:40:00,200:INFO:Initializing plot_model()
2022-12-03 13:40:00,200:INFO:plot_model(plot=silhouette, fold=None, use_train_data=False, verbose=True, display=None, display_format=None, estimator=KMeans(algorithm='lloyd', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=4, n_init=10, random_state=685, tol=0.0001, verbose=0), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.clustering.oop.ClusteringExperiment object at 0x000001FB30723610>, system=True)
2022-12-03 13:40:00,201:INFO:Checking exceptions
2022-12-03 13:40:00,205:INFO:Preloading libraries
2022-12-03 13:40:00,213:INFO:Copying training dataset
2022-12-03 13:40:00,213:INFO:Plot type: silhouette
2022-12-03 13:40:00,231:INFO:Fitting Model
2022-12-03 13:40:00,231:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\base.py:450: UserWarning:

X does not have valid feature names, but KMeans was fitted with feature names


2022-12-03 13:40:01,031:INFO:Visual Rendered Successfully
2022-12-03 13:40:01,180:INFO:plot_model() successfully completed......................................
2022-12-03 13:40:18,336:INFO:Initializing assign_model()
2022-12-03 13:40:18,336:INFO:assign_model(self=<pycaret.clustering.oop.ClusteringExperiment object at 0x000001FB30723610>, model=KMeans(algorithm='lloyd', copy_x=True, init='k-means++', max_iter=300,
       n_clusters=4, n_init=10, random_state=685, tol=0.0001, verbose=0), transformation=False, score=True, verbose=True)
2022-12-03 13:40:18,336:INFO:Checking exceptions
2022-12-03 13:40:18,337:INFO:Determining Trained Model
2022-12-03 13:40:18,337:INFO:Trained Model : K-Means Clustering
2022-12-03 13:40:18,337:INFO:Copying data
2022-12-03 13:40:18,339:INFO:(505, 5)
2022-12-03 13:40:18,340:INFO:assign_model() successfully completed......................................
2022-12-03 14:03:02,782:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\plotly_resampler\aggregation\aggregators.py:24: UserWarning:

Could not import lttbc; will use a (slower) python alternative.


2022-12-03 14:03:21,076:INFO:PyCaret TSForecastingExperiment
2022-12-03 14:03:21,076:INFO:Logging name: ts-default-name
2022-12-03 14:03:21,076:INFO:ML Usecase: MLUsecase.TIME_SERIES
2022-12-03 14:03:21,076:INFO:version 3.0.0.rc4
2022-12-03 14:03:21,076:INFO:Initializing setup()
2022-12-03 14:03:21,076:INFO:self.USI: d112
2022-12-03 14:03:21,076:INFO:self.variable_keys: {'X_test_transformed', 'exp_id', 'logging_param', '_all_metrics', 'log_plots_param', 'seasonality_present', 'seed', 'n_jobs_param', 'primary_sp_to_use', 'y_train', 'html_param', '_gpu_n_jobs_param', 'master_model_container', 'idx', 'fold_generator', 'memory', 'X_train_transformed', '_all_models_internal', 'exp_name_log', 'X_test', 'USI', 'pipeline', 'y_test', 'seasonal_period', 'X_transformed', 'data', 'y_test_transformed', 'display_container', 'gpu_param', 'enforce_pi', 'y_transformed', 'exogenous_present', 'X_train', 'variable_keys', 'approach_type', '_available_plots', 'X', 'index_type', 'fold_param', 'y_train_transformed', '_ml_usecase', 'fh', '_all_models', 'model_engines', 'all_sp_values', 'y', 'enforce_exogenous', 'strictly_positive'}
2022-12-03 14:03:21,077:INFO:Checking environment
2022-12-03 14:03:21,077:INFO:python_version: 3.9.13
2022-12-03 14:03:21,077:INFO:python_build: ('main', 'Aug 25 2022 23:51:50')
2022-12-03 14:03:21,077:INFO:machine: AMD64
2022-12-03 14:03:21,077:INFO:platform: Windows-10-10.0.19044-SP0
2022-12-03 14:03:21,077:INFO:Memory: svmem(total=17043402752, available=8613187584, percent=49.5, used=8430215168, free=8613187584)
2022-12-03 14:03:21,077:INFO:Physical Core: 2
2022-12-03 14:03:21,077:INFO:Logical Core: 4
2022-12-03 14:03:21,077:INFO:Checking libraries
2022-12-03 14:03:21,078:INFO:System:
2022-12-03 14:03:21,078:INFO:    python: 3.9.13 (main, Aug 25 2022, 23:51:50) [MSC v.1916 64 bit (AMD64)]
2022-12-03 14:03:21,078:INFO:executable: C:\ProgramData\Anaconda3\python.exe
2022-12-03 14:03:21,078:INFO:   machine: Windows-10-10.0.19044-SP0
2022-12-03 14:03:21,078:INFO:PyCaret required dependencies:
2022-12-03 14:03:21,078:INFO:                 pip: 22.2.2
2022-12-03 14:03:21,078:INFO:          setuptools: 63.4.1
2022-12-03 14:03:21,078:INFO:             pycaret: 3.0.0rc4
2022-12-03 14:03:21,079:INFO:             IPython: 7.31.1
2022-12-03 14:03:21,079:INFO:          ipywidgets: 7.6.5
2022-12-03 14:03:21,079:INFO:                tqdm: 4.64.1
2022-12-03 14:03:21,079:INFO:               numpy: 1.21.5
2022-12-03 14:03:21,079:INFO:              pandas: 1.4.4
2022-12-03 14:03:21,079:INFO:              jinja2: 2.11.3
2022-12-03 14:03:21,079:INFO:               scipy: 1.9.1
2022-12-03 14:03:21,079:INFO:              joblib: 1.2.0
2022-12-03 14:03:21,079:INFO:             sklearn: 1.1.3
2022-12-03 14:03:21,080:INFO:                pyod: 1.0.6
2022-12-03 14:03:21,080:INFO:            imblearn: 0.9.1
2022-12-03 14:03:21,080:INFO:   category_encoders: 2.5.1.post0
2022-12-03 14:03:21,080:INFO:            lightgbm: 3.3.3
2022-12-03 14:03:21,080:INFO:               numba: 0.55.1
2022-12-03 14:03:21,080:INFO:            requests: 2.28.1
2022-12-03 14:03:21,080:INFO:          matplotlib: 3.5.2
2022-12-03 14:03:21,080:INFO:          scikitplot: 0.3.7
2022-12-03 14:03:21,080:INFO:         yellowbrick: 1.5
2022-12-03 14:03:21,080:INFO:              plotly: 5.9.0
2022-12-03 14:03:21,081:INFO:             kaleido: 0.2.1
2022-12-03 14:03:21,081:INFO:         statsmodels: 0.13.2
2022-12-03 14:03:21,081:INFO:              sktime: 0.14.1
2022-12-03 14:03:21,081:INFO:               tbats: 1.1.1
2022-12-03 14:03:21,081:INFO:            pmdarima: 1.8.4
2022-12-03 14:03:21,081:INFO:              psutil: 5.9.0
2022-12-03 14:03:21,081:INFO:PyCaret optional dependencies:
2022-12-03 14:03:21,081:INFO:                shap: Not installed
2022-12-03 14:03:21,082:INFO:           interpret: Not installed
2022-12-03 14:03:21,082:INFO:                umap: Not installed
2022-12-03 14:03:21,082:INFO:    pandas_profiling: Not installed
2022-12-03 14:03:21,082:INFO:  explainerdashboard: Not installed
2022-12-03 14:03:21,082:INFO:             autoviz: Not installed
2022-12-03 14:03:21,082:INFO:           fairlearn: Not installed
2022-12-03 14:03:21,082:INFO:             xgboost: Not installed
2022-12-03 14:03:21,082:INFO:            catboost: Not installed
2022-12-03 14:03:21,082:INFO:              kmodes: Not installed
2022-12-03 14:03:21,082:INFO:             mlxtend: 0.21.0
2022-12-03 14:03:21,083:INFO:       statsforecast: Not installed
2022-12-03 14:03:21,083:INFO:        tune_sklearn: Not installed
2022-12-03 14:03:21,083:INFO:                 ray: Not installed
2022-12-03 14:03:21,083:INFO:            hyperopt: Not installed
2022-12-03 14:03:21,083:INFO:              optuna: Not installed
2022-12-03 14:03:21,083:INFO:               skopt: Not installed
2022-12-03 14:03:21,083:INFO:              mlflow: Not installed
2022-12-03 14:03:21,083:INFO:              gradio: Not installed
2022-12-03 14:03:21,083:INFO:             fastapi: Not installed
2022-12-03 14:03:21,083:INFO:             uvicorn: Not installed
2022-12-03 14:03:21,084:INFO:              m2cgen: Not installed
2022-12-03 14:03:21,084:INFO:           evidently: Not installed
2022-12-03 14:03:21,084:INFO:                nltk: 3.7
2022-12-03 14:03:21,084:INFO:            pyLDAvis: Not installed
2022-12-03 14:03:21,084:INFO:              gensim: 4.1.2
2022-12-03 14:03:21,084:INFO:               spacy: Not installed
2022-12-03 14:03:21,084:INFO:           wordcloud: 1.8.2.2
2022-12-03 14:03:21,084:INFO:            textblob: Not installed
2022-12-03 14:03:21,084:INFO:               fugue: Not installed
2022-12-03 14:03:21,084:INFO:           streamlit: Not installed
2022-12-03 14:03:21,085:INFO:             prophet: Not installed
2022-12-03 14:03:21,085:INFO:None
2022-12-03 14:03:21,089:INFO:Set Forecast Horizon.
2022-12-03 14:03:21,090:INFO:Set up Train-Test Splits.
2022-12-03 14:03:21,204:INFO:Finished creating preprocessing pipeline.
2022-12-03 14:03:21,207:INFO:Pipeline: ForecastingPipeline(steps=[('forecaster',
                            TransformedTargetForecaster(steps=[('model',
                                                                DummyForecaster())]))])
2022-12-03 14:03:21,207:INFO:Set up Seasonal Period.
2022-12-03 14:03:21,210:INFO:Set up whether Multiplicative components allowed.
2022-12-03 14:03:21,355:INFO:Creating final display dataframe.
2022-12-03 14:03:21,374:INFO:Setup Display Container:                     Description                         Value
0                    session_id                           123
1                        Target  Number of airline passengers
2                      Approach                    Univariate
3           Exogenous Variables                   Not Present
4           Original data shape                      (144, 1)
5        Transformed data shape                      (144, 1)
6   Transformed train set shape                      (141, 1)
7    Transformed test set shape                        (3, 1)
8      Rows with missing values                          0.0%
9                Fold Generator       ExpandingWindowSplitter
10                  Fold Number                             5
11  Enforce Prediction Interval                         False
12    Seasonal Period(s) Tested                            12
13          Seasonality Present                          True
14       Seasonalities Detected                          [12]
15          Primary Seasonality                            12
16     Target Strictly Positive                          True
17           Target White Noise                            No
18                Recommended d                             1
19       Recommended Seasonal D                             1
20                   Preprocess                         False
21                     CPU Jobs                            -1
22                      Use GPU                         False
23               Log Experiment                         False
24              Experiment Name               ts-default-name
25                          USI                          d112
2022-12-03 14:03:21,391:INFO:Engine successfully changes for model 'auto_arima' to 'pmdarima'.
2022-12-03 14:03:21,470:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:21,471:INFO:Engine for model 'lr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,471:INFO:Engine for model 'en_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,472:INFO:Engine for model 'ridge_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,473:INFO:Engine for model 'lasso_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,473:INFO:Engine for model 'lar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,474:INFO:Engine for model 'llar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,475:INFO:Engine for model 'br_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,476:INFO:Engine for model 'huber_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,476:INFO:Engine for model 'par_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,481:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,484:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,485:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,486:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,487:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,487:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,488:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,489:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,489:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,489:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,489:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,490:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,490:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,490:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,499:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:21,499:INFO:Engine for model 'lr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,500:INFO:Engine for model 'en_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,500:INFO:Engine for model 'ridge_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,501:INFO:Engine for model 'lasso_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,502:INFO:Engine for model 'lar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,502:INFO:Engine for model 'llar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,503:INFO:Engine for model 'br_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,503:INFO:Engine for model 'huber_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,504:INFO:Engine for model 'par_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,508:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,511:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,511:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,513:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,514:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,514:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,515:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,516:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,516:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,516:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,516:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,517:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,517:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,517:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,517:INFO:Engine successfully changes for model 'lr_cds_dt' to 'sklearn'.
2022-12-03 14:03:21,524:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:21,524:INFO:Engine for model 'en_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,525:INFO:Engine for model 'ridge_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,525:INFO:Engine for model 'lasso_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,526:INFO:Engine for model 'lar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,527:INFO:Engine for model 'llar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,527:INFO:Engine for model 'br_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,528:INFO:Engine for model 'huber_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,529:INFO:Engine for model 'par_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,532:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,535:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,536:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,536:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,536:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,537:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,538:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,538:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,538:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,539:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,539:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,540:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,540:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,540:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,547:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:21,547:INFO:Engine for model 'en_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,548:INFO:Engine for model 'ridge_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,548:INFO:Engine for model 'lasso_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,549:INFO:Engine for model 'lar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,550:INFO:Engine for model 'llar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,550:INFO:Engine for model 'br_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,551:INFO:Engine for model 'huber_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,551:INFO:Engine for model 'par_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,555:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,558:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,558:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,559:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,560:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,560:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,561:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,562:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,562:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,562:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,562:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,563:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,563:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,563:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,564:INFO:Engine successfully changes for model 'en_cds_dt' to 'sklearn'.
2022-12-03 14:03:21,570:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:21,572:INFO:Engine for model 'ridge_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,573:INFO:Engine for model 'lasso_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,573:INFO:Engine for model 'lar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,574:INFO:Engine for model 'llar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,575:INFO:Engine for model 'br_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,576:INFO:Engine for model 'huber_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,576:INFO:Engine for model 'par_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,580:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,583:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,584:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,584:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,585:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,586:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,586:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,587:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,587:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,587:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,587:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,588:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,588:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,588:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,595:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:21,596:INFO:Engine for model 'ridge_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,597:INFO:Engine for model 'lasso_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,597:INFO:Engine for model 'lar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,598:INFO:Engine for model 'llar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,598:INFO:Engine for model 'br_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,599:INFO:Engine for model 'huber_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,600:INFO:Engine for model 'par_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,603:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,606:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,606:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,607:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,608:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,609:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,610:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,611:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,611:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,611:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,611:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,612:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,613:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,613:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,613:INFO:Engine successfully changes for model 'ridge_cds_dt' to 'sklearn'.
2022-12-03 14:03:21,622:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:21,624:INFO:Engine for model 'lasso_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,625:INFO:Engine for model 'lar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,625:INFO:Engine for model 'llar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,626:INFO:Engine for model 'br_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,626:INFO:Engine for model 'huber_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,627:INFO:Engine for model 'par_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,631:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,634:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,635:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,636:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,637:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,637:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,638:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,639:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,639:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,639:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,639:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,643:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,644:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,644:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,652:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:21,654:INFO:Engine for model 'lasso_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,654:INFO:Engine for model 'lar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,655:INFO:Engine for model 'llar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,655:INFO:Engine for model 'br_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,656:INFO:Engine for model 'huber_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,657:INFO:Engine for model 'par_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,661:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,667:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,668:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,669:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,669:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,670:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,671:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,672:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,672:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,672:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,672:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,673:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,673:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,673:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,674:INFO:Engine successfully changes for model 'lasso_cds_dt' to 'sklearn'.
2022-12-03 14:03:21,683:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:21,708:INFO:Engine for model 'lar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,708:INFO:Engine for model 'llar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,709:INFO:Engine for model 'br_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,710:INFO:Engine for model 'huber_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,710:INFO:Engine for model 'par_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,716:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,719:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,720:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,721:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,722:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,723:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,723:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,724:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,724:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,724:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,724:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,725:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,725:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,725:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,766:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:21,768:INFO:Engine for model 'lar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,769:INFO:Engine for model 'llar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,770:INFO:Engine for model 'br_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,770:INFO:Engine for model 'huber_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,771:INFO:Engine for model 'par_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,774:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,821:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,822:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,823:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,823:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,824:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,825:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,826:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,826:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,826:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,826:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,827:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,827:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,827:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,828:INFO:Engine successfully changes for model 'lar_cds_dt' to 'sklearn'.
2022-12-03 14:03:21,836:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:21,838:INFO:Engine for model 'llar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,839:INFO:Engine for model 'br_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,840:INFO:Engine for model 'huber_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,840:INFO:Engine for model 'par_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,844:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,849:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,851:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,852:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,852:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,871:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,872:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,872:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,872:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,872:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,872:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,873:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,873:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,873:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,898:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:21,901:INFO:Engine for model 'llar_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,902:INFO:Engine for model 'br_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,903:INFO:Engine for model 'huber_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,903:INFO:Engine for model 'par_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,907:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,910:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,910:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,911:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,912:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,913:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,914:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,914:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,914:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,914:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,914:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,915:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,915:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,915:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,916:INFO:Engine successfully changes for model 'llar_cds_dt' to 'sklearn'.
2022-12-03 14:03:21,921:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:21,963:INFO:Engine for model 'br_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,963:INFO:Engine for model 'huber_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,964:INFO:Engine for model 'par_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,967:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,970:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,971:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,972:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,972:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,973:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,973:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,974:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,974:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,974:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,974:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,975:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,975:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,975:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:21,981:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:21,984:INFO:Engine for model 'br_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,985:INFO:Engine for model 'huber_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,985:INFO:Engine for model 'par_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,989:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,993:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,993:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,994:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:21,995:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,031:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,032:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,032:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,033:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,033:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,033:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,034:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,034:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,034:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,034:INFO:Engine successfully changes for model 'br_cds_dt' to 'sklearn'.
2022-12-03 14:03:22,040:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,044:INFO:Engine for model 'huber_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,045:INFO:Engine for model 'par_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,049:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,051:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,052:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,052:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,053:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,053:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,054:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,054:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,055:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,055:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,055:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,055:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,056:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,056:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,061:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,066:INFO:Engine for model 'huber_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,067:INFO:Engine for model 'par_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,079:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,098:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,098:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,099:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,099:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,100:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,100:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,101:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,101:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,101:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,101:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,102:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,102:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,102:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,102:INFO:Engine successfully changes for model 'huber_cds_dt' to 'sklearn'.
2022-12-03 14:03:22,107:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,111:INFO:Engine for model 'par_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,115:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,118:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,119:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,119:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,153:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,154:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,154:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,155:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,155:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,155:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,155:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,156:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,156:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,156:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,163:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,167:INFO:Engine for model 'par_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,170:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,173:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,174:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,174:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,175:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,176:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,176:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,177:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,177:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,177:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,177:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,178:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,178:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,179:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,179:INFO:Engine successfully changes for model 'par_cds_dt' to 'sklearn'.
2022-12-03 14:03:22,185:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,192:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,195:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,196:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,196:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,197:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,198:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,199:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,199:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,199:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,200:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,200:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,201:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,201:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,201:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,207:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,215:INFO:Engine for model 'omp_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,219:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,220:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,221:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,221:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,222:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,223:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,223:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,223:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,224:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,224:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,225:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,225:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,225:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,225:INFO:Engine successfully changes for model 'omp_cds_dt' to 'sklearn'.
2022-12-03 14:03:22,232:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,242:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,243:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,244:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,245:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,245:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,246:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,247:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,247:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,247:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,247:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,248:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,248:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,249:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,256:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,268:INFO:Engine for model 'knn_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,269:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,270:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,271:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,271:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,272:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,273:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,273:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,273:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,273:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,275:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,275:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,275:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,275:INFO:Engine successfully changes for model 'knn_cds_dt' to 'sklearn'.
2022-12-03 14:03:22,282:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,293:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,294:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,298:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,299:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,299:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,300:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,300:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,300:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,300:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,301:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,301:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,301:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,308:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,319:INFO:Engine for model 'dt_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,320:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,321:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,325:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,326:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,326:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,327:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,327:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,328:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,330:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,330:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,330:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,330:INFO:Engine successfully changes for model 'dt_cds_dt' to 'sklearn'.
2022-12-03 14:03:22,336:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,349:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,350:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,351:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,351:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,352:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,352:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,352:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,352:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,353:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,354:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,354:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,363:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,375:INFO:Engine for model 'rf_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,376:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,377:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,377:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,378:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,379:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,379:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,379:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,380:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,380:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,380:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,380:INFO:Engine successfully changes for model 'rf_cds_dt' to 'sklearn'.
2022-12-03 14:03:22,387:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,400:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,401:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,402:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,403:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,403:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,403:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,403:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,404:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,404:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,404:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,412:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,423:INFO:Engine for model 'et_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,424:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,424:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,425:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,426:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,426:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,426:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,427:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,427:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,427:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,428:INFO:Engine successfully changes for model 'et_cds_dt' to 'sklearn'.
2022-12-03 14:03:22,445:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,457:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,457:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,458:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,458:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,458:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,458:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,459:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,459:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,460:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,466:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,496:INFO:Engine for model 'gbr_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,497:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,498:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,498:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,498:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,498:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,499:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,499:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,499:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,499:INFO:Engine successfully changes for model 'gbr_cds_dt' to 'sklearn'.
2022-12-03 14:03:22,506:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,519:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,520:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,520:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,520:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,520:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,521:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,521:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,521:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,536:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,549:INFO:Engine for model 'ada_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,550:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,550:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,550:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,551:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,551:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,552:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,552:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,552:INFO:Engine successfully changes for model 'ada_cds_dt' to 'sklearn'.
2022-12-03 14:03:22,558:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,581:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,581:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,582:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,582:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,582:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,583:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,583:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,589:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,604:INFO:Engine for model 'xgboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,604:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,604:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,604:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,605:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,605:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,605:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,606:INFO:Engine successfully changes for model 'xgboost_cds_dt' to 'sklearn'.
2022-12-03 14:03:22,620:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,634:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,634:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,634:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,635:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,635:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,635:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,641:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,668:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,668:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,668:INFO:Engine for model 'lightgbm_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,669:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,669:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,669:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,669:INFO:Engine successfully changes for model 'lightgbm_cds_dt' to 'sklearn'.
2022-12-03 14:03:22,676:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,689:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,689:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,690:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,690:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,690:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,708:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,721:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,721:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,722:INFO:Engine for model 'catboost_cds_dt' has not been set explicitly, hence returning None.
2022-12-03 14:03:22,722:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,722:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,723:INFO:Engine successfully changes for model 'catboost_cds_dt' to 'sklearn'.
2022-12-03 14:03:22,729:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,754:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,754:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,755:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,755:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,761:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,775:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,775:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,776:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,776:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,787:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,800:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,800:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,801:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,801:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,810:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:03:22,826:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,827:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,827:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,828:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-03 14:03:22,884:INFO:setup() successfully completed in 1.79s...............
2022-12-03 14:03:22,910:INFO:Initializing compare_models()
2022-12-03 14:03:22,910:INFO:compare_models(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, include=None, fold=None, round=4, cross_validation=True, sort=MASE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'MASE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.time_series.forecasting.oop.TSForecastingExperiment'>}, exclude=None)
2022-12-03 14:03:22,910:INFO:Checking exceptions
2022-12-03 14:03:22,914:INFO:Preparing display monitor
2022-12-03 14:03:23,026:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:709: UserWarning:

Unsupported estimator `ensemble_forecaster` for method `compare_models()`, removing from model_library


2022-12-03 14:03:23,027:INFO:Initializing Naive Forecaster
2022-12-03 14:03:23,027:INFO:Total runtime is 0.0 minutes
2022-12-03 14:03:23,033:INFO:SubProcess create_model() called ==================================
2022-12-03 14:03:23,033:INFO:Initializing create_model()
2022-12-03 14:03:23,033:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=naive, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:03:23,033:INFO:Checking exceptions
2022-12-03 14:03:23,034:INFO:Importing libraries
2022-12-03 14:03:23,034:INFO:Copying training dataset
2022-12-03 14:03:23,041:INFO:Defining folds
2022-12-03 14:03:23,041:INFO:Declaring metric variables
2022-12-03 14:03:23,048:INFO:Importing untrained model
2022-12-03 14:03:23,070:INFO:Naive Forecaster Imported successfully
2022-12-03 14:03:23,085:INFO:Starting cross validation
2022-12-03 14:03:23,086:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:03:36,897:INFO:Calculating mean and std
2022-12-03 14:03:36,901:INFO:Creating metrics dataframe
2022-12-03 14:03:36,909:INFO:Uploading results into container
2022-12-03 14:03:36,910:INFO:Uploading model into container now
2022-12-03 14:03:36,910:INFO:master_model_container: 1
2022-12-03 14:03:36,911:INFO:display_container: 2
2022-12-03 14:03:36,912:INFO:NaiveForecaster(sp=1, strategy='last', window_length=None)
2022-12-03 14:03:36,912:INFO:create_model() successfully completed......................................
2022-12-03 14:03:37,100:INFO:SubProcess create_model() end ==================================
2022-12-03 14:03:37,100:INFO:Creating metrics dataframe
2022-12-03 14:03:37,121:INFO:Initializing Grand Means Forecaster
2022-12-03 14:03:37,121:INFO:Total runtime is 0.23490508000055949 minutes
2022-12-03 14:03:37,136:INFO:SubProcess create_model() called ==================================
2022-12-03 14:03:37,136:INFO:Initializing create_model()
2022-12-03 14:03:37,136:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=grand_means, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:03:37,137:INFO:Checking exceptions
2022-12-03 14:03:37,137:INFO:Importing libraries
2022-12-03 14:03:37,137:INFO:Copying training dataset
2022-12-03 14:03:37,146:INFO:Defining folds
2022-12-03 14:03:37,147:INFO:Declaring metric variables
2022-12-03 14:03:37,154:INFO:Importing untrained model
2022-12-03 14:03:37,162:INFO:Grand Means Forecaster Imported successfully
2022-12-03 14:03:37,184:INFO:Starting cross validation
2022-12-03 14:03:37,185:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:03:37,385:INFO:Calculating mean and std
2022-12-03 14:03:37,389:INFO:Creating metrics dataframe
2022-12-03 14:03:37,397:INFO:Uploading results into container
2022-12-03 14:03:37,398:INFO:Uploading model into container now
2022-12-03 14:03:37,398:INFO:master_model_container: 2
2022-12-03 14:03:37,399:INFO:display_container: 2
2022-12-03 14:03:37,399:INFO:NaiveForecaster(sp=1, strategy='mean', window_length=None)
2022-12-03 14:03:37,399:INFO:create_model() successfully completed......................................
2022-12-03 14:03:37,554:INFO:SubProcess create_model() end ==================================
2022-12-03 14:03:37,554:INFO:Creating metrics dataframe
2022-12-03 14:03:37,582:INFO:Initializing Seasonal Naive Forecaster
2022-12-03 14:03:37,583:INFO:Total runtime is 0.24260117212931315 minutes
2022-12-03 14:03:37,590:INFO:SubProcess create_model() called ==================================
2022-12-03 14:03:37,590:INFO:Initializing create_model()
2022-12-03 14:03:37,590:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=snaive, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:03:37,591:INFO:Checking exceptions
2022-12-03 14:03:37,591:INFO:Importing libraries
2022-12-03 14:03:37,591:INFO:Copying training dataset
2022-12-03 14:03:37,601:INFO:Defining folds
2022-12-03 14:03:37,601:INFO:Declaring metric variables
2022-12-03 14:03:37,609:INFO:Importing untrained model
2022-12-03 14:03:37,615:INFO:Seasonal Naive Forecaster Imported successfully
2022-12-03 14:03:37,647:INFO:Starting cross validation
2022-12-03 14:03:37,648:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:03:37,856:INFO:Calculating mean and std
2022-12-03 14:03:37,859:INFO:Creating metrics dataframe
2022-12-03 14:03:37,868:INFO:Uploading results into container
2022-12-03 14:03:37,868:INFO:Uploading model into container now
2022-12-03 14:03:37,869:INFO:master_model_container: 3
2022-12-03 14:03:37,869:INFO:display_container: 2
2022-12-03 14:03:37,869:INFO:NaiveForecaster(sp=12, strategy='last', window_length=None)
2022-12-03 14:03:37,870:INFO:create_model() successfully completed......................................
2022-12-03 14:03:38,020:INFO:SubProcess create_model() end ==================================
2022-12-03 14:03:38,020:INFO:Creating metrics dataframe
2022-12-03 14:03:38,052:INFO:Initializing Polynomial Trend Forecaster
2022-12-03 14:03:38,052:INFO:Total runtime is 0.2504302422205607 minutes
2022-12-03 14:03:38,059:INFO:SubProcess create_model() called ==================================
2022-12-03 14:03:38,059:INFO:Initializing create_model()
2022-12-03 14:03:38,060:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=polytrend, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:03:38,060:INFO:Checking exceptions
2022-12-03 14:03:38,060:INFO:Importing libraries
2022-12-03 14:03:38,060:INFO:Copying training dataset
2022-12-03 14:03:38,083:INFO:Defining folds
2022-12-03 14:03:38,083:INFO:Declaring metric variables
2022-12-03 14:03:38,091:INFO:Importing untrained model
2022-12-03 14:03:38,100:INFO:Polynomial Trend Forecaster Imported successfully
2022-12-03 14:03:38,144:INFO:Starting cross validation
2022-12-03 14:03:38,146:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:03:38,333:INFO:Calculating mean and std
2022-12-03 14:03:38,337:INFO:Creating metrics dataframe
2022-12-03 14:03:38,345:INFO:Uploading results into container
2022-12-03 14:03:38,345:INFO:Uploading model into container now
2022-12-03 14:03:38,346:INFO:master_model_container: 4
2022-12-03 14:03:38,347:INFO:display_container: 2
2022-12-03 14:03:38,347:INFO:PolynomialTrendForecaster(degree=1, regressor=None, with_intercept=True)
2022-12-03 14:03:38,347:INFO:create_model() successfully completed......................................
2022-12-03 14:03:38,498:INFO:SubProcess create_model() end ==================================
2022-12-03 14:03:38,499:INFO:Creating metrics dataframe
2022-12-03 14:03:38,524:INFO:Initializing ARIMA
2022-12-03 14:03:38,524:INFO:Total runtime is 0.25829254388809203 minutes
2022-12-03 14:03:38,531:INFO:SubProcess create_model() called ==================================
2022-12-03 14:03:38,531:INFO:Initializing create_model()
2022-12-03 14:03:38,531:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=arima, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:03:38,531:INFO:Checking exceptions
2022-12-03 14:03:38,532:INFO:Importing libraries
2022-12-03 14:03:38,532:INFO:Copying training dataset
2022-12-03 14:03:38,557:INFO:Defining folds
2022-12-03 14:03:38,557:INFO:Declaring metric variables
2022-12-03 14:03:38,566:INFO:Importing untrained model
2022-12-03 14:03:38,575:INFO:ARIMA Imported successfully
2022-12-03 14:03:38,602:INFO:Starting cross validation
2022-12-03 14:03:38,604:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:03:41,658:INFO:Calculating mean and std
2022-12-03 14:03:41,661:INFO:Creating metrics dataframe
2022-12-03 14:03:41,670:INFO:Uploading results into container
2022-12-03 14:03:41,670:INFO:Uploading model into container now
2022-12-03 14:03:41,671:INFO:master_model_container: 5
2022-12-03 14:03:41,671:INFO:display_container: 2
2022-12-03 14:03:41,673:INFO:ARIMA(concentrate_scale=False, enforce_invertibility=True,
      enforce_stationarity=True, hamilton_representation=False, maxiter=50,
      measurement_error=False, method='lbfgs', mle_regression=True,
      order=(1, 0, 0), out_of_sample_size=0, scoring='mse', scoring_args=None,
      seasonal_order=(0, 1, 0, 12), simple_differencing=False,
      start_params=None, suppress_warnings=False, time_varying_regression=False,
      trend=None, with_intercept=True)
2022-12-03 14:03:41,673:INFO:create_model() successfully completed......................................
2022-12-03 14:03:41,852:INFO:SubProcess create_model() end ==================================
2022-12-03 14:03:41,852:INFO:Creating metrics dataframe
2022-12-03 14:03:41,887:INFO:Initializing Auto ARIMA
2022-12-03 14:03:41,888:INFO:Total runtime is 0.3143592596054077 minutes
2022-12-03 14:03:41,896:INFO:SubProcess create_model() called ==================================
2022-12-03 14:03:41,897:INFO:Initializing create_model()
2022-12-03 14:03:41,897:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=auto_arima, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:03:41,897:INFO:Checking exceptions
2022-12-03 14:03:41,897:INFO:Importing libraries
2022-12-03 14:03:41,898:INFO:Copying training dataset
2022-12-03 14:03:41,907:INFO:Defining folds
2022-12-03 14:03:41,907:INFO:Declaring metric variables
2022-12-03 14:03:41,915:INFO:Importing untrained model
2022-12-03 14:03:41,925:INFO:Auto ARIMA Imported successfully
2022-12-03 14:03:41,951:INFO:Starting cross validation
2022-12-03 14:03:41,952:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:02,150:INFO:Calculating mean and std
2022-12-03 14:06:02,154:INFO:Creating metrics dataframe
2022-12-03 14:06:02,162:INFO:Uploading results into container
2022-12-03 14:06:02,162:INFO:Uploading model into container now
2022-12-03 14:06:02,163:INFO:master_model_container: 6
2022-12-03 14:06:02,163:INFO:display_container: 2
2022-12-03 14:06:02,165:INFO:AutoARIMA(D=None, alpha=0.05, concentrate_scale=False, d=None,
          enforce_invertibility=True, enforce_stationarity=True,
          error_action='warn', hamilton_representation=False,
          information_criterion='aic', max_D=1, max_P=2, max_Q=2, max_d=2,
          max_order=5, max_p=5, max_q=5, maxiter=50, measurement_error=False,
          method='lbfgs', mle_regression=True, n_fits=10, n_jobs=1,
          offset_test_args=None, out_of_sample_size=0, random=False,
          random_state=123, scoring='mse', scoring_args=None, seasonal=True,
          seasonal_test='ocsb', ...)
2022-12-03 14:06:02,165:INFO:create_model() successfully completed......................................
2022-12-03 14:06:02,338:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:02,338:INFO:Creating metrics dataframe
2022-12-03 14:06:02,373:INFO:Initializing Exponential Smoothing
2022-12-03 14:06:02,373:INFO:Total runtime is 2.655780871709188 minutes
2022-12-03 14:06:02,379:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:02,380:INFO:Initializing create_model()
2022-12-03 14:06:02,380:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=exp_smooth, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:02,380:INFO:Checking exceptions
2022-12-03 14:06:02,381:INFO:Importing libraries
2022-12-03 14:06:02,381:INFO:Copying training dataset
2022-12-03 14:06:02,390:INFO:Defining folds
2022-12-03 14:06:02,390:INFO:Declaring metric variables
2022-12-03 14:06:02,397:INFO:Importing untrained model
2022-12-03 14:06:02,413:INFO:Exponential Smoothing Imported successfully
2022-12-03 14:06:02,428:INFO:Starting cross validation
2022-12-03 14:06:02,429:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:03,722:INFO:Calculating mean and std
2022-12-03 14:06:03,726:INFO:Creating metrics dataframe
2022-12-03 14:06:03,733:INFO:Uploading results into container
2022-12-03 14:06:03,733:INFO:Uploading model into container now
2022-12-03 14:06:03,734:INFO:master_model_container: 7
2022-12-03 14:06:03,735:INFO:display_container: 2
2022-12-03 14:06:03,736:INFO:ExponentialSmoothing(damped_trend=False, damping_trend=None, initial_level=None,
                     initial_seasonal=None, initial_trend=None,
                     initialization_method='estimated', method=None,
                     minimize_kwargs=None, optimized=True, random_state=None,
                     remove_bias=False, seasonal='mul', smoothing_level=None,
                     smoothing_seasonal=None, smoothing_trend=None, sp=12,
                     start_params=None, trend='add', use_boxcox=None,
                     use_brute=True)
2022-12-03 14:06:03,736:INFO:create_model() successfully completed......................................
2022-12-03 14:06:03,961:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:03,961:INFO:Creating metrics dataframe
2022-12-03 14:06:04,000:INFO:Initializing Croston
2022-12-03 14:06:04,000:INFO:Total runtime is 2.6828916947046917 minutes
2022-12-03 14:06:04,009:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:04,009:INFO:Initializing create_model()
2022-12-03 14:06:04,010:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=croston, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:04,010:INFO:Checking exceptions
2022-12-03 14:06:04,010:INFO:Importing libraries
2022-12-03 14:06:04,010:INFO:Copying training dataset
2022-12-03 14:06:04,029:INFO:Defining folds
2022-12-03 14:06:04,029:INFO:Declaring metric variables
2022-12-03 14:06:04,037:INFO:Importing untrained model
2022-12-03 14:06:04,044:INFO:Croston Imported successfully
2022-12-03 14:06:04,066:INFO:Starting cross validation
2022-12-03 14:06:04,068:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:04,254:INFO:Calculating mean and std
2022-12-03 14:06:04,257:INFO:Creating metrics dataframe
2022-12-03 14:06:04,267:INFO:Uploading results into container
2022-12-03 14:06:04,267:INFO:Uploading model into container now
2022-12-03 14:06:04,268:INFO:master_model_container: 8
2022-12-03 14:06:04,268:INFO:display_container: 2
2022-12-03 14:06:04,268:INFO:Croston(smoothing=0.1)
2022-12-03 14:06:04,269:INFO:create_model() successfully completed......................................
2022-12-03 14:06:04,457:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:04,457:INFO:Creating metrics dataframe
2022-12-03 14:06:04,492:INFO:Initializing ETS
2022-12-03 14:06:04,492:INFO:Total runtime is 2.691086447238922 minutes
2022-12-03 14:06:04,506:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:04,506:INFO:Initializing create_model()
2022-12-03 14:06:04,506:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=ets, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:04,506:INFO:Checking exceptions
2022-12-03 14:06:04,506:INFO:Importing libraries
2022-12-03 14:06:04,506:INFO:Copying training dataset
2022-12-03 14:06:04,515:INFO:Defining folds
2022-12-03 14:06:04,516:INFO:Declaring metric variables
2022-12-03 14:06:04,521:INFO:Importing untrained model
2022-12-03 14:06:04,531:INFO:ETS Imported successfully
2022-12-03 14:06:04,550:INFO:Starting cross validation
2022-12-03 14:06:04,552:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:05,776:INFO:Calculating mean and std
2022-12-03 14:06:05,779:INFO:Creating metrics dataframe
2022-12-03 14:06:05,787:INFO:Uploading results into container
2022-12-03 14:06:05,788:INFO:Uploading model into container now
2022-12-03 14:06:05,788:INFO:master_model_container: 9
2022-12-03 14:06:05,789:INFO:display_container: 2
2022-12-03 14:06:05,790:INFO:AutoETS(additive_only=False, allow_multiplicative_trend=False, auto=False,
        bounds=None, callback=None, damped_trend=False, dates=None, disp=False,
        error='add', freq=None, full_output=True, ignore_inf_ic=True,
        information_criterion='aic', initial_level=None, initial_seasonal=None,
        initial_trend=None, initialization_method='estimated', maxiter=1000,
        missing='none', n_jobs=None, random_state=None, restrict=True,
        return_params=False, seasonal='mul', sp=12, start_params=None,
        trend='add')
2022-12-03 14:06:05,790:INFO:create_model() successfully completed......................................
2022-12-03 14:06:05,947:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:05,947:INFO:Creating metrics dataframe
2022-12-03 14:06:05,997:INFO:Initializing Theta Forecaster
2022-12-03 14:06:05,997:INFO:Total runtime is 2.716169369220734 minutes
2022-12-03 14:06:06,004:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:06,004:INFO:Initializing create_model()
2022-12-03 14:06:06,005:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=theta, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:06,005:INFO:Checking exceptions
2022-12-03 14:06:06,005:INFO:Importing libraries
2022-12-03 14:06:06,005:INFO:Copying training dataset
2022-12-03 14:06:06,014:INFO:Defining folds
2022-12-03 14:06:06,015:INFO:Declaring metric variables
2022-12-03 14:06:06,022:INFO:Importing untrained model
2022-12-03 14:06:06,031:INFO:Theta Forecaster Imported successfully
2022-12-03 14:06:06,049:INFO:Starting cross validation
2022-12-03 14:06:06,051:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:06,378:INFO:Calculating mean and std
2022-12-03 14:06:06,381:INFO:Creating metrics dataframe
2022-12-03 14:06:06,390:INFO:Uploading results into container
2022-12-03 14:06:06,390:INFO:Uploading model into container now
2022-12-03 14:06:06,391:INFO:master_model_container: 10
2022-12-03 14:06:06,391:INFO:display_container: 2
2022-12-03 14:06:06,392:INFO:ThetaForecaster(deseasonalize=True, initial_level=None, sp=12)
2022-12-03 14:06:06,392:INFO:create_model() successfully completed......................................
2022-12-03 14:06:06,557:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:06,557:INFO:Creating metrics dataframe
2022-12-03 14:06:06,588:INFO:Initializing Linear w/ Cond. Deseasonalize & Detrending
2022-12-03 14:06:06,588:INFO:Total runtime is 2.7260263323783875 minutes
2022-12-03 14:06:06,605:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:06,606:INFO:Initializing create_model()
2022-12-03 14:06:06,606:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=lr_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:06,606:INFO:Checking exceptions
2022-12-03 14:06:06,606:INFO:Importing libraries
2022-12-03 14:06:06,606:INFO:Copying training dataset
2022-12-03 14:06:06,616:INFO:Defining folds
2022-12-03 14:06:06,616:INFO:Declaring metric variables
2022-12-03 14:06:06,624:INFO:Importing untrained model
2022-12-03 14:06:06,633:INFO:Linear w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:06:06,671:INFO:Starting cross validation
2022-12-03 14:06:06,672:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:07,980:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 14:06:07,980:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 14:06:07,980:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 14:06:07,980:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 14:06:08,005:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 14:06:08,005:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 14:06:08,006:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 14:06:08,006:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 14:06:08,067:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 14:06:08,067:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 14:06:08,067:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 14:06:08,067:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 14:06:08,074:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 14:06:08,074:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 14:06:08,074:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 14:06:08,074:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-03 14:06:08,114:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:06:08,144:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:06:08,200:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:06:08,202:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-03 14:06:09,406:INFO:Calculating mean and std
2022-12-03 14:06:09,410:INFO:Creating metrics dataframe
2022-12-03 14:06:09,418:INFO:Uploading results into container
2022-12-03 14:06:09,418:INFO:Uploading model into container now
2022-12-03 14:06:09,419:INFO:master_model_container: 11
2022-12-03 14:06:09,420:INFO:display_container: 2
2022-12-03 14:06:09,422:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=LinearRegression(copy_X=True, fit_intercept=True,
                                               n_jobs=-1,
                                               normalize='deprecated',
                                               positive=False),
                    sp=12, window_length=12)
2022-12-03 14:06:09,423:INFO:create_model() successfully completed......................................
2022-12-03 14:06:09,570:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:09,571:INFO:Creating metrics dataframe
2022-12-03 14:06:09,603:INFO:Initializing Elastic Net w/ Cond. Deseasonalize & Detrending
2022-12-03 14:06:09,604:INFO:Total runtime is 2.776291902860006 minutes
2022-12-03 14:06:09,621:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:09,621:INFO:Initializing create_model()
2022-12-03 14:06:09,621:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=en_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:09,622:INFO:Checking exceptions
2022-12-03 14:06:09,622:INFO:Importing libraries
2022-12-03 14:06:09,622:INFO:Copying training dataset
2022-12-03 14:06:09,631:INFO:Defining folds
2022-12-03 14:06:09,631:INFO:Declaring metric variables
2022-12-03 14:06:09,639:INFO:Importing untrained model
2022-12-03 14:06:09,648:INFO:Elastic Net w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:06:09,706:INFO:Starting cross validation
2022-12-03 14:06:09,708:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:11,009:INFO:Calculating mean and std
2022-12-03 14:06:11,012:INFO:Creating metrics dataframe
2022-12-03 14:06:11,021:INFO:Uploading results into container
2022-12-03 14:06:11,021:INFO:Uploading model into container now
2022-12-03 14:06:11,022:INFO:master_model_container: 12
2022-12-03 14:06:11,022:INFO:display_container: 2
2022-12-03 14:06:11,026:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=ElasticNet(alpha=1.0, copy_X=True,
                                         fit_intercept=True, l1_ratio=0.5,
                                         max_iter=1000, normalize='deprecated',
                                         positive=False, precompute=False,
                                         random_state=123, selection='cyclic',
                                         tol=0.0001, warm_start=False),
                    sp=12, window_length=12)
2022-12-03 14:06:11,027:INFO:create_model() successfully completed......................................
2022-12-03 14:06:11,213:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:11,213:INFO:Creating metrics dataframe
2022-12-03 14:06:11,248:INFO:Initializing Ridge w/ Cond. Deseasonalize & Detrending
2022-12-03 14:06:11,249:INFO:Total runtime is 2.803701941172282 minutes
2022-12-03 14:06:11,256:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:11,256:INFO:Initializing create_model()
2022-12-03 14:06:11,257:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=ridge_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:11,257:INFO:Checking exceptions
2022-12-03 14:06:11,257:INFO:Importing libraries
2022-12-03 14:06:11,257:INFO:Copying training dataset
2022-12-03 14:06:11,265:INFO:Defining folds
2022-12-03 14:06:11,265:INFO:Declaring metric variables
2022-12-03 14:06:11,273:INFO:Importing untrained model
2022-12-03 14:06:11,288:INFO:Ridge w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:06:11,304:INFO:Starting cross validation
2022-12-03 14:06:11,306:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:12,561:INFO:Calculating mean and std
2022-12-03 14:06:12,565:INFO:Creating metrics dataframe
2022-12-03 14:06:12,573:INFO:Uploading results into container
2022-12-03 14:06:12,574:INFO:Uploading model into container now
2022-12-03 14:06:12,575:INFO:master_model_container: 13
2022-12-03 14:06:12,575:INFO:display_container: 2
2022-12-03 14:06:12,579:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=Ridge(alpha=1.0, copy_X=True, fit_intercept=True,
                                    max_iter=None, normalize='deprecated',
                                    positive=False, random_state=123,
                                    solver='auto', tol=0.001),
                    sp=12, window_length=12)
2022-12-03 14:06:12,579:INFO:create_model() successfully completed......................................
2022-12-03 14:06:12,753:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:12,754:INFO:Creating metrics dataframe
2022-12-03 14:06:12,788:INFO:Initializing Lasso w/ Cond. Deseasonalize & Detrending
2022-12-03 14:06:12,788:INFO:Total runtime is 2.82935000260671 minutes
2022-12-03 14:06:12,794:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:12,795:INFO:Initializing create_model()
2022-12-03 14:06:12,795:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=lasso_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:12,795:INFO:Checking exceptions
2022-12-03 14:06:12,795:INFO:Importing libraries
2022-12-03 14:06:12,796:INFO:Copying training dataset
2022-12-03 14:06:12,805:INFO:Defining folds
2022-12-03 14:06:12,805:INFO:Declaring metric variables
2022-12-03 14:06:12,812:INFO:Importing untrained model
2022-12-03 14:06:12,822:INFO:Lasso w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:06:12,836:INFO:Starting cross validation
2022-12-03 14:06:12,838:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:14,525:INFO:Calculating mean and std
2022-12-03 14:06:14,529:INFO:Creating metrics dataframe
2022-12-03 14:06:14,537:INFO:Uploading results into container
2022-12-03 14:06:14,537:INFO:Uploading model into container now
2022-12-03 14:06:14,538:INFO:master_model_container: 14
2022-12-03 14:06:14,538:INFO:display_container: 2
2022-12-03 14:06:14,542:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=Lasso(alpha=1.0, copy_X=True, fit_intercept=True,
                                    max_iter=1000, normalize='deprecated',
                                    positive=False, precompute=False,
                                    random_state=123, selection='cyclic',
                                    tol=0.0001, warm_start=False),
                    sp=12, window_length=12)
2022-12-03 14:06:14,542:INFO:create_model() successfully completed......................................
2022-12-03 14:06:14,730:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:14,730:INFO:Creating metrics dataframe
2022-12-03 14:06:14,799:INFO:Initializing Least Angular Regressor w/ Cond. Deseasonalize & Detrending
2022-12-03 14:06:14,800:INFO:Total runtime is 2.862893637021383 minutes
2022-12-03 14:06:14,857:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:14,857:INFO:Initializing create_model()
2022-12-03 14:06:14,857:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=lar_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:14,858:INFO:Checking exceptions
2022-12-03 14:06:14,858:INFO:Importing libraries
2022-12-03 14:06:14,858:INFO:Copying training dataset
2022-12-03 14:06:14,868:INFO:Defining folds
2022-12-03 14:06:14,868:INFO:Declaring metric variables
2022-12-03 14:06:14,876:INFO:Importing untrained model
2022-12-03 14:06:14,884:INFO:Least Angular Regressor w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:06:14,947:INFO:Starting cross validation
2022-12-03 14:06:14,949:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:15,386:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:06:15,387:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:06:15,455:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:06:15,461:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:06:16,190:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:06:16,506:INFO:Calculating mean and std
2022-12-03 14:06:16,510:INFO:Creating metrics dataframe
2022-12-03 14:06:16,520:INFO:Uploading results into container
2022-12-03 14:06:16,520:INFO:Uploading model into container now
2022-12-03 14:06:16,521:INFO:master_model_container: 15
2022-12-03 14:06:16,521:INFO:display_container: 2
2022-12-03 14:06:16,525:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=Lars(copy_X=True, eps=2.220446049250313e-16,
                                   fit_intercept=True, fit_path=True,
                                   jitter=None, n_nonzero_coefs=500,
                                   normalize='deprecated', precompute='auto',
                                   random_state=123, verbose=False),
                    sp=12, window_length=12)
2022-12-03 14:06:16,525:INFO:create_model() successfully completed......................................
2022-12-03 14:06:16,677:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:16,677:INFO:Creating metrics dataframe
2022-12-03 14:06:16,720:INFO:Initializing Lasso Least Angular Regressor w/ Cond. Deseasonalize & Detrending
2022-12-03 14:06:16,721:INFO:Total runtime is 2.8949080149332684 minutes
2022-12-03 14:06:16,728:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:16,728:INFO:Initializing create_model()
2022-12-03 14:06:16,728:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=llar_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:16,729:INFO:Checking exceptions
2022-12-03 14:06:16,729:INFO:Importing libraries
2022-12-03 14:06:16,729:INFO:Copying training dataset
2022-12-03 14:06:16,738:INFO:Defining folds
2022-12-03 14:06:16,738:INFO:Declaring metric variables
2022-12-03 14:06:16,746:INFO:Importing untrained model
2022-12-03 14:06:16,757:INFO:Lasso Least Angular Regressor w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:06:16,771:INFO:Starting cross validation
2022-12-03 14:06:16,772:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:17,258:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 14:06:17,261:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 14:06:17,285:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 14:06:17,311:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 14:06:18,030:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 14:06:18,321:INFO:Calculating mean and std
2022-12-03 14:06:18,325:INFO:Creating metrics dataframe
2022-12-03 14:06:18,333:INFO:Uploading results into container
2022-12-03 14:06:18,333:INFO:Uploading model into container now
2022-12-03 14:06:18,334:INFO:master_model_container: 16
2022-12-03 14:06:18,334:INFO:display_container: 2
2022-12-03 14:06:18,338:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=LassoLars(alpha=1.0, copy_X=True,
                                        eps=2.220446049250313e-16,
                                        fit_intercept=True, fit_path=True,
                                        jitter=None, max_iter=500,
                                        normalize='deprecated', positive=False,
                                        precompute='auto', random_state=123,
                                        verbose=False),
                    sp=12, window_length=12)
2022-12-03 14:06:18,338:INFO:create_model() successfully completed......................................
2022-12-03 14:06:18,504:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:18,504:INFO:Creating metrics dataframe
2022-12-03 14:06:18,548:INFO:Initializing Bayesian Ridge w/ Cond. Deseasonalize & Detrending
2022-12-03 14:06:18,548:INFO:Total runtime is 2.925359912713369 minutes
2022-12-03 14:06:18,555:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:18,556:INFO:Initializing create_model()
2022-12-03 14:06:18,556:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=br_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:18,556:INFO:Checking exceptions
2022-12-03 14:06:18,556:INFO:Importing libraries
2022-12-03 14:06:18,557:INFO:Copying training dataset
2022-12-03 14:06:18,565:INFO:Defining folds
2022-12-03 14:06:18,565:INFO:Declaring metric variables
2022-12-03 14:06:18,571:INFO:Importing untrained model
2022-12-03 14:06:18,593:INFO:Bayesian Ridge w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:06:18,607:INFO:Starting cross validation
2022-12-03 14:06:18,609:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:20,088:INFO:Calculating mean and std
2022-12-03 14:06:20,091:INFO:Creating metrics dataframe
2022-12-03 14:06:20,100:INFO:Uploading results into container
2022-12-03 14:06:20,100:INFO:Uploading model into container now
2022-12-03 14:06:20,101:INFO:master_model_container: 17
2022-12-03 14:06:20,101:INFO:display_container: 2
2022-12-03 14:06:20,105:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=BayesianRidge(alpha_1=1e-06, alpha_2=1e-06,
                                            alpha_init=None,
                                            compute_score=False, copy_X=True,
                                            fit_intercept=True, lambda_1=1e-06,
                                            lambda_2=1e-06, lambda_init=None,
                                            n_iter=300, normalize='deprecated',
                                            tol=0.001, verbose=False),
                    sp=12, window_length=12)
2022-12-03 14:06:20,106:INFO:create_model() successfully completed......................................
2022-12-03 14:06:20,270:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:20,270:INFO:Creating metrics dataframe
2022-12-03 14:06:20,321:INFO:Initializing Huber w/ Cond. Deseasonalize & Detrending
2022-12-03 14:06:20,321:INFO:Total runtime is 2.954914200305939 minutes
2022-12-03 14:06:20,328:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:20,328:INFO:Initializing create_model()
2022-12-03 14:06:20,328:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=huber_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:20,328:INFO:Checking exceptions
2022-12-03 14:06:20,329:INFO:Importing libraries
2022-12-03 14:06:20,329:INFO:Copying training dataset
2022-12-03 14:06:20,337:INFO:Defining folds
2022-12-03 14:06:20,337:INFO:Declaring metric variables
2022-12-03 14:06:20,345:INFO:Importing untrained model
2022-12-03 14:06:20,368:INFO:Huber w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:06:20,384:INFO:Starting cross validation
2022-12-03 14:06:20,386:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:21,949:INFO:Calculating mean and std
2022-12-03 14:06:21,953:INFO:Creating metrics dataframe
2022-12-03 14:06:21,961:INFO:Uploading results into container
2022-12-03 14:06:21,962:INFO:Uploading model into container now
2022-12-03 14:06:21,962:INFO:master_model_container: 18
2022-12-03 14:06:21,962:INFO:display_container: 2
2022-12-03 14:06:21,965:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=HuberRegressor(alpha=0.0001, epsilon=1.35,
                                             fit_intercept=True, max_iter=100,
                                             tol=1e-05, warm_start=False),
                    sp=12, window_length=12)
2022-12-03 14:06:21,965:INFO:create_model() successfully completed......................................
2022-12-03 14:06:22,133:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:22,134:INFO:Creating metrics dataframe
2022-12-03 14:06:22,174:INFO:Initializing Passive Aggressive w/ Cond. Deseasonalize & Detrending
2022-12-03 14:06:22,174:INFO:Total runtime is 2.985798271497091 minutes
2022-12-03 14:06:22,182:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:22,182:INFO:Initializing create_model()
2022-12-03 14:06:22,182:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=par_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:22,182:INFO:Checking exceptions
2022-12-03 14:06:22,183:INFO:Importing libraries
2022-12-03 14:06:22,183:INFO:Copying training dataset
2022-12-03 14:06:22,193:INFO:Defining folds
2022-12-03 14:06:22,193:INFO:Declaring metric variables
2022-12-03 14:06:22,200:INFO:Importing untrained model
2022-12-03 14:06:22,217:INFO:Passive Aggressive w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:06:22,232:INFO:Starting cross validation
2022-12-03 14:06:22,235:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:23,591:INFO:Calculating mean and std
2022-12-03 14:06:23,595:INFO:Creating metrics dataframe
2022-12-03 14:06:23,603:INFO:Uploading results into container
2022-12-03 14:06:23,604:INFO:Uploading model into container now
2022-12-03 14:06:23,604:INFO:master_model_container: 19
2022-12-03 14:06:23,605:INFO:display_container: 2
2022-12-03 14:06:23,609:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=PassiveAggressiveRegressor(C=1.0, average=False,
                                                         early_stopping=False,
                                                         epsilon=0.1,
                                                         fit_intercept=True,
                                                         loss='epsilon_insensitive',
                                                         max_iter=1000,
                                                         n_iter_no_change=5,
                                                         random_state=123,
                                                         shuffle=True,
                                                         tol=0.001,
                                                         validation_fraction=0.1,
                                                         verbose=0,
                                                         warm_start=False),
                    sp=12, window_length=12)
2022-12-03 14:06:23,609:INFO:create_model() successfully completed......................................
2022-12-03 14:06:23,808:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:23,809:INFO:Creating metrics dataframe
2022-12-03 14:06:23,902:INFO:Initializing Orthogonal Matching Pursuit w/ Cond. Deseasonalize & Detrending
2022-12-03 14:06:23,902:INFO:Total runtime is 3.014587966601054 minutes
2022-12-03 14:06:23,910:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:23,911:INFO:Initializing create_model()
2022-12-03 14:06:23,911:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=omp_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:23,911:INFO:Checking exceptions
2022-12-03 14:06:23,911:INFO:Importing libraries
2022-12-03 14:06:23,912:INFO:Copying training dataset
2022-12-03 14:06:23,921:INFO:Defining folds
2022-12-03 14:06:23,921:INFO:Declaring metric variables
2022-12-03 14:06:23,928:INFO:Importing untrained model
2022-12-03 14:06:23,988:INFO:Orthogonal Matching Pursuit w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:06:24,001:INFO:Starting cross validation
2022-12-03 14:06:24,002:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:24,539:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:06:24,543:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:06:24,545:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:06:24,632:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:06:25,243:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:06:25,483:INFO:Calculating mean and std
2022-12-03 14:06:25,487:INFO:Creating metrics dataframe
2022-12-03 14:06:25,496:INFO:Uploading results into container
2022-12-03 14:06:25,496:INFO:Uploading model into container now
2022-12-03 14:06:25,497:INFO:master_model_container: 20
2022-12-03 14:06:25,497:INFO:display_container: 2
2022-12-03 14:06:25,500:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=OrthogonalMatchingPursuit(fit_intercept=True,
                                                        n_nonzero_coefs=None,
                                                        normalize='deprecated',
                                                        precompute='auto',
                                                        tol=None),
                    sp=12, window_length=12)
2022-12-03 14:06:25,501:INFO:create_model() successfully completed......................................
2022-12-03 14:06:25,677:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:25,677:INFO:Creating metrics dataframe
2022-12-03 14:06:25,717:INFO:Initializing K Neighbors w/ Cond. Deseasonalize & Detrending
2022-12-03 14:06:25,717:INFO:Total runtime is 3.0448403755823774 minutes
2022-12-03 14:06:25,725:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:25,725:INFO:Initializing create_model()
2022-12-03 14:06:25,725:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=knn_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:25,726:INFO:Checking exceptions
2022-12-03 14:06:25,726:INFO:Importing libraries
2022-12-03 14:06:25,726:INFO:Copying training dataset
2022-12-03 14:06:25,735:INFO:Defining folds
2022-12-03 14:06:25,735:INFO:Declaring metric variables
2022-12-03 14:06:25,743:INFO:Importing untrained model
2022-12-03 14:06:25,760:INFO:K Neighbors w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:06:25,775:INFO:Starting cross validation
2022-12-03 14:06:25,776:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:27,309:INFO:Calculating mean and std
2022-12-03 14:06:27,312:INFO:Creating metrics dataframe
2022-12-03 14:06:27,321:INFO:Uploading results into container
2022-12-03 14:06:27,321:INFO:Uploading model into container now
2022-12-03 14:06:27,322:INFO:master_model_container: 21
2022-12-03 14:06:27,323:INFO:display_container: 2
2022-12-03 14:06:27,326:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=KNeighborsRegressor(algorithm='auto',
                                                  leaf_size=30,
                                                  metric='minkowski',
                                                  metric_params=None, n_jobs=-1,
                                                  n_neighbors=5, p=2,
                                                  weights='uniform'),
                    sp=12, window_length=12)
2022-12-03 14:06:27,326:INFO:create_model() successfully completed......................................
2022-12-03 14:06:27,485:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:27,485:INFO:Creating metrics dataframe
2022-12-03 14:06:27,526:INFO:Initializing Decision Tree w/ Cond. Deseasonalize & Detrending
2022-12-03 14:06:27,527:INFO:Total runtime is 3.07500970363617 minutes
2022-12-03 14:06:27,534:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:27,535:INFO:Initializing create_model()
2022-12-03 14:06:27,535:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=dt_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:27,535:INFO:Checking exceptions
2022-12-03 14:06:27,535:INFO:Importing libraries
2022-12-03 14:06:27,536:INFO:Copying training dataset
2022-12-03 14:06:27,545:INFO:Defining folds
2022-12-03 14:06:27,545:INFO:Declaring metric variables
2022-12-03 14:06:27,561:INFO:Importing untrained model
2022-12-03 14:06:27,569:INFO:Decision Tree w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:06:27,584:INFO:Starting cross validation
2022-12-03 14:06:27,586:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:28,838:INFO:Calculating mean and std
2022-12-03 14:06:28,841:INFO:Creating metrics dataframe
2022-12-03 14:06:28,849:INFO:Uploading results into container
2022-12-03 14:06:28,849:INFO:Uploading model into container now
2022-12-03 14:06:28,850:INFO:master_model_container: 22
2022-12-03 14:06:28,851:INFO:display_container: 2
2022-12-03 14:06:28,855:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=DecisionTreeRegressor(ccp_alpha=0.0,
                                                    criterion='squared_error',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    random_state=123,
                                                    splitter='best'),
                    sp=12, window_length=12)
2022-12-03 14:06:28,855:INFO:create_model() successfully completed......................................
2022-12-03 14:06:29,001:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:29,003:INFO:Creating metrics dataframe
2022-12-03 14:06:29,046:INFO:Initializing Random Forest w/ Cond. Deseasonalize & Detrending
2022-12-03 14:06:29,046:INFO:Total runtime is 3.1003253300984706 minutes
2022-12-03 14:06:29,054:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:29,054:INFO:Initializing create_model()
2022-12-03 14:06:29,054:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=rf_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:29,055:INFO:Checking exceptions
2022-12-03 14:06:29,055:INFO:Importing libraries
2022-12-03 14:06:29,055:INFO:Copying training dataset
2022-12-03 14:06:29,065:INFO:Defining folds
2022-12-03 14:06:29,065:INFO:Declaring metric variables
2022-12-03 14:06:29,083:INFO:Importing untrained model
2022-12-03 14:06:29,092:INFO:Random Forest w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:06:29,107:INFO:Starting cross validation
2022-12-03 14:06:29,108:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:31,777:INFO:Calculating mean and std
2022-12-03 14:06:31,781:INFO:Creating metrics dataframe
2022-12-03 14:06:31,789:INFO:Uploading results into container
2022-12-03 14:06:31,789:INFO:Uploading model into container now
2022-12-03 14:06:31,790:INFO:master_model_container: 23
2022-12-03 14:06:31,790:INFO:display_container: 2
2022-12-03 14:06:31,794:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=RandomForestRegressor(bootstrap=True,
                                                    ccp_alpha=0.0,
                                                    criterion='squared_error',
                                                    max_depth=None,
                                                    max_features=1.0,
                                                    max_leaf_nodes=None,
                                                    max_samples=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    n_estimators=100, n_jobs=-1,
                                                    oob_score=False,
                                                    random_state=123, verbose=0,
                                                    warm_start=False),
                    sp=12, window_length=12)
2022-12-03 14:06:31,794:INFO:create_model() successfully completed......................................
2022-12-03 14:06:31,952:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:31,952:INFO:Creating metrics dataframe
2022-12-03 14:06:31,995:INFO:Initializing Extra Trees w/ Cond. Deseasonalize & Detrending
2022-12-03 14:06:31,995:INFO:Total runtime is 3.1494772076606754 minutes
2022-12-03 14:06:32,002:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:32,002:INFO:Initializing create_model()
2022-12-03 14:06:32,002:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=et_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:32,003:INFO:Checking exceptions
2022-12-03 14:06:32,003:INFO:Importing libraries
2022-12-03 14:06:32,003:INFO:Copying training dataset
2022-12-03 14:06:32,013:INFO:Defining folds
2022-12-03 14:06:32,013:INFO:Declaring metric variables
2022-12-03 14:06:32,026:INFO:Importing untrained model
2022-12-03 14:06:32,035:INFO:Extra Trees w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:06:32,050:INFO:Starting cross validation
2022-12-03 14:06:32,051:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:34,279:INFO:Calculating mean and std
2022-12-03 14:06:34,283:INFO:Creating metrics dataframe
2022-12-03 14:06:34,291:INFO:Uploading results into container
2022-12-03 14:06:34,291:INFO:Uploading model into container now
2022-12-03 14:06:34,292:INFO:master_model_container: 24
2022-12-03 14:06:34,292:INFO:display_container: 2
2022-12-03 14:06:34,296:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=ExtraTreesRegressor(bootstrap=False,
                                                  ccp_alpha=0.0,
                                                  criterion='squared_error',
                                                  max_depth=None,
                                                  max_features=1.0,
                                                  max_leaf_nodes=None,
                                                  max_samples=None,
                                                  min_impurity_decrease=0.0,
                                                  min_samples_leaf=1,
                                                  min_samples_split=2,
                                                  min_weight_fraction_leaf=0.0,
                                                  n_estimators=100, n_jobs=-1,
                                                  oob_score=False,
                                                  random_state=123, verbose=0,
                                                  warm_start=False),
                    sp=12, window_length=12)
2022-12-03 14:06:34,296:INFO:create_model() successfully completed......................................
2022-12-03 14:06:34,481:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:34,481:INFO:Creating metrics dataframe
2022-12-03 14:06:34,524:INFO:Initializing Gradient Boosting w/ Cond. Deseasonalize & Detrending
2022-12-03 14:06:34,524:INFO:Total runtime is 3.1916311581929526 minutes
2022-12-03 14:06:34,531:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:34,531:INFO:Initializing create_model()
2022-12-03 14:06:34,532:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=gbr_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:34,532:INFO:Checking exceptions
2022-12-03 14:06:34,532:INFO:Importing libraries
2022-12-03 14:06:34,532:INFO:Copying training dataset
2022-12-03 14:06:34,541:INFO:Defining folds
2022-12-03 14:06:34,541:INFO:Declaring metric variables
2022-12-03 14:06:34,565:INFO:Importing untrained model
2022-12-03 14:06:34,574:INFO:Gradient Boosting w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:06:34,589:INFO:Starting cross validation
2022-12-03 14:06:34,590:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:36,209:INFO:Calculating mean and std
2022-12-03 14:06:36,212:INFO:Creating metrics dataframe
2022-12-03 14:06:36,218:INFO:Uploading results into container
2022-12-03 14:06:36,218:INFO:Uploading model into container now
2022-12-03 14:06:36,219:INFO:master_model_container: 25
2022-12-03 14:06:36,219:INFO:display_container: 2
2022-12-03 14:06:36,224:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=GradientBoostingRegressor(alpha=0.9,
                                                        ccp_alpha=0.0,
                                                        criterion='friedman_mse',
                                                        init=None,
                                                        learning_rate=0.1,
                                                        loss='squared_error',
                                                        max_depth=3,
                                                        max_features=None,
                                                        max_leaf_nodes=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        n_estimators=100,
                                                        n_iter_no_change=None,
                                                        random_state=123,
                                                        subsample=1.0,
                                                        tol=0.0001,
                                                        validation_fraction=0.1,
                                                        verbose=0,
                                                        warm_start=False),
                    sp=12, window_length=12)
2022-12-03 14:06:36,225:INFO:create_model() successfully completed......................................
2022-12-03 14:06:36,392:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:36,394:INFO:Creating metrics dataframe
2022-12-03 14:06:36,442:INFO:Initializing AdaBoost w/ Cond. Deseasonalize & Detrending
2022-12-03 14:06:36,442:INFO:Total runtime is 3.2235956589380903 minutes
2022-12-03 14:06:36,448:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:36,449:INFO:Initializing create_model()
2022-12-03 14:06:36,449:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=ada_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:36,449:INFO:Checking exceptions
2022-12-03 14:06:36,449:INFO:Importing libraries
2022-12-03 14:06:36,450:INFO:Copying training dataset
2022-12-03 14:06:36,459:INFO:Defining folds
2022-12-03 14:06:36,459:INFO:Declaring metric variables
2022-12-03 14:06:36,482:INFO:Importing untrained model
2022-12-03 14:06:36,490:INFO:AdaBoost w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:06:36,504:INFO:Starting cross validation
2022-12-03 14:06:36,506:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:38,198:INFO:Calculating mean and std
2022-12-03 14:06:38,202:INFO:Creating metrics dataframe
2022-12-03 14:06:38,210:INFO:Uploading results into container
2022-12-03 14:06:38,210:INFO:Uploading model into container now
2022-12-03 14:06:38,211:INFO:master_model_container: 26
2022-12-03 14:06:38,211:INFO:display_container: 2
2022-12-03 14:06:38,214:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=AdaBoostRegressor(base_estimator=None,
                                                learning_rate=1.0,
                                                loss='linear', n_estimators=50,
                                                random_state=123),
                    sp=12, window_length=12)
2022-12-03 14:06:38,214:INFO:create_model() successfully completed......................................
2022-12-03 14:06:38,380:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:38,380:INFO:Creating metrics dataframe
2022-12-03 14:06:38,425:INFO:Initializing Light Gradient Boosting w/ Cond. Deseasonalize & Detrending
2022-12-03 14:06:38,425:INFO:Total runtime is 3.256640632947286 minutes
2022-12-03 14:06:38,433:INFO:SubProcess create_model() called ==================================
2022-12-03 14:06:38,433:INFO:Initializing create_model()
2022-12-03 14:06:38,433:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=lightgbm_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3070E940>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:38,433:INFO:Checking exceptions
2022-12-03 14:06:38,434:INFO:Importing libraries
2022-12-03 14:06:38,434:INFO:Copying training dataset
2022-12-03 14:06:38,443:INFO:Defining folds
2022-12-03 14:06:38,443:INFO:Declaring metric variables
2022-12-03 14:06:38,453:INFO:Importing untrained model
2022-12-03 14:06:38,463:INFO:Light Gradient Boosting w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:06:38,477:INFO:Starting cross validation
2022-12-03 14:06:38,478:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:06:40,508:INFO:Calculating mean and std
2022-12-03 14:06:40,510:INFO:Creating metrics dataframe
2022-12-03 14:06:40,519:INFO:Uploading results into container
2022-12-03 14:06:40,519:INFO:Uploading model into container now
2022-12-03 14:06:40,520:INFO:master_model_container: 27
2022-12-03 14:06:40,521:INFO:display_container: 2
2022-12-03 14:06:40,526:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=LGBMRegressor(boosting_type='gbdt',
                                            class_weight=None,
                                            colsample_bytree=1.0,
                                            importance_type='split',
                                            learning_rate=0.1, max_depth=-1,
                                            min_child_samples=20,
                                            min_child_weight=0.001,
                                            min_split_gain=0.0,
                                            n_estimators=100, n_jobs=-1,
                                            num_leaves=31, objective=None,
                                            random_state=123, reg_alpha=0.0,
                                            reg_lambda=0.0, silent='warn',
                                            subsample=1.0,
                                            subsample_for_bin=200000,
                                            subsample_freq=0),
                    sp=12, window_length=12)
2022-12-03 14:06:40,526:INFO:create_model() successfully completed......................................
2022-12-03 14:06:40,703:INFO:SubProcess create_model() end ==================================
2022-12-03 14:06:40,703:INFO:Creating metrics dataframe
2022-12-03 14:06:40,794:INFO:Initializing create_model()
2022-12-03 14:06:40,794:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=ExponentialSmoothing(damped_trend=False, damping_trend=None, initial_level=None,
                     initial_seasonal=None, initial_trend=None,
                     initialization_method='estimated', method=None,
                     minimize_kwargs=None, optimized=True, random_state=None,
                     remove_bias=False, seasonal='mul', smoothing_level=None,
                     smoothing_seasonal=None, smoothing_trend=None, sp=12,
                     start_params=None, trend='add', use_boxcox=None,
                     use_brute=True), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:06:40,794:INFO:Checking exceptions
2022-12-03 14:06:40,798:INFO:Importing libraries
2022-12-03 14:06:40,798:INFO:Copying training dataset
2022-12-03 14:06:40,806:INFO:Defining folds
2022-12-03 14:06:40,806:INFO:Declaring metric variables
2022-12-03 14:06:40,806:INFO:Importing untrained model
2022-12-03 14:06:40,806:INFO:Declaring custom model
2022-12-03 14:06:40,808:INFO:Exponential Smoothing Imported successfully
2022-12-03 14:06:40,809:INFO:Cross validation set to False
2022-12-03 14:06:40,809:INFO:Fitting Model
2022-12-03 14:06:41,285:INFO:ExponentialSmoothing(damped_trend=False, damping_trend=None, initial_level=None,
                     initial_seasonal=None, initial_trend=None,
                     initialization_method='estimated', method=None,
                     minimize_kwargs=None, optimized=True, random_state=None,
                     remove_bias=False, seasonal='mul', smoothing_level=None,
                     smoothing_seasonal=None, smoothing_trend=None, sp=12,
                     start_params=None, trend='add', use_boxcox=None,
                     use_brute=True)
2022-12-03 14:06:41,286:INFO:create_model() successfully completed......................................
2022-12-03 14:06:41,605:INFO:master_model_container: 27
2022-12-03 14:06:41,606:INFO:display_container: 2
2022-12-03 14:06:41,607:INFO:ExponentialSmoothing(damped_trend=False, damping_trend=None, initial_level=None,
                     initial_seasonal=None, initial_trend=None,
                     initialization_method='estimated', method=None,
                     minimize_kwargs=None, optimized=True, random_state=None,
                     remove_bias=False, seasonal='mul', smoothing_level=None,
                     smoothing_seasonal=None, smoothing_trend=None, sp=12,
                     start_params=None, trend='add', use_boxcox=None,
                     use_brute=True)
2022-12-03 14:06:41,607:INFO:compare_models() successfully completed......................................
2022-12-03 14:07:48,162:INFO:Soft dependency imported: mlxtend: 0.21.0
2022-12-03 14:07:49,874:WARNING:C:\Users\du\AppData\Roaming\Python\Python39\site-packages\mlxtend\frequent_patterns\fpcommon.py:111: DeprecationWarning:

DataFrames with non-bool types result in worse computationalperformance and their support might be discontinued in the future.Please use a DataFrame with bool type


2022-12-03 14:08:52,995:INFO:Soft dependency imported: mlxtend: 0.21.0
2022-12-03 14:08:54,501:WARNING:C:\Users\du\AppData\Roaming\Python\Python39\site-packages\mlxtend\frequent_patterns\fpcommon.py:111: DeprecationWarning:

DataFrames with non-bool types result in worse computationalperformance and their support might be discontinued in the future.Please use a DataFrame with bool type


2022-12-03 14:09:48,491:INFO:Initializing compare_models()
2022-12-03 14:09:48,492:INFO:compare_models(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, include=None, fold=None, round=4, cross_validation=True, sort=MASE, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'MASE', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.time_series.forecasting.oop.TSForecastingExperiment'>}, exclude=None)
2022-12-03 14:09:48,492:INFO:Checking exceptions
2022-12-03 14:09:48,495:INFO:Preparing display monitor
2022-12-03 14:09:48,607:INFO:Initializing Naive Forecaster
2022-12-03 14:09:48,607:INFO:Total runtime is 0.0 minutes
2022-12-03 14:09:48,614:INFO:SubProcess create_model() called ==================================
2022-12-03 14:09:48,614:INFO:Initializing create_model()
2022-12-03 14:09:48,614:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=naive, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:09:48,615:INFO:Checking exceptions
2022-12-03 14:09:48,615:INFO:Importing libraries
2022-12-03 14:09:48,615:INFO:Copying training dataset
2022-12-03 14:09:48,653:INFO:Defining folds
2022-12-03 14:09:48,653:INFO:Declaring metric variables
2022-12-03 14:09:48,658:INFO:Importing untrained model
2022-12-03 14:09:48,666:INFO:Naive Forecaster Imported successfully
2022-12-03 14:09:48,683:INFO:Starting cross validation
2022-12-03 14:09:48,684:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:09:48,910:INFO:Calculating mean and std
2022-12-03 14:09:48,911:INFO:Creating metrics dataframe
2022-12-03 14:09:48,919:INFO:Uploading results into container
2022-12-03 14:09:48,919:INFO:Uploading model into container now
2022-12-03 14:09:48,920:INFO:master_model_container: 28
2022-12-03 14:09:48,920:INFO:display_container: 3
2022-12-03 14:09:48,920:INFO:NaiveForecaster(sp=1, strategy='last', window_length=None)
2022-12-03 14:09:48,920:INFO:create_model() successfully completed......................................
2022-12-03 14:09:49,115:INFO:SubProcess create_model() end ==================================
2022-12-03 14:09:49,115:INFO:Creating metrics dataframe
2022-12-03 14:09:49,131:INFO:Initializing Grand Means Forecaster
2022-12-03 14:09:49,131:INFO:Total runtime is 0.008726676305135092 minutes
2022-12-03 14:09:49,138:INFO:SubProcess create_model() called ==================================
2022-12-03 14:09:49,139:INFO:Initializing create_model()
2022-12-03 14:09:49,139:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=grand_means, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:09:49,139:INFO:Checking exceptions
2022-12-03 14:09:49,139:INFO:Importing libraries
2022-12-03 14:09:49,139:INFO:Copying training dataset
2022-12-03 14:09:49,149:INFO:Defining folds
2022-12-03 14:09:49,149:INFO:Declaring metric variables
2022-12-03 14:09:49,156:INFO:Importing untrained model
2022-12-03 14:09:49,163:INFO:Grand Means Forecaster Imported successfully
2022-12-03 14:09:49,177:INFO:Starting cross validation
2022-12-03 14:09:49,178:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:09:49,371:INFO:Calculating mean and std
2022-12-03 14:09:49,372:INFO:Creating metrics dataframe
2022-12-03 14:09:49,380:INFO:Uploading results into container
2022-12-03 14:09:49,380:INFO:Uploading model into container now
2022-12-03 14:09:49,381:INFO:master_model_container: 29
2022-12-03 14:09:49,381:INFO:display_container: 3
2022-12-03 14:09:49,381:INFO:NaiveForecaster(sp=1, strategy='mean', window_length=None)
2022-12-03 14:09:49,381:INFO:create_model() successfully completed......................................
2022-12-03 14:09:49,528:INFO:SubProcess create_model() end ==================================
2022-12-03 14:09:49,528:INFO:Creating metrics dataframe
2022-12-03 14:09:49,551:INFO:Initializing Seasonal Naive Forecaster
2022-12-03 14:09:49,552:INFO:Total runtime is 0.015741225083669028 minutes
2022-12-03 14:09:49,558:INFO:SubProcess create_model() called ==================================
2022-12-03 14:09:49,558:INFO:Initializing create_model()
2022-12-03 14:09:49,559:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=snaive, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:09:49,559:INFO:Checking exceptions
2022-12-03 14:09:49,559:INFO:Importing libraries
2022-12-03 14:09:49,559:INFO:Copying training dataset
2022-12-03 14:09:49,576:INFO:Defining folds
2022-12-03 14:09:49,576:INFO:Declaring metric variables
2022-12-03 14:09:49,582:INFO:Importing untrained model
2022-12-03 14:09:49,590:INFO:Seasonal Naive Forecaster Imported successfully
2022-12-03 14:09:49,604:INFO:Starting cross validation
2022-12-03 14:09:49,605:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:09:49,788:INFO:Calculating mean and std
2022-12-03 14:09:49,791:INFO:Creating metrics dataframe
2022-12-03 14:09:49,798:INFO:Uploading results into container
2022-12-03 14:09:49,799:INFO:Uploading model into container now
2022-12-03 14:09:49,800:INFO:master_model_container: 30
2022-12-03 14:09:49,800:INFO:display_container: 3
2022-12-03 14:09:49,800:INFO:NaiveForecaster(sp=12, strategy='last', window_length=None)
2022-12-03 14:09:49,801:INFO:create_model() successfully completed......................................
2022-12-03 14:09:49,954:INFO:SubProcess create_model() end ==================================
2022-12-03 14:09:49,954:INFO:Creating metrics dataframe
2022-12-03 14:09:49,982:INFO:Initializing Polynomial Trend Forecaster
2022-12-03 14:09:49,982:INFO:Total runtime is 0.02290540138880412 minutes
2022-12-03 14:09:49,989:INFO:SubProcess create_model() called ==================================
2022-12-03 14:09:49,990:INFO:Initializing create_model()
2022-12-03 14:09:49,990:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=polytrend, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:09:49,990:INFO:Checking exceptions
2022-12-03 14:09:49,990:INFO:Importing libraries
2022-12-03 14:09:49,991:INFO:Copying training dataset
2022-12-03 14:09:50,021:INFO:Defining folds
2022-12-03 14:09:50,022:INFO:Declaring metric variables
2022-12-03 14:09:50,029:INFO:Importing untrained model
2022-12-03 14:09:50,036:INFO:Polynomial Trend Forecaster Imported successfully
2022-12-03 14:09:50,066:INFO:Starting cross validation
2022-12-03 14:09:50,067:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:09:50,240:INFO:Calculating mean and std
2022-12-03 14:09:50,244:INFO:Creating metrics dataframe
2022-12-03 14:09:50,252:INFO:Uploading results into container
2022-12-03 14:09:50,252:INFO:Uploading model into container now
2022-12-03 14:09:50,253:INFO:master_model_container: 31
2022-12-03 14:09:50,254:INFO:display_container: 3
2022-12-03 14:09:50,254:INFO:PolynomialTrendForecaster(degree=1, regressor=None, with_intercept=True)
2022-12-03 14:09:50,254:INFO:create_model() successfully completed......................................
2022-12-03 14:09:50,404:INFO:SubProcess create_model() end ==================================
2022-12-03 14:09:50,404:INFO:Creating metrics dataframe
2022-12-03 14:09:50,428:INFO:Initializing ARIMA
2022-12-03 14:09:50,428:INFO:Total runtime is 0.030352159341176355 minutes
2022-12-03 14:09:50,435:INFO:SubProcess create_model() called ==================================
2022-12-03 14:09:50,436:INFO:Initializing create_model()
2022-12-03 14:09:50,436:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=arima, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:09:50,436:INFO:Checking exceptions
2022-12-03 14:09:50,436:INFO:Importing libraries
2022-12-03 14:09:50,436:INFO:Copying training dataset
2022-12-03 14:09:50,457:INFO:Defining folds
2022-12-03 14:09:50,458:INFO:Declaring metric variables
2022-12-03 14:09:50,465:INFO:Importing untrained model
2022-12-03 14:09:50,473:INFO:ARIMA Imported successfully
2022-12-03 14:09:50,506:INFO:Starting cross validation
2022-12-03 14:09:50,508:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:09:51,241:INFO:Calculating mean and std
2022-12-03 14:09:51,244:INFO:Creating metrics dataframe
2022-12-03 14:09:51,254:INFO:Uploading results into container
2022-12-03 14:09:51,254:INFO:Uploading model into container now
2022-12-03 14:09:51,255:INFO:master_model_container: 32
2022-12-03 14:09:51,255:INFO:display_container: 3
2022-12-03 14:09:51,256:INFO:ARIMA(concentrate_scale=False, enforce_invertibility=True,
      enforce_stationarity=True, hamilton_representation=False, maxiter=50,
      measurement_error=False, method='lbfgs', mle_regression=True,
      order=(1, 0, 0), out_of_sample_size=0, scoring='mse', scoring_args=None,
      seasonal_order=(0, 1, 0, 12), simple_differencing=False,
      start_params=None, suppress_warnings=False, time_varying_regression=False,
      trend=None, with_intercept=True)
2022-12-03 14:09:51,256:INFO:create_model() successfully completed......................................
2022-12-03 14:09:51,429:INFO:SubProcess create_model() end ==================================
2022-12-03 14:09:51,429:INFO:Creating metrics dataframe
2022-12-03 14:09:51,459:INFO:Initializing Auto ARIMA
2022-12-03 14:09:51,460:INFO:Total runtime is 0.04753952423731486 minutes
2022-12-03 14:09:51,467:INFO:SubProcess create_model() called ==================================
2022-12-03 14:09:51,468:INFO:Initializing create_model()
2022-12-03 14:09:51,468:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=auto_arima, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:09:51,468:INFO:Checking exceptions
2022-12-03 14:09:51,469:INFO:Importing libraries
2022-12-03 14:09:51,469:INFO:Copying training dataset
2022-12-03 14:09:51,478:INFO:Defining folds
2022-12-03 14:09:51,479:INFO:Declaring metric variables
2022-12-03 14:09:51,486:INFO:Importing untrained model
2022-12-03 14:09:51,496:INFO:Auto ARIMA Imported successfully
2022-12-03 14:09:51,522:INFO:Starting cross validation
2022-12-03 14:09:51,524:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:12,123:INFO:Calculating mean and std
2022-12-03 14:12:12,127:INFO:Creating metrics dataframe
2022-12-03 14:12:12,136:INFO:Uploading results into container
2022-12-03 14:12:12,136:INFO:Uploading model into container now
2022-12-03 14:12:12,136:INFO:master_model_container: 33
2022-12-03 14:12:12,136:INFO:display_container: 3
2022-12-03 14:12:12,138:INFO:AutoARIMA(D=None, alpha=0.05, concentrate_scale=False, d=None,
          enforce_invertibility=True, enforce_stationarity=True,
          error_action='warn', hamilton_representation=False,
          information_criterion='aic', max_D=1, max_P=2, max_Q=2, max_d=2,
          max_order=5, max_p=5, max_q=5, maxiter=50, measurement_error=False,
          method='lbfgs', mle_regression=True, n_fits=10, n_jobs=1,
          offset_test_args=None, out_of_sample_size=0, random=False,
          random_state=123, scoring='mse', scoring_args=None, seasonal=True,
          seasonal_test='ocsb', ...)
2022-12-03 14:12:12,139:INFO:create_model() successfully completed......................................
2022-12-03 14:12:12,332:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:12,332:INFO:Creating metrics dataframe
2022-12-03 14:12:12,364:INFO:Initializing Exponential Smoothing
2022-12-03 14:12:12,364:INFO:Total runtime is 2.3959424455960594 minutes
2022-12-03 14:12:12,371:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:12,371:INFO:Initializing create_model()
2022-12-03 14:12:12,372:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=exp_smooth, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:12,372:INFO:Checking exceptions
2022-12-03 14:12:12,372:INFO:Importing libraries
2022-12-03 14:12:12,372:INFO:Copying training dataset
2022-12-03 14:12:12,382:INFO:Defining folds
2022-12-03 14:12:12,382:INFO:Declaring metric variables
2022-12-03 14:12:12,396:INFO:Importing untrained model
2022-12-03 14:12:12,404:INFO:Exponential Smoothing Imported successfully
2022-12-03 14:12:12,420:INFO:Starting cross validation
2022-12-03 14:12:12,421:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:13,910:INFO:Calculating mean and std
2022-12-03 14:12:13,914:INFO:Creating metrics dataframe
2022-12-03 14:12:13,922:INFO:Uploading results into container
2022-12-03 14:12:13,922:INFO:Uploading model into container now
2022-12-03 14:12:13,923:INFO:master_model_container: 34
2022-12-03 14:12:13,923:INFO:display_container: 3
2022-12-03 14:12:13,924:INFO:ExponentialSmoothing(damped_trend=False, damping_trend=None, initial_level=None,
                     initial_seasonal=None, initial_trend=None,
                     initialization_method='estimated', method=None,
                     minimize_kwargs=None, optimized=True, random_state=None,
                     remove_bias=False, seasonal='mul', smoothing_level=None,
                     smoothing_seasonal=None, smoothing_trend=None, sp=12,
                     start_params=None, trend='add', use_boxcox=None,
                     use_brute=True)
2022-12-03 14:12:13,924:INFO:create_model() successfully completed......................................
2022-12-03 14:12:14,085:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:14,085:INFO:Creating metrics dataframe
2022-12-03 14:12:14,112:INFO:Initializing Croston
2022-12-03 14:12:14,113:INFO:Total runtime is 2.4250978032747907 minutes
2022-12-03 14:12:14,120:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:14,120:INFO:Initializing create_model()
2022-12-03 14:12:14,121:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=croston, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:14,121:INFO:Checking exceptions
2022-12-03 14:12:14,121:INFO:Importing libraries
2022-12-03 14:12:14,121:INFO:Copying training dataset
2022-12-03 14:12:14,137:INFO:Defining folds
2022-12-03 14:12:14,138:INFO:Declaring metric variables
2022-12-03 14:12:14,144:INFO:Importing untrained model
2022-12-03 14:12:14,152:INFO:Croston Imported successfully
2022-12-03 14:12:14,171:INFO:Starting cross validation
2022-12-03 14:12:14,172:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:14,375:INFO:Calculating mean and std
2022-12-03 14:12:14,379:INFO:Creating metrics dataframe
2022-12-03 14:12:14,387:INFO:Uploading results into container
2022-12-03 14:12:14,387:INFO:Uploading model into container now
2022-12-03 14:12:14,388:INFO:master_model_container: 35
2022-12-03 14:12:14,388:INFO:display_container: 3
2022-12-03 14:12:14,388:INFO:Croston(smoothing=0.1)
2022-12-03 14:12:14,389:INFO:create_model() successfully completed......................................
2022-12-03 14:12:14,586:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:14,586:INFO:Creating metrics dataframe
2022-12-03 14:12:14,619:INFO:Initializing ETS
2022-12-03 14:12:14,619:INFO:Total runtime is 2.4335252801577254 minutes
2022-12-03 14:12:14,629:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:14,630:INFO:Initializing create_model()
2022-12-03 14:12:14,630:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=ets, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:14,630:INFO:Checking exceptions
2022-12-03 14:12:14,630:INFO:Importing libraries
2022-12-03 14:12:14,631:INFO:Copying training dataset
2022-12-03 14:12:14,641:INFO:Defining folds
2022-12-03 14:12:14,641:INFO:Declaring metric variables
2022-12-03 14:12:14,648:INFO:Importing untrained model
2022-12-03 14:12:14,657:INFO:ETS Imported successfully
2022-12-03 14:12:14,677:INFO:Starting cross validation
2022-12-03 14:12:14,678:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:15,901:INFO:Calculating mean and std
2022-12-03 14:12:15,904:INFO:Creating metrics dataframe
2022-12-03 14:12:15,914:INFO:Uploading results into container
2022-12-03 14:12:15,914:INFO:Uploading model into container now
2022-12-03 14:12:15,914:INFO:master_model_container: 36
2022-12-03 14:12:15,915:INFO:display_container: 3
2022-12-03 14:12:15,916:INFO:AutoETS(additive_only=False, allow_multiplicative_trend=False, auto=False,
        bounds=None, callback=None, damped_trend=False, dates=None, disp=False,
        error='add', freq=None, full_output=True, ignore_inf_ic=True,
        information_criterion='aic', initial_level=None, initial_seasonal=None,
        initial_trend=None, initialization_method='estimated', maxiter=1000,
        missing='none', n_jobs=None, random_state=None, restrict=True,
        return_params=False, seasonal='mul', sp=12, start_params=None,
        trend='add')
2022-12-03 14:12:15,916:INFO:create_model() successfully completed......................................
2022-12-03 14:12:16,091:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:16,091:INFO:Creating metrics dataframe
2022-12-03 14:12:16,145:INFO:Initializing Theta Forecaster
2022-12-03 14:12:16,146:INFO:Total runtime is 2.458973880608877 minutes
2022-12-03 14:12:16,155:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:16,156:INFO:Initializing create_model()
2022-12-03 14:12:16,156:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=theta, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:16,156:INFO:Checking exceptions
2022-12-03 14:12:16,156:INFO:Importing libraries
2022-12-03 14:12:16,156:INFO:Copying training dataset
2022-12-03 14:12:16,166:INFO:Defining folds
2022-12-03 14:12:16,167:INFO:Declaring metric variables
2022-12-03 14:12:16,178:INFO:Importing untrained model
2022-12-03 14:12:16,205:INFO:Theta Forecaster Imported successfully
2022-12-03 14:12:16,220:INFO:Starting cross validation
2022-12-03 14:12:16,222:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:16,643:INFO:Calculating mean and std
2022-12-03 14:12:16,647:INFO:Creating metrics dataframe
2022-12-03 14:12:16,655:INFO:Uploading results into container
2022-12-03 14:12:16,655:INFO:Uploading model into container now
2022-12-03 14:12:16,656:INFO:master_model_container: 37
2022-12-03 14:12:16,656:INFO:display_container: 3
2022-12-03 14:12:16,657:INFO:ThetaForecaster(deseasonalize=True, initial_level=None, sp=12)
2022-12-03 14:12:16,657:INFO:create_model() successfully completed......................................
2022-12-03 14:12:16,849:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:16,849:INFO:Creating metrics dataframe
2022-12-03 14:12:16,958:INFO:Initializing Linear w/ Cond. Deseasonalize & Detrending
2022-12-03 14:12:16,958:INFO:Total runtime is 2.4725043574968977 minutes
2022-12-03 14:12:16,966:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:16,966:INFO:Initializing create_model()
2022-12-03 14:12:16,966:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=lr_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:16,966:INFO:Checking exceptions
2022-12-03 14:12:16,967:INFO:Importing libraries
2022-12-03 14:12:16,967:INFO:Copying training dataset
2022-12-03 14:12:17,007:INFO:Defining folds
2022-12-03 14:12:17,007:INFO:Declaring metric variables
2022-12-03 14:12:17,015:INFO:Importing untrained model
2022-12-03 14:12:17,024:INFO:Linear w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:12:17,050:INFO:Starting cross validation
2022-12-03 14:12:17,053:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:18,681:INFO:Calculating mean and std
2022-12-03 14:12:18,685:INFO:Creating metrics dataframe
2022-12-03 14:12:18,694:INFO:Uploading results into container
2022-12-03 14:12:18,694:INFO:Uploading model into container now
2022-12-03 14:12:18,695:INFO:master_model_container: 38
2022-12-03 14:12:18,695:INFO:display_container: 3
2022-12-03 14:12:18,699:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=LinearRegression(copy_X=True, fit_intercept=True,
                                               n_jobs=-1,
                                               normalize='deprecated',
                                               positive=False),
                    sp=12, window_length=12)
2022-12-03 14:12:18,699:INFO:create_model() successfully completed......................................
2022-12-03 14:12:18,966:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:18,967:INFO:Creating metrics dataframe
2022-12-03 14:12:19,000:INFO:Initializing Elastic Net w/ Cond. Deseasonalize & Detrending
2022-12-03 14:12:19,000:INFO:Total runtime is 2.5065466642379763 minutes
2022-12-03 14:12:19,015:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:19,015:INFO:Initializing create_model()
2022-12-03 14:12:19,015:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=en_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:19,016:INFO:Checking exceptions
2022-12-03 14:12:19,016:INFO:Importing libraries
2022-12-03 14:12:19,016:INFO:Copying training dataset
2022-12-03 14:12:19,026:INFO:Defining folds
2022-12-03 14:12:19,027:INFO:Declaring metric variables
2022-12-03 14:12:19,034:INFO:Importing untrained model
2022-12-03 14:12:19,053:INFO:Elastic Net w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:12:19,067:INFO:Starting cross validation
2022-12-03 14:12:19,069:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:20,542:INFO:Calculating mean and std
2022-12-03 14:12:20,546:INFO:Creating metrics dataframe
2022-12-03 14:12:20,554:INFO:Uploading results into container
2022-12-03 14:12:20,554:INFO:Uploading model into container now
2022-12-03 14:12:20,555:INFO:master_model_container: 39
2022-12-03 14:12:20,555:INFO:display_container: 3
2022-12-03 14:12:20,559:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=ElasticNet(alpha=1.0, copy_X=True,
                                         fit_intercept=True, l1_ratio=0.5,
                                         max_iter=1000, normalize='deprecated',
                                         positive=False, precompute=False,
                                         random_state=123, selection='cyclic',
                                         tol=0.0001, warm_start=False),
                    sp=12, window_length=12)
2022-12-03 14:12:20,560:INFO:create_model() successfully completed......................................
2022-12-03 14:12:20,728:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:20,728:INFO:Creating metrics dataframe
2022-12-03 14:12:20,762:INFO:Initializing Ridge w/ Cond. Deseasonalize & Detrending
2022-12-03 14:12:20,762:INFO:Total runtime is 2.5359181165695195 minutes
2022-12-03 14:12:20,770:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:20,770:INFO:Initializing create_model()
2022-12-03 14:12:20,771:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=ridge_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:20,771:INFO:Checking exceptions
2022-12-03 14:12:20,771:INFO:Importing libraries
2022-12-03 14:12:20,771:INFO:Copying training dataset
2022-12-03 14:12:20,781:INFO:Defining folds
2022-12-03 14:12:20,781:INFO:Declaring metric variables
2022-12-03 14:12:20,789:INFO:Importing untrained model
2022-12-03 14:12:20,799:INFO:Ridge w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:12:20,815:INFO:Starting cross validation
2022-12-03 14:12:20,817:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:22,206:INFO:Calculating mean and std
2022-12-03 14:12:22,209:INFO:Creating metrics dataframe
2022-12-03 14:12:22,218:INFO:Uploading results into container
2022-12-03 14:12:22,219:INFO:Uploading model into container now
2022-12-03 14:12:22,220:INFO:master_model_container: 40
2022-12-03 14:12:22,220:INFO:display_container: 3
2022-12-03 14:12:22,223:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=Ridge(alpha=1.0, copy_X=True, fit_intercept=True,
                                    max_iter=None, normalize='deprecated',
                                    positive=False, random_state=123,
                                    solver='auto', tol=0.001),
                    sp=12, window_length=12)
2022-12-03 14:12:22,223:INFO:create_model() successfully completed......................................
2022-12-03 14:12:22,412:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:22,412:INFO:Creating metrics dataframe
2022-12-03 14:12:22,459:INFO:Initializing Lasso w/ Cond. Deseasonalize & Detrending
2022-12-03 14:12:22,459:INFO:Total runtime is 2.5641924977302555 minutes
2022-12-03 14:12:22,467:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:22,467:INFO:Initializing create_model()
2022-12-03 14:12:22,468:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=lasso_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:22,468:INFO:Checking exceptions
2022-12-03 14:12:22,468:INFO:Importing libraries
2022-12-03 14:12:22,468:INFO:Copying training dataset
2022-12-03 14:12:22,478:INFO:Defining folds
2022-12-03 14:12:22,478:INFO:Declaring metric variables
2022-12-03 14:12:22,488:INFO:Importing untrained model
2022-12-03 14:12:22,501:INFO:Lasso w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:12:22,516:INFO:Starting cross validation
2022-12-03 14:12:22,518:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:24,084:INFO:Calculating mean and std
2022-12-03 14:12:24,088:INFO:Creating metrics dataframe
2022-12-03 14:12:24,095:INFO:Uploading results into container
2022-12-03 14:12:24,095:INFO:Uploading model into container now
2022-12-03 14:12:24,096:INFO:master_model_container: 41
2022-12-03 14:12:24,096:INFO:display_container: 3
2022-12-03 14:12:24,100:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=Lasso(alpha=1.0, copy_X=True, fit_intercept=True,
                                    max_iter=1000, normalize='deprecated',
                                    positive=False, precompute=False,
                                    random_state=123, selection='cyclic',
                                    tol=0.0001, warm_start=False),
                    sp=12, window_length=12)
2022-12-03 14:12:24,101:INFO:create_model() successfully completed......................................
2022-12-03 14:12:24,293:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:24,294:INFO:Creating metrics dataframe
2022-12-03 14:12:24,330:INFO:Initializing Least Angular Regressor w/ Cond. Deseasonalize & Detrending
2022-12-03 14:12:24,330:INFO:Total runtime is 2.595375764369965 minutes
2022-12-03 14:12:24,338:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:24,338:INFO:Initializing create_model()
2022-12-03 14:12:24,338:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=lar_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:24,339:INFO:Checking exceptions
2022-12-03 14:12:24,339:INFO:Importing libraries
2022-12-03 14:12:24,339:INFO:Copying training dataset
2022-12-03 14:12:24,348:INFO:Defining folds
2022-12-03 14:12:24,348:INFO:Declaring metric variables
2022-12-03 14:12:24,356:INFO:Importing untrained model
2022-12-03 14:12:24,370:INFO:Least Angular Regressor w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:12:24,384:INFO:Starting cross validation
2022-12-03 14:12:24,386:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:24,727:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:12:24,750:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:12:24,754:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:12:24,797:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:12:25,416:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:12:25,657:INFO:Calculating mean and std
2022-12-03 14:12:25,661:INFO:Creating metrics dataframe
2022-12-03 14:12:25,668:INFO:Uploading results into container
2022-12-03 14:12:25,669:INFO:Uploading model into container now
2022-12-03 14:12:25,669:INFO:master_model_container: 42
2022-12-03 14:12:25,670:INFO:display_container: 3
2022-12-03 14:12:25,673:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=Lars(copy_X=True, eps=2.220446049250313e-16,
                                   fit_intercept=True, fit_path=True,
                                   jitter=None, n_nonzero_coefs=500,
                                   normalize='deprecated', precompute='auto',
                                   random_state=123, verbose=False),
                    sp=12, window_length=12)
2022-12-03 14:12:25,673:INFO:create_model() successfully completed......................................
2022-12-03 14:12:25,835:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:25,835:INFO:Creating metrics dataframe
2022-12-03 14:12:25,873:INFO:Initializing Lasso Least Angular Regressor w/ Cond. Deseasonalize & Detrending
2022-12-03 14:12:25,873:INFO:Total runtime is 2.621090332667033 minutes
2022-12-03 14:12:25,881:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:25,881:INFO:Initializing create_model()
2022-12-03 14:12:25,881:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=llar_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:25,881:INFO:Checking exceptions
2022-12-03 14:12:25,882:INFO:Importing libraries
2022-12-03 14:12:25,882:INFO:Copying training dataset
2022-12-03 14:12:25,892:INFO:Defining folds
2022-12-03 14:12:25,892:INFO:Declaring metric variables
2022-12-03 14:12:25,900:INFO:Importing untrained model
2022-12-03 14:12:25,914:INFO:Lasso Least Angular Regressor w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:12:25,929:INFO:Starting cross validation
2022-12-03 14:12:25,930:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:26,358:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 14:12:26,379:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 14:12:26,404:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 14:12:26,426:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 14:12:27,281:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-03 14:12:27,660:INFO:Calculating mean and std
2022-12-03 14:12:27,664:INFO:Creating metrics dataframe
2022-12-03 14:12:27,672:INFO:Uploading results into container
2022-12-03 14:12:27,673:INFO:Uploading model into container now
2022-12-03 14:12:27,673:INFO:master_model_container: 43
2022-12-03 14:12:27,674:INFO:display_container: 3
2022-12-03 14:12:27,678:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=LassoLars(alpha=1.0, copy_X=True,
                                        eps=2.220446049250313e-16,
                                        fit_intercept=True, fit_path=True,
                                        jitter=None, max_iter=500,
                                        normalize='deprecated', positive=False,
                                        precompute='auto', random_state=123,
                                        verbose=False),
                    sp=12, window_length=12)
2022-12-03 14:12:27,678:INFO:create_model() successfully completed......................................
2022-12-03 14:12:27,840:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:27,840:INFO:Creating metrics dataframe
2022-12-03 14:12:27,877:INFO:Initializing Bayesian Ridge w/ Cond. Deseasonalize & Detrending
2022-12-03 14:12:27,877:INFO:Total runtime is 2.6545009771982833 minutes
2022-12-03 14:12:27,884:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:27,885:INFO:Initializing create_model()
2022-12-03 14:12:27,885:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=br_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:27,885:INFO:Checking exceptions
2022-12-03 14:12:27,885:INFO:Importing libraries
2022-12-03 14:12:27,886:INFO:Copying training dataset
2022-12-03 14:12:27,895:INFO:Defining folds
2022-12-03 14:12:27,895:INFO:Declaring metric variables
2022-12-03 14:12:27,903:INFO:Importing untrained model
2022-12-03 14:12:27,918:INFO:Bayesian Ridge w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:12:27,933:INFO:Starting cross validation
2022-12-03 14:12:27,934:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:29,672:INFO:Calculating mean and std
2022-12-03 14:12:29,676:INFO:Creating metrics dataframe
2022-12-03 14:12:29,684:INFO:Uploading results into container
2022-12-03 14:12:29,684:INFO:Uploading model into container now
2022-12-03 14:12:29,685:INFO:master_model_container: 44
2022-12-03 14:12:29,685:INFO:display_container: 3
2022-12-03 14:12:29,690:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=BayesianRidge(alpha_1=1e-06, alpha_2=1e-06,
                                            alpha_init=None,
                                            compute_score=False, copy_X=True,
                                            fit_intercept=True, lambda_1=1e-06,
                                            lambda_2=1e-06, lambda_init=None,
                                            n_iter=300, normalize='deprecated',
                                            tol=0.001, verbose=False),
                    sp=12, window_length=12)
2022-12-03 14:12:29,690:INFO:create_model() successfully completed......................................
2022-12-03 14:12:29,851:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:29,852:INFO:Creating metrics dataframe
2022-12-03 14:12:29,890:INFO:Initializing Huber w/ Cond. Deseasonalize & Detrending
2022-12-03 14:12:29,891:INFO:Total runtime is 2.6880612333615623 minutes
2022-12-03 14:12:29,898:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:29,899:INFO:Initializing create_model()
2022-12-03 14:12:29,899:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=huber_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:29,899:INFO:Checking exceptions
2022-12-03 14:12:29,899:INFO:Importing libraries
2022-12-03 14:12:29,900:INFO:Copying training dataset
2022-12-03 14:12:29,910:INFO:Defining folds
2022-12-03 14:12:29,910:INFO:Declaring metric variables
2022-12-03 14:12:29,923:INFO:Importing untrained model
2022-12-03 14:12:29,931:INFO:Huber w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:12:29,947:INFO:Starting cross validation
2022-12-03 14:12:29,949:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:31,654:INFO:Calculating mean and std
2022-12-03 14:12:31,658:INFO:Creating metrics dataframe
2022-12-03 14:12:31,666:INFO:Uploading results into container
2022-12-03 14:12:31,666:INFO:Uploading model into container now
2022-12-03 14:12:31,667:INFO:master_model_container: 45
2022-12-03 14:12:31,667:INFO:display_container: 3
2022-12-03 14:12:31,670:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=HuberRegressor(alpha=0.0001, epsilon=1.35,
                                             fit_intercept=True, max_iter=100,
                                             tol=1e-05, warm_start=False),
                    sp=12, window_length=12)
2022-12-03 14:12:31,670:INFO:create_model() successfully completed......................................
2022-12-03 14:12:31,856:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:31,856:INFO:Creating metrics dataframe
2022-12-03 14:12:31,900:INFO:Initializing Passive Aggressive w/ Cond. Deseasonalize & Detrending
2022-12-03 14:12:31,900:INFO:Total runtime is 2.721538372834524 minutes
2022-12-03 14:12:31,907:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:31,907:INFO:Initializing create_model()
2022-12-03 14:12:31,907:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=par_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:31,908:INFO:Checking exceptions
2022-12-03 14:12:31,908:INFO:Importing libraries
2022-12-03 14:12:31,908:INFO:Copying training dataset
2022-12-03 14:12:31,916:INFO:Defining folds
2022-12-03 14:12:31,916:INFO:Declaring metric variables
2022-12-03 14:12:31,923:INFO:Importing untrained model
2022-12-03 14:12:31,938:INFO:Passive Aggressive w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:12:31,956:INFO:Starting cross validation
2022-12-03 14:12:31,958:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:33,266:INFO:Calculating mean and std
2022-12-03 14:12:33,270:INFO:Creating metrics dataframe
2022-12-03 14:12:33,278:INFO:Uploading results into container
2022-12-03 14:12:33,278:INFO:Uploading model into container now
2022-12-03 14:12:33,279:INFO:master_model_container: 46
2022-12-03 14:12:33,279:INFO:display_container: 3
2022-12-03 14:12:33,284:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=PassiveAggressiveRegressor(C=1.0, average=False,
                                                         early_stopping=False,
                                                         epsilon=0.1,
                                                         fit_intercept=True,
                                                         loss='epsilon_insensitive',
                                                         max_iter=1000,
                                                         n_iter_no_change=5,
                                                         random_state=123,
                                                         shuffle=True,
                                                         tol=0.001,
                                                         validation_fraction=0.1,
                                                         verbose=0,
                                                         warm_start=False),
                    sp=12, window_length=12)
2022-12-03 14:12:33,284:INFO:create_model() successfully completed......................................
2022-12-03 14:12:33,450:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:33,450:INFO:Creating metrics dataframe
2022-12-03 14:12:33,490:INFO:Initializing Orthogonal Matching Pursuit w/ Cond. Deseasonalize & Detrending
2022-12-03 14:12:33,491:INFO:Total runtime is 2.7480674624443058 minutes
2022-12-03 14:12:33,496:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:33,497:INFO:Initializing create_model()
2022-12-03 14:12:33,497:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=omp_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:33,497:INFO:Checking exceptions
2022-12-03 14:12:33,497:INFO:Importing libraries
2022-12-03 14:12:33,497:INFO:Copying training dataset
2022-12-03 14:12:33,509:INFO:Defining folds
2022-12-03 14:12:33,509:INFO:Declaring metric variables
2022-12-03 14:12:33,516:INFO:Importing untrained model
2022-12-03 14:12:33,544:INFO:Orthogonal Matching Pursuit w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:12:33,559:INFO:Starting cross validation
2022-12-03 14:12:33,560:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:33,925:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:12:33,934:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:12:33,947:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:12:34,043:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:12:34,638:WARNING:C:\ProgramData\Anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-03 14:12:34,910:INFO:Calculating mean and std
2022-12-03 14:12:34,914:INFO:Creating metrics dataframe
2022-12-03 14:12:34,922:INFO:Uploading results into container
2022-12-03 14:12:34,923:INFO:Uploading model into container now
2022-12-03 14:12:34,923:INFO:master_model_container: 47
2022-12-03 14:12:34,923:INFO:display_container: 3
2022-12-03 14:12:34,926:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=OrthogonalMatchingPursuit(fit_intercept=True,
                                                        n_nonzero_coefs=None,
                                                        normalize='deprecated',
                                                        precompute='auto',
                                                        tol=None),
                    sp=12, window_length=12)
2022-12-03 14:12:34,926:INFO:create_model() successfully completed......................................
2022-12-03 14:12:35,119:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:35,119:INFO:Creating metrics dataframe
2022-12-03 14:12:35,169:INFO:Initializing K Neighbors w/ Cond. Deseasonalize & Detrending
2022-12-03 14:12:35,170:INFO:Total runtime is 2.7760426123936974 minutes
2022-12-03 14:12:35,177:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:35,177:INFO:Initializing create_model()
2022-12-03 14:12:35,178:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=knn_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:35,178:INFO:Checking exceptions
2022-12-03 14:12:35,178:INFO:Importing libraries
2022-12-03 14:12:35,178:INFO:Copying training dataset
2022-12-03 14:12:35,187:INFO:Defining folds
2022-12-03 14:12:35,187:INFO:Declaring metric variables
2022-12-03 14:12:35,195:INFO:Importing untrained model
2022-12-03 14:12:35,208:INFO:K Neighbors w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:12:35,223:INFO:Starting cross validation
2022-12-03 14:12:35,225:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:37,042:INFO:Calculating mean and std
2022-12-03 14:12:37,045:INFO:Creating metrics dataframe
2022-12-03 14:12:37,055:INFO:Uploading results into container
2022-12-03 14:12:37,055:INFO:Uploading model into container now
2022-12-03 14:12:37,056:INFO:master_model_container: 48
2022-12-03 14:12:37,056:INFO:display_container: 3
2022-12-03 14:12:37,059:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=KNeighborsRegressor(algorithm='auto',
                                                  leaf_size=30,
                                                  metric='minkowski',
                                                  metric_params=None, n_jobs=-1,
                                                  n_neighbors=5, p=2,
                                                  weights='uniform'),
                    sp=12, window_length=12)
2022-12-03 14:12:37,059:INFO:create_model() successfully completed......................................
2022-12-03 14:12:37,241:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:37,242:INFO:Creating metrics dataframe
2022-12-03 14:12:37,289:INFO:Initializing Decision Tree w/ Cond. Deseasonalize & Detrending
2022-12-03 14:12:37,290:INFO:Total runtime is 2.8113814155260726 minutes
2022-12-03 14:12:37,298:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:37,298:INFO:Initializing create_model()
2022-12-03 14:12:37,298:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=dt_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:37,299:INFO:Checking exceptions
2022-12-03 14:12:37,299:INFO:Importing libraries
2022-12-03 14:12:37,299:INFO:Copying training dataset
2022-12-03 14:12:37,309:INFO:Defining folds
2022-12-03 14:12:37,309:INFO:Declaring metric variables
2022-12-03 14:12:37,330:INFO:Importing untrained model
2022-12-03 14:12:37,339:INFO:Decision Tree w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:12:37,353:INFO:Starting cross validation
2022-12-03 14:12:37,355:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:38,774:INFO:Calculating mean and std
2022-12-03 14:12:38,777:INFO:Creating metrics dataframe
2022-12-03 14:12:38,785:INFO:Uploading results into container
2022-12-03 14:12:38,786:INFO:Uploading model into container now
2022-12-03 14:12:38,787:INFO:master_model_container: 49
2022-12-03 14:12:38,787:INFO:display_container: 3
2022-12-03 14:12:38,790:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=DecisionTreeRegressor(ccp_alpha=0.0,
                                                    criterion='squared_error',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    random_state=123,
                                                    splitter='best'),
                    sp=12, window_length=12)
2022-12-03 14:12:38,791:INFO:create_model() successfully completed......................................
2022-12-03 14:12:38,975:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:38,975:INFO:Creating metrics dataframe
2022-12-03 14:12:39,030:INFO:Initializing Random Forest w/ Cond. Deseasonalize & Detrending
2022-12-03 14:12:39,030:INFO:Total runtime is 2.8403705795605982 minutes
2022-12-03 14:12:39,038:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:39,038:INFO:Initializing create_model()
2022-12-03 14:12:39,038:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=rf_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:39,039:INFO:Checking exceptions
2022-12-03 14:12:39,039:INFO:Importing libraries
2022-12-03 14:12:39,039:INFO:Copying training dataset
2022-12-03 14:12:39,048:INFO:Defining folds
2022-12-03 14:12:39,049:INFO:Declaring metric variables
2022-12-03 14:12:39,088:INFO:Importing untrained model
2022-12-03 14:12:39,098:INFO:Random Forest w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:12:39,124:INFO:Starting cross validation
2022-12-03 14:12:39,125:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:41,923:INFO:Calculating mean and std
2022-12-03 14:12:41,926:INFO:Creating metrics dataframe
2022-12-03 14:12:41,935:INFO:Uploading results into container
2022-12-03 14:12:41,936:INFO:Uploading model into container now
2022-12-03 14:12:41,936:INFO:master_model_container: 50
2022-12-03 14:12:41,936:INFO:display_container: 3
2022-12-03 14:12:41,940:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=RandomForestRegressor(bootstrap=True,
                                                    ccp_alpha=0.0,
                                                    criterion='squared_error',
                                                    max_depth=None,
                                                    max_features=1.0,
                                                    max_leaf_nodes=None,
                                                    max_samples=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    n_estimators=100, n_jobs=-1,
                                                    oob_score=False,
                                                    random_state=123, verbose=0,
                                                    warm_start=False),
                    sp=12, window_length=12)
2022-12-03 14:12:41,940:INFO:create_model() successfully completed......................................
2022-12-03 14:12:42,090:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:42,090:INFO:Creating metrics dataframe
2022-12-03 14:12:42,138:INFO:Initializing Extra Trees w/ Cond. Deseasonalize & Detrending
2022-12-03 14:12:42,139:INFO:Total runtime is 2.8921986222267155 minutes
2022-12-03 14:12:42,147:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:42,147:INFO:Initializing create_model()
2022-12-03 14:12:42,147:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=et_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:42,148:INFO:Checking exceptions
2022-12-03 14:12:42,148:INFO:Importing libraries
2022-12-03 14:12:42,148:INFO:Copying training dataset
2022-12-03 14:12:42,157:INFO:Defining folds
2022-12-03 14:12:42,158:INFO:Declaring metric variables
2022-12-03 14:12:42,169:INFO:Importing untrained model
2022-12-03 14:12:42,178:INFO:Extra Trees w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:12:42,193:INFO:Starting cross validation
2022-12-03 14:12:42,195:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:45,180:INFO:Calculating mean and std
2022-12-03 14:12:45,183:INFO:Creating metrics dataframe
2022-12-03 14:12:45,192:INFO:Uploading results into container
2022-12-03 14:12:45,193:INFO:Uploading model into container now
2022-12-03 14:12:45,193:INFO:master_model_container: 51
2022-12-03 14:12:45,193:INFO:display_container: 3
2022-12-03 14:12:45,198:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=ExtraTreesRegressor(bootstrap=False,
                                                  ccp_alpha=0.0,
                                                  criterion='squared_error',
                                                  max_depth=None,
                                                  max_features=1.0,
                                                  max_leaf_nodes=None,
                                                  max_samples=None,
                                                  min_impurity_decrease=0.0,
                                                  min_samples_leaf=1,
                                                  min_samples_split=2,
                                                  min_weight_fraction_leaf=0.0,
                                                  n_estimators=100, n_jobs=-1,
                                                  oob_score=False,
                                                  random_state=123, verbose=0,
                                                  warm_start=False),
                    sp=12, window_length=12)
2022-12-03 14:12:45,199:INFO:create_model() successfully completed......................................
2022-12-03 14:12:45,352:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:45,352:INFO:Creating metrics dataframe
2022-12-03 14:12:45,396:INFO:Initializing Gradient Boosting w/ Cond. Deseasonalize & Detrending
2022-12-03 14:12:45,396:INFO:Total runtime is 2.9464701453844713 minutes
2022-12-03 14:12:45,404:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:45,404:INFO:Initializing create_model()
2022-12-03 14:12:45,404:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=gbr_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:45,405:INFO:Checking exceptions
2022-12-03 14:12:45,405:INFO:Importing libraries
2022-12-03 14:12:45,405:INFO:Copying training dataset
2022-12-03 14:12:45,420:INFO:Defining folds
2022-12-03 14:12:45,421:INFO:Declaring metric variables
2022-12-03 14:12:45,429:INFO:Importing untrained model
2022-12-03 14:12:45,437:INFO:Gradient Boosting w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:12:45,451:INFO:Starting cross validation
2022-12-03 14:12:45,452:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:47,004:INFO:Calculating mean and std
2022-12-03 14:12:47,007:INFO:Creating metrics dataframe
2022-12-03 14:12:47,015:INFO:Uploading results into container
2022-12-03 14:12:47,015:INFO:Uploading model into container now
2022-12-03 14:12:47,016:INFO:master_model_container: 52
2022-12-03 14:12:47,016:INFO:display_container: 3
2022-12-03 14:12:47,021:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=GradientBoostingRegressor(alpha=0.9,
                                                        ccp_alpha=0.0,
                                                        criterion='friedman_mse',
                                                        init=None,
                                                        learning_rate=0.1,
                                                        loss='squared_error',
                                                        max_depth=3,
                                                        max_features=None,
                                                        max_leaf_nodes=None,
                                                        min_impurity_decrease=0.0,
                                                        min_samples_leaf=1,
                                                        min_samples_split=2,
                                                        min_weight_fraction_leaf=0.0,
                                                        n_estimators=100,
                                                        n_iter_no_change=None,
                                                        random_state=123,
                                                        subsample=1.0,
                                                        tol=0.0001,
                                                        validation_fraction=0.1,
                                                        verbose=0,
                                                        warm_start=False),
                    sp=12, window_length=12)
2022-12-03 14:12:47,021:INFO:create_model() successfully completed......................................
2022-12-03 14:12:47,187:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:47,187:INFO:Creating metrics dataframe
2022-12-03 14:12:47,233:INFO:Initializing AdaBoost w/ Cond. Deseasonalize & Detrending
2022-12-03 14:12:47,233:INFO:Total runtime is 2.9770882606506355 minutes
2022-12-03 14:12:47,241:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:47,241:INFO:Initializing create_model()
2022-12-03 14:12:47,241:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=ada_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:47,241:INFO:Checking exceptions
2022-12-03 14:12:47,242:INFO:Importing libraries
2022-12-03 14:12:47,242:INFO:Copying training dataset
2022-12-03 14:12:47,266:INFO:Defining folds
2022-12-03 14:12:47,267:INFO:Declaring metric variables
2022-12-03 14:12:47,274:INFO:Importing untrained model
2022-12-03 14:12:47,282:INFO:AdaBoost w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:12:47,296:INFO:Starting cross validation
2022-12-03 14:12:47,316:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:49,321:INFO:Calculating mean and std
2022-12-03 14:12:49,324:INFO:Creating metrics dataframe
2022-12-03 14:12:49,334:INFO:Uploading results into container
2022-12-03 14:12:49,334:INFO:Uploading model into container now
2022-12-03 14:12:49,335:INFO:master_model_container: 53
2022-12-03 14:12:49,336:INFO:display_container: 3
2022-12-03 14:12:49,340:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=AdaBoostRegressor(base_estimator=None,
                                                learning_rate=1.0,
                                                loss='linear', n_estimators=50,
                                                random_state=123),
                    sp=12, window_length=12)
2022-12-03 14:12:49,340:INFO:create_model() successfully completed......................................
2022-12-03 14:12:49,523:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:49,523:INFO:Creating metrics dataframe
2022-12-03 14:12:49,569:INFO:Initializing Light Gradient Boosting w/ Cond. Deseasonalize & Detrending
2022-12-03 14:12:49,570:INFO:Total runtime is 3.0160507480303456 minutes
2022-12-03 14:12:49,577:INFO:SubProcess create_model() called ==================================
2022-12-03 14:12:49,577:INFO:Initializing create_model()
2022-12-03 14:12:49,578:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=lightgbm_cds_dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FB3445EA00>, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:49,578:INFO:Checking exceptions
2022-12-03 14:12:49,578:INFO:Importing libraries
2022-12-03 14:12:49,578:INFO:Copying training dataset
2022-12-03 14:12:49,598:INFO:Defining folds
2022-12-03 14:12:49,598:INFO:Declaring metric variables
2022-12-03 14:12:49,606:INFO:Importing untrained model
2022-12-03 14:12:49,614:INFO:Light Gradient Boosting w/ Cond. Deseasonalize & Detrending Imported successfully
2022-12-03 14:12:49,629:INFO:Starting cross validation
2022-12-03 14:12:49,630:INFO:Cross validating with ExpandingWindowSplitter(fh=ForecastingHorizon([1, 2, 3], dtype='int64', is_relative=True),
                        initial_window=126, start_with_window=True,
                        step_length=3), n_jobs=-1
2022-12-03 14:12:51,175:INFO:Calculating mean and std
2022-12-03 14:12:51,178:INFO:Creating metrics dataframe
2022-12-03 14:12:51,188:INFO:Uploading results into container
2022-12-03 14:12:51,188:INFO:Uploading model into container now
2022-12-03 14:12:51,189:INFO:master_model_container: 54
2022-12-03 14:12:51,189:INFO:display_container: 3
2022-12-03 14:12:51,194:INFO:BaseCdsDtForecaster(degree=1, deseasonal_model='additive',
                    fe_target_rr=[WindowSummarizer(lag_feature={'lag': [12, 11,
                                                                        10, 9,
                                                                        8, 7, 6,
                                                                        5, 4, 3,
                                                                        2, 1]},
                                                   n_jobs=1, target_cols=None,
                                                   truncate=None)],
                    regressor=LGBMRegressor(boosting_type='gbdt',
                                            class_weight=None,
                                            colsample_bytree=1.0,
                                            importance_type='split',
                                            learning_rate=0.1, max_depth=-1,
                                            min_child_samples=20,
                                            min_child_weight=0.001,
                                            min_split_gain=0.0,
                                            n_estimators=100, n_jobs=-1,
                                            num_leaves=31, objective=None,
                                            random_state=123, reg_alpha=0.0,
                                            reg_lambda=0.0, silent='warn',
                                            subsample=1.0,
                                            subsample_for_bin=200000,
                                            subsample_freq=0),
                    sp=12, window_length=12)
2022-12-03 14:12:51,194:INFO:create_model() successfully completed......................................
2022-12-03 14:12:51,364:INFO:SubProcess create_model() end ==================================
2022-12-03 14:12:51,364:INFO:Creating metrics dataframe
2022-12-03 14:12:51,467:INFO:Initializing create_model()
2022-12-03 14:12:51,468:INFO:create_model(self=<pycaret.time_series.forecasting.oop.TSForecastingExperiment object at 0x000001FB30D3B4C0>, estimator=ExponentialSmoothing(damped_trend=False, damping_trend=None, initial_level=None,
                     initial_seasonal=None, initial_trend=None,
                     initialization_method='estimated', method=None,
                     minimize_kwargs=None, optimized=True, random_state=None,
                     remove_bias=False, seasonal='mul', smoothing_level=None,
                     smoothing_seasonal=None, smoothing_trend=None, sp=12,
                     start_params=None, trend='add', use_boxcox=None,
                     use_brute=True), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2022-12-03 14:12:51,468:INFO:Checking exceptions
2022-12-03 14:12:51,472:INFO:Importing libraries
2022-12-03 14:12:51,472:INFO:Copying training dataset
2022-12-03 14:12:51,478:INFO:Defining folds
2022-12-03 14:12:51,478:INFO:Declaring metric variables
2022-12-03 14:12:51,479:INFO:Importing untrained model
2022-12-03 14:12:51,479:INFO:Declaring custom model
2022-12-03 14:12:51,481:INFO:Exponential Smoothing Imported successfully
2022-12-03 14:12:51,481:INFO:Cross validation set to False
2022-12-03 14:12:51,481:INFO:Fitting Model
2022-12-03 14:12:51,928:INFO:ExponentialSmoothing(damped_trend=False, damping_trend=None, initial_level=None,
                     initial_seasonal=None, initial_trend=None,
                     initialization_method='estimated', method=None,
                     minimize_kwargs=None, optimized=True, random_state=None,
                     remove_bias=False, seasonal='mul', smoothing_level=None,
                     smoothing_seasonal=None, smoothing_trend=None, sp=12,
                     start_params=None, trend='add', use_boxcox=None,
                     use_brute=True)
2022-12-03 14:12:51,928:INFO:create_model() successfully completed......................................
2022-12-03 14:12:52,238:INFO:master_model_container: 54
2022-12-03 14:12:52,238:INFO:display_container: 3
2022-12-03 14:12:52,239:INFO:ExponentialSmoothing(damped_trend=False, damping_trend=None, initial_level=None,
                     initial_seasonal=None, initial_trend=None,
                     initialization_method='estimated', method=None,
                     minimize_kwargs=None, optimized=True, random_state=None,
                     remove_bias=False, seasonal='mul', smoothing_level=None,
                     smoothing_seasonal=None, smoothing_trend=None, sp=12,
                     start_params=None, trend='add', use_boxcox=None,
                     use_brute=True)
2022-12-03 14:12:52,239:INFO:compare_models() successfully completed......................................
